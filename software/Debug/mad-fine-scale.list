
mad-fine-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003908  08003908  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003908  08003908  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000001c  0800392c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800392c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000bb374  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008af2  00000000  00000000  000db3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003e493  00000000  00000000  000e3eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c50  00000000  00000000  00122340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003f68  00000000  00000000  00124f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec0c  00000000  00000000  00128ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003929a  00000000  00000000  00147b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc46e  00000000  00000000  00180d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0023d20c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c68  00000000  00000000  0023d260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003408 	.word	0x08003408

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08003408 	.word	0x08003408

08000100 <__gnu_thumb1_case_sqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5609      	ldrsb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <_ZN6ADCobjC1Ev>:
#include "adc.h"

ADCobj::ADCobj()
{
    return;
}
 8000414:	4770      	bx	lr
	...

08000418 <_ZN6ADCobj4readEh>:
uint32_t ADCobj::read(uint8_t channel)
{
    vsense = 0;

    //Select Channel for conversion:
    ADC1->CHSELR = (1 << channel);
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <_ZN6ADCobj4readEh+0x28>)
{
 800041e:	b510      	push	{r4, lr}
    ADC1->CHSELR = (1 << channel);
 8000420:	629a      	str	r2, [r3, #40]	; 0x28

    //Set single conversion mode:
    ADC1->CFGR1 &= ~(ADC_CFGR1_CONT_Msk);
 8000422:	68da      	ldr	r2, [r3, #12]
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <_ZN6ADCobj4readEh+0x2c>)
{
 8000426:	0004      	movs	r4, r0
    ADC1->CFGR1 &= ~(ADC_CFGR1_CONT_Msk);
 8000428:	400a      	ands	r2, r1
 800042a:	60da      	str	r2, [r3, #12]

    //Reset End Of Conversion flag (should be unnecessary)
    //ADC1->ISR |= ADC_ISR_EOC;

    /* Performs the AD conversion */
    ADC1->CR |= ADC_CR_ADSTART; /* start the ADC conversion */
 800042c:	2204      	movs	r2, #4
 800042e:	6899      	ldr	r1, [r3, #8]
 8000430:	4311      	orrs	r1, r2
 8000432:	6099      	str	r1, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0){}; /* wait end of conversion */
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	4211      	tst	r1, r2
 8000438:	d0fc      	beq.n	8000434 <_ZN6ADCobj4readEh+0x1c>

    vsense = ADC1->DR;
 800043a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800043c:	6020      	str	r0, [r4, #0]

    return vsense;
}
 800043e:	bd10      	pop	{r4, pc}
 8000440:	40012400 	.word	0x40012400
 8000444:	ffffdfff 	.word	0xffffdfff

08000448 <_ZN7DisplayC1Ev>:
#include "Menu_Module.hpp"

Display::Display()
{
	static u8g2_t u8g2_instance;
	u8g2 = &u8g2_instance;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <_ZN7DisplayC1Ev+0x8>)
 800044a:	6003      	str	r3, [r0, #0]
	return;
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000038 	.word	0x20000038

08000454 <_Z12uint_to_cstrtPc>:
		//		u8g2_DrawStr(u8g2, 25, 21, test);
	} while (u8g2_NextPage(u8g2));
	return;
}

void uint_to_cstr(uint16_t numval, char* text){
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	0004      	movs	r4, r0
 8000458:	000d      	movs	r5, r1
	//Assemble a string to print
		for (uint8_t i = 2; i <= 5; i++)
		{
			text[5 - i] = (char)((numval % 10U) + '0');
 800045a:	270a      	movs	r7, #10
 800045c:	1cce      	adds	r6, r1, #3
 800045e:	0020      	movs	r0, r4
 8000460:	0039      	movs	r1, r7
 8000462:	f7ff fee7 	bl	8000234 <__aeabi_uidivmod>
 8000466:	3130      	adds	r1, #48	; 0x30
 8000468:	7031      	strb	r1, [r6, #0]
			numval /= 10;
 800046a:	0020      	movs	r0, r4
 800046c:	0039      	movs	r1, r7
 800046e:	f7ff fe5b 	bl	8000128 <__udivsi3>
 8000472:	0033      	movs	r3, r6
 8000474:	b284      	uxth	r4, r0
		for (uint8_t i = 2; i <= 5; i++)
 8000476:	3e01      	subs	r6, #1
 8000478:	429d      	cmp	r5, r3
 800047a:	d1f0      	bne.n	800045e <_Z12uint_to_cstrtPc+0xa>
		}
		text[4] = '\0';
 800047c:	2300      	movs	r3, #0
 800047e:	712b      	strb	r3, [r5, #4]
		return;
}
 8000480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000484 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv>:
}

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
		U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
		U8X8_UNUSED void *arg_ptr)
{
 8000484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t i;
	uint8_t buffer[4];
	switch (msg)
 8000486:	292d      	cmp	r1, #45	; 0x2d
 8000488:	d809      	bhi.n	800049e <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x1a>
 800048a:	2927      	cmp	r1, #39	; 0x27
 800048c:	d913      	bls.n	80004b6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x32>
 800048e:	392a      	subs	r1, #42	; 0x2a
 8000490:	0008      	movs	r0, r1
 8000492:	2901      	cmp	r1, #1
 8000494:	d809      	bhi.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
 8000496:	2300      	movs	r3, #0
 8000498:	f7ff fe3c 	bl	8000114 <__gnu_thumb1_case_uqi>
 800049c:	1117      	.short	0x1117
 800049e:	294b      	cmp	r1, #75	; 0x4b
 80004a0:	d020      	beq.n	80004e4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x60>
 80004a2:	d805      	bhi.n	80004b0 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x2c>
 80004a4:	3940      	subs	r1, #64	; 0x40
 80004a6:	290a      	cmp	r1, #10
 80004a8:	d805      	bhi.n	80004b6 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x32>
	default:
		u8x8_SetGPIOResult(u8x8, 1); // default return value
		break;
	}
	return 1;
}
 80004aa:	2001      	movs	r0, #1
 80004ac:	b004      	add	sp, #16
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
	switch (msg)
 80004b0:	394c      	subs	r1, #76	; 0x4c
 80004b2:	2907      	cmp	r1, #7
 80004b4:	d9f9      	bls.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
		u8x8_SetGPIOResult(u8x8, 1); // default return value
 80004b6:	2301      	movs	r3, #1
 80004b8:	3028      	adds	r0, #40	; 0x28
 80004ba:	7003      	strb	r3, [r0, #0]
		break;
 80004bc:	e7f5      	b.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
		for (i = 0; i < arg_int; i++)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d0f3      	beq.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
			__NOP();
 80004c2:	46c0      	nop			; (mov r8, r8)
		for (i = 0; i < arg_int; i++)
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	e7f9      	b.n	80004be <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x3a>
 80004ca:	20a0      	movs	r0, #160	; 0xa0
 80004cc:	0040      	lsls	r0, r0, #1
		for (i = 0; i < arg_int; i++)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d0eb      	beq.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
 80004d2:	0001      	movs	r1, r0
				__NOP();
 80004d4:	46c0      	nop			; (mov r8, r8)
			for (uint16_t n = 0; n < 320; n++)
 80004d6:	3901      	subs	r1, #1
 80004d8:	b289      	uxth	r1, r1
 80004da:	2900      	cmp	r1, #0
 80004dc:	d1fa      	bne.n	80004d4 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x50>
		for (i = 0; i < arg_int; i++)
 80004de:	3301      	adds	r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	e7f4      	b.n	80004ce <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x4a>
		buffer[0] = 0x00;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x94>)
 80004e6:	ac03      	add	r4, sp, #12
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)buffer, 3, 500);
 80004e8:	26fa      	movs	r6, #250	; 0xfa
		buffer[0] = 0x00;
 80004ea:	8023      	strh	r3, [r4, #0]
		buffer[2] = 0x10; //disable charge pump
 80004ec:	2310      	movs	r3, #16
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)buffer, 3, 500);
 80004ee:	4d0b      	ldr	r5, [pc, #44]	; (800051c <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x98>)
 80004f0:	0076      	lsls	r6, r6, #1
		buffer[2] = 0x10; //disable charge pump
 80004f2:	70a3      	strb	r3, [r4, #2]
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)buffer, 3, 500);
 80004f4:	0022      	movs	r2, r4
 80004f6:	2178      	movs	r1, #120	; 0x78
 80004f8:	0028      	movs	r0, r5
 80004fa:	9600      	str	r6, [sp, #0]
 80004fc:	3b0d      	subs	r3, #13
 80004fe:	f001 ff01 	bl	8002304 <HAL_I2C_Master_Transmit>
		buffer[2] = 0x14; //enable charge pump
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x9c>)
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)buffer, 4, 500);
 8000504:	0022      	movs	r2, r4
		buffer[2] = 0x14; //enable charge pump
 8000506:	8063      	strh	r3, [r4, #2]
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)buffer, 4, 500);
 8000508:	2178      	movs	r1, #120	; 0x78
 800050a:	2304      	movs	r3, #4
 800050c:	0028      	movs	r0, r5
 800050e:	9600      	str	r6, [sp, #0]
 8000510:	f001 fef8 	bl	8002304 <HAL_I2C_Master_Transmit>
		break;
 8000514:	e7c9      	b.n	80004aa <_Z25u8x8_stm32_gpio_and_delayP11u8x8_structhhPv+0x26>
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	ffff8d00 	.word	0xffff8d00
 800051c:	20000234 	.word	0x20000234
 8000520:	ffffaf14 	.word	0xffffaf14

08000524 <_Z16u8x8_byte_hw_i2cP11u8x8_structhhPv>:

uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000524:	b513      	push	{r0, r1, r4, lr}
 8000526:	3914      	subs	r1, #20
 8000528:	0014      	movs	r4, r2
 800052a:	0008      	movs	r0, r1
 800052c:	001a      	movs	r2, r3
 800052e:	290c      	cmp	r1, #12
 8000530:	d813      	bhi.n	800055a <_Z16u8x8_byte_hw_i2cP11u8x8_structhhPv+0x36>
 8000532:	f7ff fdef 	bl	8000114 <__gnu_thumb1_case_uqi>
 8000536:	1210      	.short	0x1210
 8000538:	10100712 	.word	0x10100712
 800053c:	12121212 	.word	0x12121212
 8000540:	1212      	.short	0x1212
 8000542:	10          	.byte	0x10
 8000543:	00          	.byte	0x00
	switch (msg)
	{
	case U8X8_MSG_BYTE_SEND:
		HAL_I2C_Master_Transmit(&hi2c1, 0x3c << 1, (uint8_t *)arg_ptr, arg_int, 500);
 8000544:	21fa      	movs	r1, #250	; 0xfa
 8000546:	0049      	lsls	r1, r1, #1
 8000548:	9100      	str	r1, [sp, #0]
 800054a:	397d      	subs	r1, #125	; 0x7d
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <_Z16u8x8_byte_hw_i2cP11u8x8_structhhPv+0x3c>)
 800054e:	b2a3      	uxth	r3, r4
 8000550:	39ff      	subs	r1, #255	; 0xff
 8000552:	f001 fed7 	bl	8002304 <HAL_I2C_Master_Transmit>
 8000556:	2001      	movs	r0, #1
		break;
	default:
		return 0;
	}
	return 1;
}
 8000558:	bd16      	pop	{r1, r2, r4, pc}
		return 0;
 800055a:	2000      	movs	r0, #0
 800055c:	e7fc      	b.n	8000558 <_Z16u8x8_byte_hw_i2cP11u8x8_structhhPv+0x34>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000234 	.word	0x20000234

08000564 <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_>:
{
 8000564:	b570      	push	{r4, r5, r6, lr}
	HAL_Delay(500);
 8000566:	25fa      	movs	r5, #250	; 0xfa
{
 8000568:	0004      	movs	r4, r0
	u8g2_Setup_ssd1306_i2c_128x32_univision_2(u8g2, U8G2_R0, (u8x8_byte_hw_i2c), (u8x8_stm32_gpio_and_delay));
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_+0x50>)
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_+0x54>)
 800056e:	4913      	ldr	r1, [pc, #76]	; (80005bc <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_+0x58>)
	HAL_Delay(500);
 8000570:	006d      	lsls	r5, r5, #1
	u8g2_Setup_ssd1306_i2c_128x32_univision_2(u8g2, U8G2_R0, (u8x8_byte_hw_i2c), (u8x8_stm32_gpio_and_delay));
 8000572:	6800      	ldr	r0, [r0, #0]
 8000574:	f000 fcc0 	bl	8000ef8 <u8g2_Setup_ssd1306_i2c_128x32_univision_2>
	HAL_Delay(500);
 8000578:	0028      	movs	r0, r5
 800057a:	f001 f9eb 	bl	8001954 <HAL_Delay>
	u8g2_InitDisplay(u8g2);
 800057e:	6820      	ldr	r0, [r4, #0]
 8000580:	f001 f928 	bl	80017d4 <u8x8_InitDisplay>
	HAL_Delay(500);
 8000584:	0028      	movs	r0, r5
 8000586:	f001 f9e5 	bl	8001954 <HAL_Delay>
	u8g2_SetPowerSave(u8g2, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	6820      	ldr	r0, [r4, #0]
 800058e:	f001 f928 	bl	80017e2 <u8x8_SetPowerSave>
	HAL_Delay(1000);
 8000592:	20fa      	movs	r0, #250	; 0xfa
 8000594:	0080      	lsls	r0, r0, #2
 8000596:	f001 f9dd 	bl	8001954 <HAL_Delay>
	u8g2_ClearDisplay(u8g2);
 800059a:	6820      	ldr	r0, [r4, #0]
 800059c:	f000 fc98 	bl	8000ed0 <u8g2_ClearDisplay>
	u8g2_SetContrast(u8g2, 120);
 80005a0:	6820      	ldr	r0, [r4, #0]
 80005a2:	2178      	movs	r1, #120	; 0x78
 80005a4:	f001 f924 	bl	80017f0 <u8x8_SetContrast>
	u8g2_SetFont(u8g2, u8g2_font_missingplanet_tr);
 80005a8:	4905      	ldr	r1, [pc, #20]	; (80005c0 <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_+0x5c>)
 80005aa:	6820      	ldr	r0, [r4, #0]
 80005ac:	f000 fe76 	bl	800129c <u8g2_SetFont>
}
 80005b0:	bd70      	pop	{r4, r5, r6, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	08000485 	.word	0x08000485
 80005b8:	08000525 	.word	0x08000525
 80005bc:	0800385c 	.word	0x0800385c
 80005c0:	08003490 	.word	0x08003490

080005c4 <_ZN6ADCobj5setupEv>:
	RCC->APBENR2 |= RCC_APBENR2_ADCEN;        /* (1) */
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_ZN6ADCobj5setupEv+0x58>)
 80005c8:	0352      	lsls	r2, r2, #13
 80005ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005cc:	430a      	orrs	r2, r1
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->CR |= RCC_CR_HSION;               /* (2) */
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSIRDY) == 0) /* (3) */
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	00d2      	lsls	r2, r2, #3
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	4211      	tst	r1, r2
 80005e2:	d0fc      	beq.n	80005de <_ZN6ADCobj5setupEv+0x1a>
	ADC1->CR &= (uint32_t)(~ADC_CR_ADEN); /* (2) */
 80005e4:	2201      	movs	r2, #1
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <_ZN6ADCobj5setupEv+0x5c>)
 80005e8:	6899      	ldr	r1, [r3, #8]
 80005ea:	4391      	bics	r1, r2
 80005ec:	6099      	str	r1, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADEN)){} //Wait for ADC to be off
 80005ee:	6899      	ldr	r1, [r3, #8]
 80005f0:	4211      	tst	r1, r2
 80005f2:	d1fc      	bne.n	80005ee <_ZN6ADCobj5setupEv+0x2a>
	ADC1->CR |= ADC_CR_ADCAL;              /* (3) */
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	6899      	ldr	r1, [r3, #8]
 80005f8:	0612      	lsls	r2, r2, #24
 80005fa:	430a      	orrs	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (4) */ //FIXME: Seemingly endless loop
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	2a00      	cmp	r2, #0
 8000602:	dbfc      	blt.n	80005fe <_ZN6ADCobj5setupEv+0x3a>
	ADC1->SMPR |= ADC_SMPR_SMP1_0 | ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_2; /* (4) */
 8000604:	2207      	movs	r2, #7
 8000606:	6959      	ldr	r1, [r3, #20]
 8000608:	430a      	orrs	r2, r1
		ADC1->CR |= ADC_CR_ADEN; /* (1) */
 800060a:	2101      	movs	r1, #1
	ADC1->SMPR |= ADC_SMPR_SMP1_0 | ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_2; /* (4) */
 800060c:	615a      	str	r2, [r3, #20]
		ADC1->CR |= ADC_CR_ADEN; /* (1) */
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	430a      	orrs	r2, r1
 8000612:	609a      	str	r2, [r3, #8]
	} while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (2) */;
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	420a      	tst	r2, r1
 8000618:	d0f9      	beq.n	800060e <_ZN6ADCobj5setupEv+0x4a>
}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000
 8000620:	40012400 	.word	0x40012400

08000624 <_ZN8ADC_TestC1Ev>:
	} while (u8g2_NextPage(peripherals.display->u8g2));
		HAL_Delay(50);
		return;
}

ADC_Test::ADC_Test(){
 8000624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#include "ADC_Module.hpp"
#include "Display_Module.hpp"
#include "Encoder_Module.hpp"
#include "LED_Module.hpp"

class Peripherals
 8000626:	2300      	movs	r3, #0
 8000628:	0004      	movs	r4, r0
 800062a:	6003      	str	r3, [r0, #0]
 800062c:	6043      	str	r3, [r0, #4]
 800062e:	6083      	str	r3, [r0, #8]
 8000630:	60c3      	str	r3, [r0, #12]
 8000632:	6103      	str	r3, [r0, #16]
 8000634:	6143      	str	r3, [r0, #20]
 8000636:	2205      	movs	r2, #5
 8000638:	492d      	ldr	r1, [pc, #180]	; (80006f0 <_ZN8ADC_TestC1Ev+0xcc>)
 800063a:	302a      	adds	r0, #42	; 0x2a
 800063c:	f002 fed2 	bl	80033e4 <memcpy>
 8000640:	0020      	movs	r0, r4
 8000642:	2205      	movs	r2, #5
 8000644:	492b      	ldr	r1, [pc, #172]	; (80006f4 <_ZN8ADC_TestC1Ev+0xd0>)
 8000646:	302f      	adds	r0, #47	; 0x2f
 8000648:	f002 fecc 	bl	80033e4 <memcpy>
 800064c:	0020      	movs	r0, r4
 800064e:	2205      	movs	r2, #5
 8000650:	4929      	ldr	r1, [pc, #164]	; (80006f8 <_ZN8ADC_TestC1Ev+0xd4>)
 8000652:	3034      	adds	r0, #52	; 0x34
 8000654:	f002 fec6 	bl	80033e4 <memcpy>

	//static Test adc_test;
	//static Peripherals peripherals;
	static ADCobj adc;
 8000658:	4e28      	ldr	r6, [pc, #160]	; (80006fc <_ZN8ADC_TestC1Ev+0xd8>)
 800065a:	7833      	ldrb	r3, [r6, #0]
 800065c:	f3bf 8f5b 	dmb	ish
 8000660:	4d27      	ldr	r5, [pc, #156]	; (8000700 <_ZN8ADC_TestC1Ev+0xdc>)
 8000662:	07db      	lsls	r3, r3, #31
 8000664:	d40a      	bmi.n	800067c <_ZN8ADC_TestC1Ev+0x58>
 8000666:	0030      	movs	r0, r6
 8000668:	f002 fe88 	bl	800337c <__cxa_guard_acquire>
 800066c:	2800      	cmp	r0, #0
 800066e:	d005      	beq.n	800067c <_ZN8ADC_TestC1Ev+0x58>
 8000670:	0028      	movs	r0, r5
 8000672:	f7ff fecf 	bl	8000414 <_ZN6ADCobjC1Ev>
 8000676:	0030      	movs	r0, r6
 8000678:	f002 fe8d 	bl	8003396 <__cxa_guard_release>
	peripherals.adc = &adc;
	peripherals.adc->setup();
 800067c:	0028      	movs	r0, r5
	peripherals.adc = &adc;
 800067e:	6065      	str	r5, [r4, #4]
	peripherals.adc->setup();
 8000680:	f7ff ffa0 	bl	80005c4 <_ZN6ADCobj5setupEv>

	static Display display;
 8000684:	4e1f      	ldr	r6, [pc, #124]	; (8000704 <_ZN8ADC_TestC1Ev+0xe0>)
 8000686:	7833      	ldrb	r3, [r6, #0]
 8000688:	f3bf 8f5b 	dmb	ish
 800068c:	4d1e      	ldr	r5, [pc, #120]	; (8000708 <_ZN8ADC_TestC1Ev+0xe4>)
 800068e:	07db      	lsls	r3, r3, #31
 8000690:	d40a      	bmi.n	80006a8 <_ZN8ADC_TestC1Ev+0x84>
 8000692:	0030      	movs	r0, r6
 8000694:	f002 fe72 	bl	800337c <__cxa_guard_acquire>
 8000698:	2800      	cmp	r0, #0
 800069a:	d005      	beq.n	80006a8 <_ZN8ADC_TestC1Ev+0x84>
 800069c:	0028      	movs	r0, r5
 800069e:	f7ff fed3 	bl	8000448 <_ZN7DisplayC1Ev>
 80006a2:	0030      	movs	r0, r6
 80006a4:	f002 fe77 	bl	8003396 <__cxa_guard_release>
	peripherals.display = &display;
	peripherals.display->setup(u8x8_byte_hw_i2c, u8x8_stm32_gpio_and_delay);
 80006a8:	0028      	movs	r0, r5
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <_ZN8ADC_TestC1Ev+0xe8>)
 80006ac:	4918      	ldr	r1, [pc, #96]	; (8000710 <_ZN8ADC_TestC1Ev+0xec>)
	peripherals.display = &display;
 80006ae:	60a5      	str	r5, [r4, #8]
	peripherals.display->setup(u8x8_byte_hw_i2c, u8x8_stm32_gpio_and_delay);
 80006b0:	f7ff ff58 	bl	8000564 <_ZN7Display5setupEPFhP11u8x8_structhhPvES4_>
	column_2_str  = column_2_str_data;
	static char column_3_str_data[] = "0000";
	column_3_str  = column_3_str_data;

	// Enable internal temperature sensor and battery sensor:
	ADC1_COMMON->CCR |= ADC_CCR_TSEN;
 80006b4:	2280      	movs	r2, #128	; 0x80
	column_1_str  = column_1_str_data;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <_ZN8ADC_TestC1Ev+0xf0>)
	ADC1_COMMON->CCR |= ADC_CCR_TSEN;
 80006b8:	0412      	lsls	r2, r2, #16
	column_1_str  = column_1_str_data;
 80006ba:	61a3      	str	r3, [r4, #24]
	column_2_str  = column_2_str_data;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <_ZN8ADC_TestC1Ev+0xf4>)
	uint8_t memory_address = 0x02; // Address of nonvolatile wiper 0
	uint8_t command = 0b00;	// Write command
	// uint8_t data = 64; // Wiper to middle pos (7-bit resolution, values between 0x00/0 and 0x80/128); amplifier gain is 1 + 100k/((wiper_pos/128) * 10k + 75R)
	uint8_t data = 79; // Set gain to ~76
	uint8_t tx_assembly[] = {(0x00U | (memory_address << 4U) | (command << 2U) | ((data & 0b1000000U) > 0U)), ((data & 0b01111111U) << 1U)}; // shift data one to the left, as the HAL probably uses left-aligned data and put MSB to 7th position of first byte
	HAL_I2C_Master_Transmit(&hi2c1, /* I2C address =*/ 0b0101000 << 1 , tx_assembly, 2, 100);
 80006be:	4817      	ldr	r0, [pc, #92]	; (800071c <_ZN8ADC_TestC1Ev+0xf8>)
	column_2_str  = column_2_str_data;
 80006c0:	61e3      	str	r3, [r4, #28]
	column_3_str  = column_3_str_data;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <_ZN8ADC_TestC1Ev+0xfc>)
 80006c4:	6223      	str	r3, [r4, #32]
	ADC1_COMMON->CCR |= ADC_CCR_TSEN;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <_ZN8ADC_TestC1Ev+0x100>)
 80006c8:	6819      	ldr	r1, [r3, #0]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
	ADC1_COMMON->CCR |= ADC_CCR_VBATEN;
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	0452      	lsls	r2, r2, #17
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
	uint8_t tx_assembly[] = {(0x00U | (memory_address << 4U) | (command << 2U) | ((data & 0b1000000U) > 0U)), ((data & 0b01111111U) << 1U)}; // shift data one to the left, as the HAL probably uses left-aligned data and put MSB to 7th position of first byte
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <_ZN8ADC_TestC1Ev+0x104>)
 80006da:	aa03      	add	r2, sp, #12
 80006dc:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, /* I2C address =*/ 0b0101000 << 1 , tx_assembly, 2, 100);
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	2150      	movs	r1, #80	; 0x50
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	3b62      	subs	r3, #98	; 0x62
 80006e6:	f001 fe0d 	bl	8002304 <HAL_I2C_Master_Transmit>
}
 80006ea:	0020      	movs	r0, r4
 80006ec:	b004      	add	sp, #16
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	08003420 	.word	0x08003420
 80006f4:	08003425 	.word	0x08003425
 80006f8:	0800342a 	.word	0x0800342a
 80006fc:	200000bc 	.word	0x200000bc
 8000700:	200000c4 	.word	0x200000c4
 8000704:	200000c0 	.word	0x200000c0
 8000708:	200000cc 	.word	0x200000cc
 800070c:	08000485 	.word	0x08000485
 8000710:	08000525 	.word	0x08000525
 8000714:	20000000 	.word	0x20000000
 8000718:	20000005 	.word	0x20000005
 800071c:	20000234 	.word	0x20000234
 8000720:	2000000a 	.word	0x2000000a
 8000724:	40012708 	.word	0x40012708
 8000728:	ffff9e21 	.word	0xffff9e21

0800072c <_ZN8ADC_Test7performEv>:

void ADC_Test::perform(){
 800072c:	b570      	push	{r4, r5, r6, lr}
	// Read both channels
	// Due to oversampling, the value in the register is 16x greater than it would be normally
//	column_1_read = 322*(peripherals.adc->read(12)) + 30; // Internal temperature channel
	column_2_read = peripherals.adc->read(1);		  // Instrumentation amplifier channel
 800072e:	2101      	movs	r1, #1
void ADC_Test::perform(){
 8000730:	0004      	movs	r4, r0
	column_2_read = peripherals.adc->read(1);		  // Instrumentation amplifier channel
 8000732:	6840      	ldr	r0, [r0, #4]
 8000734:	f7ff fe70 	bl	8000418 <_ZN6ADCobj4readEh>
//	column_3_read = 30*peripherals.adc->read(14)/(16*41); // Battery voltage channel

	//convert to text
	uint_to_cstr(column_1_read, column_1_str);
 8000738:	69a1      	ldr	r1, [r4, #24]
	column_2_read = peripherals.adc->read(1);		  // Instrumentation amplifier channel
 800073a:	84e0      	strh	r0, [r4, #38]	; 0x26
	uint_to_cstr(column_1_read, column_1_str);
 800073c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800073e:	f7ff fe89 	bl	8000454 <_Z12uint_to_cstrtPc>
	uint_to_cstr(column_2_read, column_2_str);
 8000742:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000744:	69e1      	ldr	r1, [r4, #28]
 8000746:	f7ff fe85 	bl	8000454 <_Z12uint_to_cstrtPc>
	uint_to_cstr(column_3_read, column_3_str);
 800074a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800074c:	6a21      	ldr	r1, [r4, #32]
 800074e:	f7ff fe81 	bl	8000454 <_Z12uint_to_cstrtPc>

	u8g2_FirstPage(peripherals.display->u8g2);
 8000752:	68a3      	ldr	r3, [r4, #8]
	do
	{

		u8g2_DrawStr(peripherals.display->u8g2, 4, 9, column_1_text);
 8000754:	2609      	movs	r6, #9
	u8g2_FirstPage(peripherals.display->u8g2);
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f000 fb8a 	bl	8000e70 <u8g2_FirstPage>
		u8g2_DrawStr(peripherals.display->u8g2, 4, 21, column_1_str);
 800075c:	2515      	movs	r5, #21
		u8g2_DrawStr(peripherals.display->u8g2, 4, 9, column_1_text);
 800075e:	0023      	movs	r3, r4
 8000760:	68a0      	ldr	r0, [r4, #8]
 8000762:	0032      	movs	r2, r6
 8000764:	2104      	movs	r1, #4
 8000766:	332a      	adds	r3, #42	; 0x2a
 8000768:	6800      	ldr	r0, [r0, #0]
 800076a:	f000 fd57 	bl	800121c <u8g2_DrawStr>
		u8g2_DrawStr(peripherals.display->u8g2, 4, 21, column_1_str);
 800076e:	68a0      	ldr	r0, [r4, #8]
 8000770:	002a      	movs	r2, r5
 8000772:	2104      	movs	r1, #4
 8000774:	69a3      	ldr	r3, [r4, #24]
 8000776:	6800      	ldr	r0, [r0, #0]
 8000778:	f000 fd50 	bl	800121c <u8g2_DrawStr>
		u8g2_DrawStr(peripherals.display->u8g2, 44, 9, column_2_text);
 800077c:	0023      	movs	r3, r4
 800077e:	68a0      	ldr	r0, [r4, #8]
 8000780:	0032      	movs	r2, r6
 8000782:	212c      	movs	r1, #44	; 0x2c
 8000784:	332f      	adds	r3, #47	; 0x2f
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	f000 fd48 	bl	800121c <u8g2_DrawStr>
		u8g2_DrawStr(peripherals.display->u8g2, 44, 21, column_2_str);
 800078c:	68a0      	ldr	r0, [r4, #8]
 800078e:	002a      	movs	r2, r5
 8000790:	212c      	movs	r1, #44	; 0x2c
 8000792:	69e3      	ldr	r3, [r4, #28]
 8000794:	6800      	ldr	r0, [r0, #0]
 8000796:	f000 fd41 	bl	800121c <u8g2_DrawStr>
		u8g2_DrawStr(peripherals.display->u8g2, 84, 9, column_3_text);
 800079a:	0023      	movs	r3, r4
 800079c:	68a0      	ldr	r0, [r4, #8]
 800079e:	0032      	movs	r2, r6
 80007a0:	2154      	movs	r1, #84	; 0x54
 80007a2:	3334      	adds	r3, #52	; 0x34
 80007a4:	6800      	ldr	r0, [r0, #0]
 80007a6:	f000 fd39 	bl	800121c <u8g2_DrawStr>
		u8g2_DrawStr(peripherals.display->u8g2, 84, 21, column_3_str);
 80007aa:	68a0      	ldr	r0, [r4, #8]
 80007ac:	6a23      	ldr	r3, [r4, #32]
 80007ae:	002a      	movs	r2, r5
 80007b0:	2154      	movs	r1, #84	; 0x54
 80007b2:	6800      	ldr	r0, [r0, #0]
 80007b4:	f000 fd32 	bl	800121c <u8g2_DrawStr>

	} while (u8g2_NextPage(peripherals.display->u8g2));
 80007b8:	68a3      	ldr	r3, [r4, #8]
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	f000 fb66 	bl	8000e8c <u8g2_NextPage>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d1cc      	bne.n	800075e <_ZN8ADC_Test7performEv+0x32>




	HAL_Delay(50);
 80007c4:	3032      	adds	r0, #50	; 0x32
 80007c6:	f001 f8c5 	bl	8001954 <HAL_Delay>
	return;
}
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007cc:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	250c      	movs	r5, #12
{
 80007d0:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	002a      	movs	r2, r5
 80007d4:	2100      	movs	r1, #0
 80007d6:	a801      	add	r0, sp, #4
 80007d8:	f002 fe0d 	bl	80033f6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007dc:	4c1b      	ldr	r4, [pc, #108]	; (800084c <MX_ADC1_Init+0x80>)
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC1_Init+0x84>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 80007e2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ea:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	3a03      	subs	r2, #3
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f0:	18a1      	adds	r1, r4, r2
 80007f2:	77cb      	strb	r3, [r1, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	0021      	movs	r1, r4
 80007f6:	312c      	adds	r1, #44	; 0x2c
 80007f8:	700b      	strb	r3, [r1, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = ENABLE;
 80007fa:	0021      	movs	r1, r4
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fc:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = ENABLE;
 80007fe:	313c      	adds	r1, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000802:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	61e2      	str	r2, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000812:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000814:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000816:	700a      	strb	r2, [r1, #0]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000818:	6425      	str	r5, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800081a:	6463      	str	r3, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800081c:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800081e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	f001 f8ba 	bl	8001998 <HAL_ADC_Init>
 8000824:	2800      	cmp	r0, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f9b8 	bl	8000b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_ADC1_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000830:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000838:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	f001 f9c1 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 800083e:	2800      	cmp	r0, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000842:	f000 f9ab 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000846:	b005      	add	sp, #20
 8000848:	bd30      	pop	{r4, r5, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	200001d0 	.word	0x200001d0
 8000850:	40012400 	.word	0x40012400
 8000854:	04000002 	.word	0x04000002

08000858 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000858:	b510      	push	{r4, lr}
 800085a:	0004      	movs	r4, r0
 800085c:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	2214      	movs	r2, #20
 8000860:	2100      	movs	r1, #0
 8000862:	a802      	add	r0, sp, #8
 8000864:	f002 fdc7 	bl	80033f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000868:	221c      	movs	r2, #28
 800086a:	2100      	movs	r1, #0
 800086c:	a807      	add	r0, sp, #28
 800086e:	f002 fdc2 	bl	80033f6 <memset>
  if(adcHandle->Instance==ADC1)
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_ADC_MspInit+0x78>)
 8000874:	6822      	ldr	r2, [r4, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d128      	bne.n	80008cc <HAL_ADC_MspInit+0x74>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	01db      	lsls	r3, r3, #7
 800087e:	9307      	str	r3, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000880:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000882:	a807      	add	r0, sp, #28
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000884:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000886:	f002 f965 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 800088a:	2800      	cmp	r0, #0
 800088c:	d001      	beq.n	8000892 <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 800088e:	f000 f985 	bl	8000b9c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000892:	2080      	movs	r0, #128	; 0x80
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_ADC_MspInit+0x7c>)
 8000896:	0340      	lsls	r0, r0, #13
 8000898:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800089a:	4301      	orrs	r1, r0
 800089c:	6419      	str	r1, [r3, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80008a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a2:	4002      	ands	r2, r0
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = INA_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80008aa:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	430a      	orrs	r2, r1
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
 80008b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	400b      	ands	r3, r1
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INA_OUT_Pin;
 80008ba:	2302      	movs	r3, #2
 80008bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	185b      	adds	r3, r3, r1
 80008c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f001 fae4 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008cc:	b00e      	add	sp, #56	; 0x38
 80008ce:	bd10      	pop	{r4, pc}
 80008d0:	40012400 	.word	0x40012400
 80008d4:	40021000 	.word	0x40021000

080008d8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PF1-OSC_OUT (PF1)   ------> RCC_OSC_EN
*/
void MX_GPIO_Init(void)
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2214      	movs	r2, #20
 80008de:	2100      	movs	r1, #0
 80008e0:	a805      	add	r0, sp, #20
 80008e2:	f002 fd88 	bl	80033f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 80008f0:	25a0      	movs	r5, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4301      	orrs	r1, r0
 80008f4:	6359      	str	r1, [r3, #52]	; 0x34
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 80008f8:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4002      	ands	r2, r0
 80008fc:	9200      	str	r2, [sp, #0]
 80008fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000900:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000902:	301c      	adds	r0, #28
 8000904:	4301      	orrs	r1, r0
 8000906:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000908:	2108      	movs	r1, #8
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4002      	ands	r2, r0
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000916:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4332      	orrs	r2, r6
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
 800091c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091e:	4032      	ands	r2, r6
 8000920:	9202      	str	r2, [sp, #8]
 8000922:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	433a      	orrs	r2, r7
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
 800092a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092c:	403a      	ands	r2, r7
 800092e:	9203      	str	r2, [sp, #12]
 8000930:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000934:	430a      	orrs	r2, r1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093c:	400b      	ands	r3, r1
 800093e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000940:	4921      	ldr	r1, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000944:	f001 fb54 	bl	8001ff0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_GPIO_Init+0xf4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 800094c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000952:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f001 fa9d 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095a:	a905      	add	r1, sp, #20
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 8000966:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000968:	f001 fa94 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800096c:	0028      	movs	r0, r5
 800096e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8000970:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000976:	f001 fa8d 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin;
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	0028      	movs	r0, r5
 800097e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin;
 8000980:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f001 fa84 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 800098c:	2390      	movs	r3, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	19f6      	adds	r6, r6, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 8000992:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 8000996:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f001 fa7a 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB10
                           PB11 PB12 PB13 PB14
                           PB15 PBPin PBPin PBPin
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PB0_Pin|GPIO_PB1_Pin|GPIO_PB2_Pin|GPIO_PIN_10
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_GPIO_Init+0x100>)
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PB3_Pin|GPIO_PB4_Pin|GPIO_PB5_Pin
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	a905      	add	r1, sp, #20
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pin = GPIO_PB0_Pin|GPIO_PB1_Pin|GPIO_PB2_Pin|GPIO_PIN_10
 80009a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f001 fa72 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009b0:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0x108>)
 80009b4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f001 fa6a 	bl	8001e94 <HAL_GPIO_Init>

}
 80009c0:	b00b      	add	sp, #44	; 0x2c
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	0000801c 	.word	0x0000801c
 80009cc:	0000e0c0 	.word	0x0000e0c0
 80009d0:	50000800 	.word	0x50000800
 80009d4:	50001400 	.word	0x50001400
 80009d8:	0000ff3f 	.word	0x0000ff3f
 80009dc:	50000400 	.word	0x50000400
 80009e0:	50000c00 	.word	0x50000c00

080009e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009e8:	4c13      	ldr	r4, [pc, #76]	; (8000a38 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2010091A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80009ec:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f0:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2010091A;
 80009f2:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80009f8:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fa:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fc:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fe:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	f001 fc28 	bl	8002258 <HAL_I2C_Init>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000a0c:	f000 f8c6 	bl	8000b9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	0020      	movs	r0, r4
 8000a14:	f001 fd08 	bl	8002428 <HAL_I2CEx_ConfigAnalogFilter>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000a1c:	f000 f8be 	bl	8000b9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	0020      	movs	r0, r4
 8000a24:	f001 fd26 	bl	8002474 <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f8b6 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40005400 	.word	0x40005400
 8000a38:	20000234 	.word	0x20000234
 8000a3c:	2010091a 	.word	0x2010091a

08000a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a40:	b510      	push	{r4, lr}
 8000a42:	0004      	movs	r4, r0
 8000a44:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	2214      	movs	r2, #20
 8000a48:	2100      	movs	r1, #0
 8000a4a:	a802      	add	r0, sp, #8
 8000a4c:	f002 fcd3 	bl	80033f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	221c      	movs	r2, #28
 8000a52:	2100      	movs	r1, #0
 8000a54:	a807      	add	r0, sp, #28
 8000a56:	f002 fcce 	bl	80033f6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_I2C_MspInit+0x80>)
 8000a5c:	6822      	ldr	r2, [r4, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d12b      	bne.n	8000aba <HAL_I2C_MspInit+0x7a>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a62:	2320      	movs	r3, #32
 8000a64:	9307      	str	r3, [sp, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a66:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	a807      	add	r0, sp, #28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a6a:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f002 f872 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 8000a74:	f000 f892 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	2301      	movs	r3, #1
 8000a7a:	4c12      	ldr	r4, [pc, #72]	; (8000ac4 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	431a      	orrs	r2, r3
 8000a84:	6362      	str	r2, [r4, #52]	; 0x34
 8000a86:	6b62      	ldr	r2, [r4, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	9200      	str	r2, [sp, #0]
 8000a8e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a90:	22c0      	movs	r2, #192	; 0xc0
 8000a92:	00d2      	lsls	r2, r2, #3
 8000a94:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a96:	2212      	movs	r2, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	18db      	adds	r3, r3, r3
 8000a9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a9e:	3304      	adds	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000aa2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f001 f9f6 	bl	8001e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000aac:	0389      	lsls	r1, r1, #14
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000aba:	b00e      	add	sp, #56	; 0x38
 8000abc:	bd10      	pop	{r4, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b510      	push	{r4, lr}
 8000aca:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000acc:	2234      	movs	r2, #52	; 0x34
 8000ace:	2100      	movs	r1, #0
 8000ad0:	a805      	add	r0, sp, #20
 8000ad2:	f002 fc90 	bl	80033f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	2100      	movs	r1, #0
 8000ada:	a801      	add	r0, sp, #4
 8000adc:	f002 fc8b 	bl	80033f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	0080      	lsls	r0, r0, #2
 8000ae4:	f001 fcea 	bl	80024bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aee:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af0:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f001 fd0c 	bl	8002514 <HAL_RCC_OscConfig>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d001      	beq.n	8000b04 <_Z18SystemClock_Configv+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <_Z18SystemClock_Configv+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b10:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b12:	f001 ff5d 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d001      	beq.n	8000b1e <_Z18SystemClock_Configv+0x56>
 8000b1a:	b672      	cpsid	i
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <_Z18SystemClock_Configv+0x54>
}
 8000b1e:	b012      	add	sp, #72	; 0x48
 8000b20:	bd10      	pop	{r4, pc}

08000b22 <main>:
{
 8000b22:	b500      	push	{lr}
 8000b24:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8000b26:	f000 feef 	bl	8001908 <HAL_Init>
  SystemClock_Config();
 8000b2a:	f7ff ffcd 	bl	8000ac8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000b2e:	f7ff fed3 	bl	80008d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b32:	f000 f863 	bl	8000bfc <MX_TIM3_Init>
  MX_I2C1_Init();
 8000b36:	f7ff ff55 	bl	80009e4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b3a:	f7ff fe47 	bl	80007cc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 f8c3 	bl	8000cc8 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(DPOT_HVC_A0_GPIO_Port, DPOT_HVC_A0_Pin, GPIO_PIN_RESET); // Set A0 pin on the digital potentiometer to get the correct i2c address
 8000b42:	20a0      	movs	r0, #160	; 0xa0
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	05c0      	lsls	r0, r0, #23
 8000b4a:	f001 fa51 	bl	8001ff0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISPLAY_ENABLE_GPIO_Port, DISPLAY_ENABLE_Pin, GPIO_PIN_RESET); // Switch on power for display (pmos -> inv. signal)
 8000b4e:	20a0      	movs	r0, #160	; 0xa0
 8000b50:	2200      	movs	r2, #0
 8000b52:	2104      	movs	r1, #4
 8000b54:	05c0      	lsls	r0, r0, #23
 8000b56:	f001 fa4b 	bl	8001ff0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BRIDGE_ENABLE_GPIO_Port, BRIDGE_ENABLE_Pin, GPIO_PIN_RESET); // Switch on power for wheatstone bridge (pmos -> inv. signal)
 8000b5a:	20a0      	movs	r0, #160	; 0xa0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2108      	movs	r1, #8
 8000b60:	05c0      	lsls	r0, r0, #23
 8000b62:	f001 fa45 	bl	8001ff0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(INA_ENABLE_GPIO_Port, INA_ENABLE_Pin, GPIO_PIN_RESET); // Switch off power for instrumentation amp
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	20a0      	movs	r0, #160	; 0xa0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	0209      	lsls	r1, r1, #8
 8000b6e:	05c0      	lsls	r0, r0, #23
 8000b70:	f001 fa3e 	bl	8001ff0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 feed 	bl	8001954 <HAL_Delay>
  HAL_GPIO_WritePin(INA_ENABLE_GPIO_Port, INA_ENABLE_Pin, GPIO_PIN_SET); // Switch on power for instrumentation amp
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	20a0      	movs	r0, #160	; 0xa0
 8000b7e:	2201      	movs	r2, #1
 8000b80:	0209      	lsls	r1, r1, #8
 8000b82:	05c0      	lsls	r0, r0, #23
 8000b84:	f001 fa34 	bl	8001ff0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f000 fee3 	bl	8001954 <HAL_Delay>
  ADC_Test adc_test;
 8000b8e:	a801      	add	r0, sp, #4
 8000b90:	f7ff fd48 	bl	8000624 <_ZN8ADC_TestC1Ev>
	  adc_test.perform();
 8000b94:	a801      	add	r0, sp, #4
 8000b96:	f7ff fdc9 	bl	800072c <_ZN8ADC_Test7performEv>
  while (1)
 8000b9a:	e7fb      	b.n	8000b94 <main+0x72>

08000b9c <Error_Handler>:
 8000b9c:	b672      	cpsid	i
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <Error_Handler+0x2>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_MspInit+0x30>)
 8000ba6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ba8:	4301      	orrs	r1, r0
 8000baa:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4002      	ands	r2, r0
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bba:	30bf      	adds	r0, #191	; 0xbf
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bc2:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bca:	f000 fed5 	bl	8001978 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bd07      	pop	{r0, r1, r2, pc}
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler>

08000bd6 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
	/*adress of the last command will be stored in the R1 register*/
		__asm volatile (
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	4671      	mov	r1, lr
 8000bda:	4208      	tst	r0, r1
 8000bdc:	d002      	beq.n	8000be4 <_MSP>
 8000bde:	f3ef 8009 	mrs	r0, PSP
 8000be2:	e001      	b.n	8000be8 <_HALT>

08000be4 <_MSP>:
 8000be4:	f3ef 8008 	mrs	r0, MSP

08000be8 <_HALT>:
 8000be8:	6941      	ldr	r1, [r0, #20]
 8000bea:	be00      	bkpt	0x0000
		  "_HALT:              \n"
		    " ldr r1,[r0,#20]  \n"
		    " bkpt #0          \n"
		  );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <_HALT+0x4>

08000bee <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bee:	4770      	bx	lr

08000bf0 <PendSV_Handler>:
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 fe9c 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bd10      	pop	{r4, pc}

08000bfa <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfa:	4770      	bx	lr

08000bfc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b530      	push	{r4, r5, lr}
 8000bfe:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	2100      	movs	r1, #0
 8000c02:	220c      	movs	r2, #12
 8000c04:	4668      	mov	r0, sp
 8000c06:	f002 fbf6 	bl	80033f6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0a:	4d14      	ldr	r5, [pc, #80]	; (8000c5c <MX_TIM3_Init+0x60>)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 0;
 8000c0e:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 8000c10:	602b      	str	r3, [r5, #0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_TIM3_Init+0x68>)
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c14:	0028      	movs	r0, r5
  htim3.Init.Period = 65535;
 8000c16:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c18:	2301      	movs	r3, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c1a:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 8000c1c:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c24:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c26:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2a:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c2e:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c30:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c32:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c34:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c36:	f002 f889 	bl	8002d4c <HAL_TIM_Encoder_Init>
 8000c3a:	42a0      	cmp	r0, r4
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff ffad 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c42:	4669      	mov	r1, sp
 8000c44:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4a:	f002 f8d5 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c52:	f7ff ffa3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c56:	b00d      	add	sp, #52	; 0x34
 8000c58:	bd30      	pop	{r4, r5, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000280 	.word	0x20000280
 8000c60:	40000400 	.word	0x40000400
 8000c64:	0000ffff 	.word	0x0000ffff

08000c68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	0004      	movs	r4, r0
 8000c6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	2214      	movs	r2, #20
 8000c70:	2100      	movs	r1, #0
 8000c72:	a803      	add	r0, sp, #12
 8000c74:	f002 fbbf 	bl	80033f6 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_TIM_Encoder_MspInit+0x58>)
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d11c      	bne.n	8000cba <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c80:	2102      	movs	r1, #2
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_TIM_Encoder_MspInit+0x5c>)
 8000c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c86:	430a      	orrs	r2, r1
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2201      	movs	r2, #1
 8000c94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000c96:	4310      	orrs	r0, r2
 8000c98:	6358      	str	r0, [r3, #52]	; 0x34
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000ca4:	23c0      	movs	r3, #192	; 0xc0
 8000ca6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	05c0      	lsls	r0, r0, #23
 8000cae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000cb4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f001 f8ed 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cba:	b008      	add	sp, #32
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40000400 	.word	0x40000400
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cc8:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_USART1_UART_Init+0x68>)
 8000ccc:	4c19      	ldr	r4, [pc, #100]	; (8000d34 <MX_USART1_UART_Init+0x6c>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cce:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000cd0:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8000cd2:	23e1      	movs	r3, #225	; 0xe1
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	6162      	str	r2, [r4, #20]
  huart1.Init.BaudRate = 115200;
 8000cd6:	025b      	lsls	r3, r3, #9
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cd8:	22c0      	movs	r2, #192	; 0xc0
  huart1.Init.BaudRate = 115200;
 8000cda:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cdc:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cde:	0092      	lsls	r2, r2, #2
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce0:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce6:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000ce8:	61a2      	str	r2, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cea:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cec:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cee:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf2:	f002 fa81 	bl	80031f8 <HAL_UART_Init>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART1_UART_Init+0x36>
  {
    Error_Handler();
 8000cfa:	f7ff ff4f 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	0020      	movs	r0, r4
 8000d02:	f002 faf1 	bl	80032e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f7ff ff47 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	0020      	movs	r0, r4
 8000d12:	f002 fb0d 	bl	8003330 <HAL_UARTEx_SetRxFifoThreshold>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000d1a:	f7ff ff3f 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d1e:	0020      	movs	r0, r4
 8000d20:	f002 fac4 	bl	80032ac <HAL_UARTEx_DisableFifoMode>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000d28:	f7ff ff38 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40013800 	.word	0x40013800
 8000d34:	200002cc 	.word	0x200002cc

08000d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	2214      	movs	r2, #20
 8000d40:	2100      	movs	r1, #0
 8000d42:	a804      	add	r0, sp, #16
 8000d44:	f002 fb57 	bl	80033f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	221c      	movs	r2, #28
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	a809      	add	r0, sp, #36	; 0x24
 8000d4e:	f002 fb52 	bl	80033f6 <memset>
  if(uartHandle->Instance==USART1)
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_UART_MspInit+0xa0>)
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d13b      	bne.n	8000dd2 <HAL_UART_MspInit+0x9a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d62:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f001 fef6 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x38>
    {
      Error_Handler();
 8000d6c:	f7ff ff16 	bl	8000b9c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	2080      	movs	r0, #128	; 0x80
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_MspInit+0xa4>)
 8000d74:	01c0      	lsls	r0, r0, #7
 8000d76:	6c19      	ldr	r1, [r3, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7a:	4301      	orrs	r1, r0
 8000d7c:	6419      	str	r1, [r3, #64]	; 0x40
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d82:	4002      	ands	r2, r0
 8000d84:	9201      	str	r2, [sp, #4]
 8000d86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	6359      	str	r1, [r3, #52]	; 0x34
 8000d92:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4011      	ands	r1, r2
 8000d98:	9102      	str	r1, [sp, #8]
 8000d9a:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9e:	4329      	orrs	r1, r5
 8000da0:	6359      	str	r1, [r3, #52]	; 0x34
 8000da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	402b      	ands	r3, r5
 8000da8:	9303      	str	r3, [sp, #12]
 8000daa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dac:	23c0      	movs	r3, #192	; 0xc0
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000db8:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f001 f86b 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <HAL_UART_MspInit+0xa8>)
 8000dc2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000dcc:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f001 f861 	bl	8001e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dd2:	b011      	add	sp, #68	; 0x44
 8000dd4:	bd30      	pop	{r4, r5, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	50000400 	.word	0x50000400

08000de4 <u8g2_send_buffer>:
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 8000de4:	0003      	movs	r3, r0
{
 8000de6:	b5f0      	push	{r4, r5, r6, r7, lr}
  src_max = u8g2->tile_buf_height;
 8000de8:	333c      	adds	r3, #60	; 0x3c
 8000dea:	781b      	ldrb	r3, [r3, #0]
{
 8000dec:	b085      	sub	sp, #20
  src_max = u8g2->tile_buf_height;
 8000dee:	9302      	str	r3, [sp, #8]
  dest_row = u8g2->tile_curr_row;
 8000df0:	0003      	movs	r3, r0
{
 8000df2:	0004      	movs	r4, r0
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000df4:	2600      	movs	r6, #0
  dest_row = u8g2->tile_curr_row;
 8000df6:	333d      	adds	r3, #61	; 0x3d
 8000df8:	781f      	ldrb	r7, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000dfa:	6803      	ldr	r3, [r0, #0]
 8000dfc:	7c5b      	ldrb	r3, [r3, #17]
 8000dfe:	9303      	str	r3, [sp, #12]
 8000e00:	0031      	movs	r1, r6
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000e02:	6823      	ldr	r3, [r4, #0]
  ptr += offset;
 8000e04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000e06:	7c1b      	ldrb	r3, [r3, #16]
 8000e08:	b2f5      	uxtb	r5, r6
  offset *= 8;
 8000e0a:	4359      	muls	r1, r3
 8000e0c:	b289      	uxth	r1, r1
 8000e0e:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 8000e10:	b289      	uxth	r1, r1
 8000e12:	1841      	adds	r1, r0, r1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000e14:	197a      	adds	r2, r7, r5
 8000e16:	9100      	str	r1, [sp, #0]
 8000e18:	0020      	movs	r0, r4
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f000 fcc5 	bl	80017ac <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8000e22:	3501      	adds	r5, #1
 8000e24:	9b02      	ldr	r3, [sp, #8]
 8000e26:	b2ed      	uxtb	r5, r5
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d905      	bls.n	8000e38 <u8g2_send_buffer+0x54>
 8000e2c:	3601      	adds	r6, #1
 8000e2e:	19bb      	adds	r3, r7, r6
 8000e30:	9a03      	ldr	r2, [sp, #12]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8e3      	bhi.n	8000e00 <u8g2_send_buffer+0x1c>
}
 8000e38:	b005      	add	sp, #20
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e3c <u8g2_ClearBuffer>:
  cnt *= u8g2->tile_buf_height;
 8000e3c:	0002      	movs	r2, r0
{
 8000e3e:	b510      	push	{r4, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000e40:	6803      	ldr	r3, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 8000e42:	323c      	adds	r2, #60	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000e44:	7c1b      	ldrb	r3, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8000e46:	7812      	ldrb	r2, [r2, #0]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	435a      	muls	r2, r3
 8000e4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  cnt *= 8;
 8000e4e:	00d2      	lsls	r2, r2, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000e50:	f002 fad1 	bl	80033f6 <memset>
}
 8000e54:	bd10      	pop	{r4, pc}

08000e56 <u8g2_SetBufferCurrTileRow>:
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
 8000e56:	0003      	movs	r3, r0
{
 8000e58:	b510      	push	{r4, lr}
 8000e5a:	0004      	movs	r4, r0
  u8g2->tile_curr_row = row;
 8000e5c:	333d      	adds	r3, #61	; 0x3d
 8000e5e:	7019      	strb	r1, [r3, #0]
  u8g2->cb->update_dimension(u8g2);
 8000e60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e68:	0020      	movs	r0, r4
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4798      	blx	r3
}
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
  if ( u8g2->is_auto_page_clear )
 8000e70:	0003      	movs	r3, r0
{
 8000e72:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8000e74:	3380      	adds	r3, #128	; 0x80
 8000e76:	781b      	ldrb	r3, [r3, #0]
{
 8000e78:	0004      	movs	r4, r0
  if ( u8g2->is_auto_page_clear )
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <u8g2_FirstPage+0x12>
  {
    u8g2_ClearBuffer(u8g2);
 8000e7e:	f7ff ffdd 	bl	8000e3c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	0020      	movs	r0, r4
 8000e86:	f7ff ffe6 	bl	8000e56 <u8g2_SetBufferCurrTileRow>
}
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	0004      	movs	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000e90:	f7ff ffa8 	bl	8000de4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8000e94:	0023      	movs	r3, r4
 8000e96:	333d      	adds	r3, #61	; 0x3d
 8000e98:	781d      	ldrb	r5, [r3, #0]
  row += u8g2->tile_buf_height;
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	18ed      	adds	r5, r5, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000ea0:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 8000ea2:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000ea4:	7c5b      	ldrb	r3, [r3, #17]
 8000ea6:	42ab      	cmp	r3, r5
 8000ea8:	d804      	bhi.n	8000eb4 <u8g2_NextPage+0x28>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f000 fca7 	bl	80017fe <u8x8_RefreshDisplay>
    return 0;
 8000eb0:	2000      	movs	r0, #0
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
  if ( u8g2->is_auto_page_clear )
 8000eb4:	0023      	movs	r3, r4
 8000eb6:	3380      	adds	r3, #128	; 0x80
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <u8g2_NextPage+0x38>
    u8g2_ClearBuffer(u8g2);
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f7ff ffbc 	bl	8000e3c <u8g2_ClearBuffer>
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	0029      	movs	r1, r5
 8000ec8:	f7ff ffc5 	bl	8000e56 <u8g2_SetBufferCurrTileRow>
  return 1;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e7f0      	b.n	8000eb2 <u8g2_NextPage+0x26>

08000ed0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	0004      	movs	r4, r0
  u8g2_FirstPage(u8g2);
 8000ed4:	f7ff ffcc 	bl	8000e70 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8000ed8:	0020      	movs	r0, r4
 8000eda:	f7ff ffd7 	bl	8000e8c <u8g2_NextPage>
 8000ede:	1e01      	subs	r1, r0, #0
 8000ee0:	d1fa      	bne.n	8000ed8 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f7ff ffb7 	bl	8000e56 <u8g2_SetBufferCurrTileRow>
}
 8000ee8:	bd10      	pop	{r4, pc}
	...

08000eec <u8g2_m_16_4_2>:
  return buf;
}
uint8_t *u8g2_m_16_4_2(uint8_t *page_cnt)
{
  static uint8_t buf[256];
  *page_cnt = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	7003      	strb	r3, [r0, #0]
  return buf;
}
 8000ef0:	4800      	ldr	r0, [pc, #0]	; (8000ef4 <u8g2_m_16_4_2+0x8>)
 8000ef2:	4770      	bx	lr
 8000ef4:	200000d0 	.word	0x200000d0

08000ef8 <u8g2_Setup_ssd1306_i2c_128x32_univision_2>:
  buf = u8g2_m_16_4_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x32_univision_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_4_2(&tile_buf_height);
 8000efa:	260f      	movs	r6, #15
{
 8000efc:	000d      	movs	r5, r1
  buf = u8g2_m_16_4_2(&tile_buf_height);
 8000efe:	446e      	add	r6, sp
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8000f00:	4908      	ldr	r1, [pc, #32]	; (8000f24 <u8g2_Setup_ssd1306_i2c_128x32_univision_2+0x2c>)
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	0013      	movs	r3, r2
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <u8g2_Setup_ssd1306_i2c_128x32_univision_2+0x30>)
{
 8000f08:	0004      	movs	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8000f0a:	f000 fc9b 	bl	8001844 <u8x8_Setup>
  buf = u8g2_m_16_4_2(&tile_buf_height);
 8000f0e:	0030      	movs	r0, r6
 8000f10:	f7ff ffec 	bl	8000eec <u8g2_m_16_4_2>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000f14:	7832      	ldrb	r2, [r6, #0]
  buf = u8g2_m_16_4_2(&tile_buf_height);
 8000f16:	0001      	movs	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000f18:	9500      	str	r5, [sp, #0]
 8000f1a:	0020      	movs	r0, r4
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <u8g2_Setup_ssd1306_i2c_128x32_univision_2+0x34>)
 8000f1e:	f000 face 	bl	80014be <u8g2_SetupBuffer>
}
 8000f22:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000f24:	08001729 	.word	0x08001729
 8000f28:	08001645 	.word	0x08001645
 8000f2c:	080013e3 	.word	0x080013e3

08000f30 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8000f30:	1843      	adds	r3, r0, r1
    pos = u8x8_pgm_read( font );
 8000f32:	5c40      	ldrb	r0, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8000f34:	785b      	ldrb	r3, [r3, #1]
    pos <<= 8;
 8000f36:	0200      	lsls	r0, r0, #8
    pos += u8x8_pgm_read( font);
 8000f38:	18c0      	adds	r0, r0, r3
    return pos;
 8000f3a:	b280      	uxth	r0, r0
}
 8000f3c:	4770      	bx	lr

08000f3e <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8000f3e:	2000      	movs	r0, #0
 8000f40:	4770      	bx	lr

08000f42 <u8g2_read_font_info>:
{
 8000f42:	b570      	push	{r4, r5, r6, lr}
  return u8x8_pgm_read( font );  
 8000f44:	780b      	ldrb	r3, [r1, #0]
{
 8000f46:	000d      	movs	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000f48:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 8000f4a:	784b      	ldrb	r3, [r1, #1]
{
 8000f4c:	0004      	movs	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000f4e:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 8000f50:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000f52:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 8000f54:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000f56:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 8000f58:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000f5a:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 8000f5c:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000f5e:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 8000f60:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000f62:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 8000f64:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000f66:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 8000f68:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000f6a:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000f6c:	7a4b      	ldrb	r3, [r1, #9]
 8000f6e:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000f70:	7a8b      	ldrb	r3, [r1, #10]
 8000f72:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000f74:	7acb      	ldrb	r3, [r1, #11]
 8000f76:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000f78:	7b0b      	ldrb	r3, [r1, #12]
 8000f7a:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000f7c:	7b4b      	ldrb	r3, [r1, #13]
 8000f7e:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000f80:	7b8b      	ldrb	r3, [r1, #14]
 8000f82:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000f84:	7bcb      	ldrb	r3, [r1, #15]
 8000f86:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000f88:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000f8a:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000f8c:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000f8e:	0028      	movs	r0, r5
 8000f90:	f7ff ffce 	bl	8000f30 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000f94:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000f96:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000f98:	0028      	movs	r0, r5
 8000f9a:	f7ff ffc9 	bl	8000f30 <u8g2_font_get_word>
 8000f9e:	82a0      	strh	r0, [r4, #20]
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}

08000fa2 <u8g2_font_decode_get_unsigned_bits>:
{
 8000fa2:	b570      	push	{r4, r5, r6, lr}
  val = u8x8_pgm_read( f->decode_ptr );  
 8000fa4:	6804      	ldr	r4, [r0, #0]
  uint8_t bit_pos = f->decode_bit_pos;
 8000fa6:	7a86      	ldrb	r6, [r0, #10]
  val >>= bit_pos;
 8000fa8:	7825      	ldrb	r5, [r4, #0]
  bit_pos_plus_cnt += cnt;
 8000faa:	1873      	adds	r3, r6, r1
  val >>= bit_pos;
 8000fac:	4135      	asrs	r5, r6
  bit_pos_plus_cnt += cnt;
 8000fae:	b2db      	uxtb	r3, r3
{
 8000fb0:	0002      	movs	r2, r0
  val >>= bit_pos;
 8000fb2:	b2e8      	uxtb	r0, r5
  if ( bit_pos_plus_cnt >= 8 )
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	d90a      	bls.n	8000fce <u8g2_font_decode_get_unsigned_bits+0x2c>
    f->decode_ptr++;
 8000fb8:	1c60      	adds	r0, r4, #1
 8000fba:	6010      	str	r0, [r2, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000fbc:	7860      	ldrb	r0, [r4, #1]
    s -= bit_pos;
 8000fbe:	2408      	movs	r4, #8
 8000fc0:	1ba4      	subs	r4, r4, r6
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000fc2:	b2e4      	uxtb	r4, r4
 8000fc4:	40a0      	lsls	r0, r4
    bit_pos_plus_cnt -= 8;
 8000fc6:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000fc8:	4328      	orrs	r0, r5
 8000fca:	b2c0      	uxtb	r0, r0
    bit_pos_plus_cnt -= 8;
 8000fcc:	b2db      	uxtb	r3, r3
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000fce:	7293      	strb	r3, [r2, #10]
  val &= (1U<<cnt)-1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	408b      	lsls	r3, r1
  return val;
 8000fd6:	4398      	bics	r0, r3
}
 8000fd8:	bd70      	pop	{r4, r5, r6, pc}

08000fda <u8g2_font_setup_decode>:
{
 8000fda:	b570      	push	{r4, r5, r6, lr}
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000fdc:	0005      	movs	r5, r0
  decode->decode_bit_pos = 0;
 8000fde:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000fe0:	3554      	adds	r5, #84	; 0x54
  decode->decode_ptr = glyph_data;
 8000fe2:	6541      	str	r1, [r0, #84]	; 0x54
  decode->decode_bit_pos = 0;
 8000fe4:	72ab      	strb	r3, [r5, #10]
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000fe6:	0003      	movs	r3, r0
{
 8000fe8:	0004      	movs	r4, r0
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000fea:	3368      	adds	r3, #104	; 0x68
 8000fec:	0028      	movs	r0, r5
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	f7ff ffd7 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000ff4:	0023      	movs	r3, r4
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000ff6:	7228      	strb	r0, [r5, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000ff8:	3369      	adds	r3, #105	; 0x69
 8000ffa:	0028      	movs	r0, r5
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	f7ff ffd0 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 8001002:	347f      	adds	r4, #127	; 0x7f
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001004:	7268      	strb	r0, [r5, #9]
  decode->fg_color = u8g2->draw_color;
 8001006:	7823      	ldrb	r3, [r4, #0]
 8001008:	732b      	strb	r3, [r5, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800100a:	425a      	negs	r2, r3
 800100c:	4153      	adcs	r3, r2
 800100e:	736b      	strb	r3, [r5, #13]
}
 8001010:	bd70      	pop	{r4, r5, r6, pc}

08001012 <u8g2_font_decode_get_signed_bits>:
{
 8001012:	b510      	push	{r4, lr}
 8001014:	000c      	movs	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001016:	f7ff ffc4 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 800101a:	2301      	movs	r3, #1
  cnt--;
 800101c:	3c01      	subs	r4, #1
  d <<= cnt;
 800101e:	b2e4      	uxtb	r4, r4
 8001020:	40a3      	lsls	r3, r4
  v -= d;
 8001022:	1ac0      	subs	r0, r0, r3
  return v;
 8001024:	b240      	sxtb	r0, r0
}
 8001026:	bd10      	pop	{r4, pc}

08001028 <u8g2_font_decode_len>:
  lx = decode->x;
 8001028:	0003      	movs	r3, r0
{
 800102a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102c:	0004      	movs	r4, r0
 800102e:	000e      	movs	r6, r1
 8001030:	b087      	sub	sp, #28
 8001032:	9205      	str	r2, [sp, #20]
  lx = decode->x;
 8001034:	3354      	adds	r3, #84	; 0x54
 8001036:	799d      	ldrb	r5, [r3, #6]
  ly = decode->y;
 8001038:	79df      	ldrb	r7, [r3, #7]
    rem = decode->glyph_width;
 800103a:	0020      	movs	r0, r4
 800103c:	3054      	adds	r0, #84	; 0x54
 800103e:	7a03      	ldrb	r3, [r0, #8]
 8001040:	9304      	str	r3, [sp, #16]
    rem -= lx;
 8001042:	1b5b      	subs	r3, r3, r5
 8001044:	b2db      	uxtb	r3, r3
 8001046:	9302      	str	r3, [sp, #8]
    if ( cnt < rem )
 8001048:	9a02      	ldr	r2, [sp, #8]
 800104a:	1c33      	adds	r3, r6, #0
 800104c:	4296      	cmp	r6, r2
 800104e:	d901      	bls.n	8001054 <u8g2_font_decode_len+0x2c>
 8001050:	466b      	mov	r3, sp
 8001052:	7a1b      	ldrb	r3, [r3, #8]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	9303      	str	r3, [sp, #12]
    x = decode->target_x;
 8001058:	7901      	ldrb	r1, [r0, #4]
    y = decode->target_y;
 800105a:	7942      	ldrb	r2, [r0, #5]
    if ( is_foreground )
 800105c:	9b05      	ldr	r3, [sp, #20]
    x += lx;
 800105e:	1869      	adds	r1, r5, r1
    y += ly;
 8001060:	18ba      	adds	r2, r7, r2
    x += lx;
 8001062:	b2c9      	uxtb	r1, r1
    y += ly;
 8001064:	b2d2      	uxtb	r2, r2
    if ( is_foreground )
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <u8g2_font_decode_len+0x6e>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800106a:	7b03      	ldrb	r3, [r0, #12]
 800106c:	0020      	movs	r0, r4
 800106e:	307f      	adds	r0, #127	; 0x7f
 8001070:	7003      	strb	r3, [r0, #0]
      u8g2_DrawHVLine(u8g2, 
 8001072:	2000      	movs	r0, #0
 8001074:	9000      	str	r0, [sp, #0]
      u8g2_DrawHVLine(u8g2, 
 8001076:	0020      	movs	r0, r4
 8001078:	9b03      	ldr	r3, [sp, #12]
 800107a:	f000 f928 	bl	80012ce <u8g2_DrawHVLine>
    if ( cnt < rem )
 800107e:	9b02      	ldr	r3, [sp, #8]
 8001080:	1975      	adds	r5, r6, r5
 8001082:	b2ed      	uxtb	r5, r5
 8001084:	429e      	cmp	r6, r3
 8001086:	d310      	bcc.n	80010aa <u8g2_font_decode_len+0x82>
    cnt -= rem;
 8001088:	9b04      	ldr	r3, [sp, #16]
    ly++;
 800108a:	3701      	adds	r7, #1
    cnt -= rem;
 800108c:	1aee      	subs	r6, r5, r3
 800108e:	b2f6      	uxtb	r6, r6
    lx = 0;
 8001090:	2500      	movs	r5, #0
    ly++;
 8001092:	b2ff      	uxtb	r7, r7
    rem = decode->glyph_width;
 8001094:	e7d1      	b.n	800103a <u8g2_font_decode_len+0x12>
    else if ( decode->is_transparent == 0 )    
 8001096:	7ac3      	ldrb	r3, [r0, #11]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <u8g2_font_decode_len+0x56>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800109c:	7b43      	ldrb	r3, [r0, #13]
 800109e:	0020      	movs	r0, r4
 80010a0:	307f      	adds	r0, #127	; 0x7f
 80010a2:	7003      	strb	r3, [r0, #0]
      u8g2_DrawHVLine(u8g2, 
 80010a4:	9b05      	ldr	r3, [sp, #20]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e7e5      	b.n	8001076 <u8g2_font_decode_len+0x4e>
  decode->x = lx;
 80010aa:	3454      	adds	r4, #84	; 0x54
 80010ac:	71a5      	strb	r5, [r4, #6]
  decode->y = ly;
 80010ae:	71e7      	strb	r7, [r4, #7]
}
 80010b0:	b007      	add	sp, #28
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b4 <u8g2_font_decode_glyph>:
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	0004      	movs	r4, r0
 80010b8:	b085      	sub	sp, #20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80010ba:	0005      	movs	r5, r0
  u8g2_font_setup_decode(u8g2, glyph_data);
 80010bc:	f7ff ff8d 	bl	8000fda <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80010c0:	0023      	movs	r3, r4
 80010c2:	335d      	adds	r3, #93	; 0x5d
 80010c4:	781b      	ldrb	r3, [r3, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80010c6:	3554      	adds	r5, #84	; 0x54
  h = u8g2->font_decode.glyph_height;
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	9301      	str	r3, [sp, #4]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80010cc:	0023      	movs	r3, r4
 80010ce:	336a      	adds	r3, #106	; 0x6a
 80010d0:	7819      	ldrb	r1, [r3, #0]
 80010d2:	0028      	movs	r0, r5
 80010d4:	f7ff ff9d 	bl	8001012 <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80010d8:	0023      	movs	r3, r4
 80010da:	336b      	adds	r3, #107	; 0x6b
 80010dc:	7819      	ldrb	r1, [r3, #0]
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80010de:	0007      	movs	r7, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80010e0:	0028      	movs	r0, r5
 80010e2:	f7ff ff96 	bl	8001012 <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80010e6:	0023      	movs	r3, r4
 80010e8:	336c      	adds	r3, #108	; 0x6c
 80010ea:	7819      	ldrb	r1, [r3, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80010ec:	0006      	movs	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80010ee:	0028      	movs	r0, r5
 80010f0:	f7ff ff8f 	bl	8001012 <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 80010f4:	2308      	movs	r3, #8
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80010f6:	9002      	str	r0, [sp, #8]
  if ( decode->glyph_width > 0 )
 80010f8:	56eb      	ldrsb	r3, [r5, r3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd34      	ble.n	8001168 <u8g2_font_decode_glyph+0xb4>
    decode->target_x += x;
 80010fe:	7928      	ldrb	r0, [r5, #4]
    decode->target_y -= h+y;
 8001100:	9b01      	ldr	r3, [sp, #4]
    decode->target_x += x;
 8001102:	19c7      	adds	r7, r0, r7
    decode->target_y -= h+y;
 8001104:	7968      	ldrb	r0, [r5, #5]
    decode->x = 0;
 8001106:	2200      	movs	r2, #0
    decode->target_y -= h+y;
 8001108:	1ac0      	subs	r0, r0, r3
    decode->x = 0;
 800110a:	0023      	movs	r3, r4
    decode->target_y -= h+y;
 800110c:	1b86      	subs	r6, r0, r6
 800110e:	716e      	strb	r6, [r5, #5]
	u8g2_font_decode_len(u8g2, b, 1);
 8001110:	2601      	movs	r6, #1
    decode->x = 0;
 8001112:	335a      	adds	r3, #90	; 0x5a
    decode->target_x += x;
 8001114:	712f      	strb	r7, [r5, #4]
    decode->x = 0;
 8001116:	801a      	strh	r2, [r3, #0]
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001118:	0023      	movs	r3, r4
 800111a:	3366      	adds	r3, #102	; 0x66
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	0028      	movs	r0, r5
 8001120:	f7ff ff3f 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001124:	0023      	movs	r3, r4
 8001126:	3367      	adds	r3, #103	; 0x67
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001128:	0007      	movs	r7, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800112a:	7819      	ldrb	r1, [r3, #0]
 800112c:	0028      	movs	r0, r5
 800112e:	f7ff ff38 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
 8001132:	9003      	str	r0, [sp, #12]
	u8g2_font_decode_len(u8g2, a, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	0039      	movs	r1, r7
 8001138:	0020      	movs	r0, r4
 800113a:	f7ff ff75 	bl	8001028 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800113e:	0020      	movs	r0, r4
 8001140:	9903      	ldr	r1, [sp, #12]
 8001142:	0032      	movs	r2, r6
 8001144:	f7ff ff70 	bl	8001028 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001148:	0031      	movs	r1, r6
 800114a:	0028      	movs	r0, r5
 800114c:	f7ff ff29 	bl	8000fa2 <u8g2_font_decode_get_unsigned_bits>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1ef      	bne.n	8001134 <u8g2_font_decode_glyph+0x80>
      if ( decode->y >= h )
 8001154:	0023      	movs	r3, r4
 8001156:	2207      	movs	r2, #7
 8001158:	3354      	adds	r3, #84	; 0x54
 800115a:	569a      	ldrsb	r2, [r3, r2]
 800115c:	9901      	ldr	r1, [sp, #4]
 800115e:	428a      	cmp	r2, r1
 8001160:	dbda      	blt.n	8001118 <u8g2_font_decode_glyph+0x64>
    u8g2->draw_color = decode->fg_color;
 8001162:	7b1b      	ldrb	r3, [r3, #12]
 8001164:	347f      	adds	r4, #127	; 0x7f
 8001166:	7023      	strb	r3, [r4, #0]
}
 8001168:	9802      	ldr	r0, [sp, #8]
 800116a:	b005      	add	sp, #20
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800116e <u8g2_font_get_glyph_data>:
{
 800116e:	0002      	movs	r2, r0
  return NULL;
 8001170:	2000      	movs	r0, #0
  if ( encoding <= 255 )
 8001172:	29ff      	cmp	r1, #255	; 0xff
 8001174:	d80d      	bhi.n	8001192 <u8g2_font_get_glyph_data+0x24>
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001176:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001178:	3317      	adds	r3, #23
    if ( encoding >= 'a' )
 800117a:	2960      	cmp	r1, #96	; 0x60
 800117c:	d90a      	bls.n	8001194 <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 800117e:	3278      	adds	r2, #120	; 0x78
      font += u8g2->font_info.start_pos_upper_A;
 8001180:	8812      	ldrh	r2, [r2, #0]
 8001182:	189b      	adds	r3, r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001184:	7858      	ldrb	r0, [r3, #1]
 8001186:	2800      	cmp	r0, #0
 8001188:	d003      	beq.n	8001192 <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	428a      	cmp	r2, r1
 800118e:	d105      	bne.n	800119c <u8g2_font_get_glyph_data+0x2e>
	return font+2;	/* skip encoding and glyph size */
 8001190:	1c98      	adds	r0, r3, #2
}
 8001192:	4770      	bx	lr
    else if ( encoding >= 'A' )
 8001194:	2940      	cmp	r1, #64	; 0x40
 8001196:	d9f5      	bls.n	8001184 <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
 8001198:	3276      	adds	r2, #118	; 0x76
 800119a:	e7f1      	b.n	8001180 <u8g2_font_get_glyph_data+0x12>
      font += u8x8_pgm_read( font + 1 );
 800119c:	181b      	adds	r3, r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800119e:	e7f1      	b.n	8001184 <u8g2_font_get_glyph_data+0x16>

080011a0 <u8g2_DrawGlyph>:
{
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	0004      	movs	r4, r0
 80011a4:	001d      	movs	r5, r3
  y += u8g2->font_calc_vref(u8g2);
 80011a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 80011a8:	000f      	movs	r7, r1
 80011aa:	0016      	movs	r6, r2
  y += u8g2->font_calc_vref(u8g2);
 80011ac:	4798      	blx	r3
  u8g2->font_decode.target_x = x;
 80011ae:	0023      	movs	r3, r4
  y += u8g2->font_calc_vref(u8g2);
 80011b0:	1980      	adds	r0, r0, r6
  u8g2->font_decode.target_x = x;
 80011b2:	3358      	adds	r3, #88	; 0x58
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80011b4:	0029      	movs	r1, r5
  u8g2->font_decode.target_y = y;
 80011b6:	7058      	strb	r0, [r3, #1]
  u8g2->font_decode.target_x = x;
 80011b8:	701f      	strb	r7, [r3, #0]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80011ba:	0020      	movs	r0, r4
 80011bc:	f7ff ffd7 	bl	800116e <u8g2_font_get_glyph_data>
 80011c0:	0001      	movs	r1, r0
  u8g2_uint_t dx = 0;
 80011c2:	2000      	movs	r0, #0
  if ( glyph_data != NULL )
 80011c4:	4281      	cmp	r1, r0
 80011c6:	d003      	beq.n	80011d0 <u8g2_DrawGlyph+0x30>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80011c8:	0020      	movs	r0, r4
 80011ca:	f7ff ff73 	bl	80010b4 <u8g2_font_decode_glyph>
 80011ce:	b2c0      	uxtb	r0, r0
}
 80011d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011d4 <u8g2_draw_string>:
{
 80011d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011d6:	0005      	movs	r5, r0
 80011d8:	000c      	movs	r4, r1
 80011da:	001e      	movs	r6, r3
 80011dc:	9201      	str	r2, [sp, #4]
  sum = 0;
 80011de:	2700      	movs	r7, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80011e0:	f000 f996 	bl	8001510 <u8x8_utf8_init>
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80011e4:	686b      	ldr	r3, [r5, #4]
 80011e6:	0028      	movs	r0, r5
 80011e8:	7831      	ldrb	r1, [r6, #0]
 80011ea:	4798      	blx	r3
    if ( e == 0x0ffff )
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <u8g2_draw_string+0x40>)
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80011ee:	0003      	movs	r3, r0
    if ( e == 0x0ffff )
 80011f0:	4290      	cmp	r0, r2
 80011f2:	d00d      	beq.n	8001210 <u8g2_draw_string+0x3c>
    if ( e != 0x0fffe )
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <u8g2_draw_string+0x44>)
    str++;
 80011f6:	3601      	adds	r6, #1
    if ( e != 0x0fffe )
 80011f8:	4290      	cmp	r0, r2
 80011fa:	d0f3      	beq.n	80011e4 <u8g2_draw_string+0x10>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80011fc:	0021      	movs	r1, r4
 80011fe:	0028      	movs	r0, r5
 8001200:	9a01      	ldr	r2, [sp, #4]
 8001202:	f7ff ffcd 	bl	80011a0 <u8g2_DrawGlyph>
      x += delta;
 8001206:	1824      	adds	r4, r4, r0
      sum += delta;    
 8001208:	183f      	adds	r7, r7, r0
      x += delta;
 800120a:	b2e4      	uxtb	r4, r4
      sum += delta;    
 800120c:	b2ff      	uxtb	r7, r7
 800120e:	e7e9      	b.n	80011e4 <u8g2_draw_string+0x10>
}
 8001210:	0038      	movs	r0, r7
 8001212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001214:	0000ffff 	.word	0x0000ffff
 8001218:	0000fffe 	.word	0x0000fffe

0800121c <u8g2_DrawStr>:
{
 800121c:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800121e:	4c02      	ldr	r4, [pc, #8]	; (8001228 <u8g2_DrawStr+0xc>)
 8001220:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001222:	f7ff ffd7 	bl	80011d4 <u8g2_draw_string>
}
 8001226:	bd10      	pop	{r4, pc}
 8001228:	080014fd 	.word	0x080014fd

0800122c <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 800122c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800122e:	b570      	push	{r4, r5, r6, lr}
  if ( u8g2->font == NULL )
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01d      	beq.n	8001270 <u8g2_UpdateRefHeight+0x44>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001234:	0003      	movs	r3, r0
 8001236:	2600      	movs	r6, #0
 8001238:	0005      	movs	r5, r0
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800123a:	2401      	movs	r4, #1
 800123c:	0002      	movs	r2, r0
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800123e:	3371      	adds	r3, #113	; 0x71
 8001240:	579e      	ldrsb	r6, [r3, r6]
 8001242:	357b      	adds	r5, #123	; 0x7b
 8001244:	702e      	strb	r6, [r5, #0]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001246:	571c      	ldrsb	r4, [r3, r4]
 8001248:	327c      	adds	r2, #124	; 0x7c
 800124a:	7014      	strb	r4, [r2, #0]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800124c:	3309      	adds	r3, #9
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00d      	beq.n	8001270 <u8g2_UpdateRefHeight+0x44>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10c      	bne.n	8001272 <u8g2_UpdateRefHeight+0x46>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001258:	0003      	movs	r3, r0
 800125a:	3373      	adds	r3, #115	; 0x73
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	429e      	cmp	r6, r3
 8001262:	da00      	bge.n	8001266 <u8g2_UpdateRefHeight+0x3a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001264:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001266:	2374      	movs	r3, #116	; 0x74
 8001268:	56c3      	ldrsb	r3, [r0, r3]
 800126a:	429c      	cmp	r4, r3
 800126c:	dd00      	ble.n	8001270 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800126e:	7013      	strb	r3, [r2, #0]
}
 8001270:	bd70      	pop	{r4, r5, r6, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001272:	0003      	movs	r3, r0
 8001274:	2170      	movs	r1, #112	; 0x70
 8001276:	336e      	adds	r3, #110	; 0x6e
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	5641      	ldrsb	r1, [r0, r1]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	185b      	adds	r3, r3, r1
 8001280:	429e      	cmp	r6, r3
 8001282:	da00      	bge.n	8001286 <u8g2_UpdateRefHeight+0x5a>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001284:	702b      	strb	r3, [r5, #0]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001286:	428c      	cmp	r4, r1
 8001288:	ddf2      	ble.n	8001270 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800128a:	7011      	strb	r1, [r2, #0]
 800128c:	e7f0      	b.n	8001270 <u8g2_UpdateRefHeight+0x44>
	...

08001290 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <u8g2_SetFontPosBaseline+0x8>)
 8001292:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001294:	4770      	bx	lr
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	08000f3f 	.word	0x08000f3f

0800129c <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 800129c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800129e:	b510      	push	{r4, lr}
 80012a0:	0004      	movs	r4, r0
  if ( u8g2->font != font )
 80012a2:	428b      	cmp	r3, r1
 80012a4:	d006      	beq.n	80012b4 <u8g2_SetFont+0x18>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80012a6:	64c1      	str	r1, [r0, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80012a8:	3064      	adds	r0, #100	; 0x64
 80012aa:	f7ff fe4a 	bl	8000f42 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80012ae:	0020      	movs	r0, r4
 80012b0:	f7ff ffbc 	bl	800122c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80012b4:	bd10      	pop	{r4, pc}

080012b6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012b6:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80012b8:	0005      	movs	r5, r0
 80012ba:	3540      	adds	r5, #64	; 0x40
 80012bc:	782d      	ldrb	r5, [r5, #0]
{
 80012be:	ac06      	add	r4, sp, #24
 80012c0:	7824      	ldrb	r4, [r4, #0]
  y -= u8g2->pixel_curr_row;
 80012c2:	1b52      	subs	r2, r2, r5
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80012c4:	9400      	str	r4, [sp, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012ca:	47a0      	blx	r4
}
 80012cc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080012ce <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012d0:	ac08      	add	r4, sp, #32
 80012d2:	7824      	ldrb	r4, [r4, #0]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03e      	beq.n	8001356 <u8g2_DrawHVLine+0x88>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d904      	bls.n	80012e6 <u8g2_DrawHVLine+0x18>
      {
	if ( dir == 2 )
 80012dc:	2c02      	cmp	r4, #2
 80012de:	d131      	bne.n	8001344 <u8g2_DrawHVLine+0x76>
	{
	  x -= len;
	  x++;
 80012e0:	3101      	adds	r1, #1
 80012e2:	1ac9      	subs	r1, r1, r3
 80012e4:	b2c9      	uxtb	r1, r1
	{
	  y -= len;
	  y++;
	}
      }
      dir &= 1;  
 80012e6:	2501      	movs	r5, #1
 80012e8:	0026      	movs	r6, r4
 80012ea:	402e      	ands	r6, r5
      
      /* clip against the user window */
      if ( dir == 0 )
 80012ec:	422c      	tst	r4, r5
 80012ee:	d133      	bne.n	8001358 <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
 80012f0:	0004      	movs	r4, r0
 80012f2:	3447      	adds	r4, #71	; 0x47
 80012f4:	7824      	ldrb	r4, [r4, #0]
 80012f6:	4294      	cmp	r4, r2
 80012f8:	d82d      	bhi.n	8001356 <u8g2_DrawHVLine+0x88>
	  return;
	if ( y >= u8g2->user_y1 )
 80012fa:	0004      	movs	r4, r0
 80012fc:	3448      	adds	r4, #72	; 0x48
 80012fe:	7824      	ldrb	r4, [r4, #0]
 8001300:	4294      	cmp	r4, r2
 8001302:	d928      	bls.n	8001356 <u8g2_DrawHVLine+0x88>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001304:	0004      	movs	r4, r0
 8001306:	0005      	movs	r5, r0
  b += *len;
 8001308:	18cb      	adds	r3, r1, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800130a:	3445      	adds	r4, #69	; 0x45
 800130c:	3546      	adds	r5, #70	; 0x46
  b += *len;
 800130e:	b2db      	uxtb	r3, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001310:	7824      	ldrb	r4, [r4, #0]
 8001312:	782d      	ldrb	r5, [r5, #0]
  if ( a > b )
 8001314:	428b      	cmp	r3, r1
 8001316:	d21c      	bcs.n	8001352 <u8g2_DrawHVLine+0x84>
    if ( a < d )
 8001318:	428d      	cmp	r5, r1
 800131a:	d919      	bls.n	8001350 <u8g2_DrawHVLine+0x82>
      b--;
 800131c:	1e6b      	subs	r3, r5, #1
 800131e:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8001320:	429c      	cmp	r4, r3
 8001322:	d218      	bcs.n	8001356 <u8g2_DrawHVLine+0x88>
  if ( a < c )		
 8001324:	1c27      	adds	r7, r4, #0
 8001326:	428c      	cmp	r4, r1
 8001328:	d200      	bcs.n	800132c <u8g2_DrawHVLine+0x5e>
 800132a:	1c0f      	adds	r7, r1, #0
 800132c:	b2f9      	uxtb	r1, r7
  if ( b > d )
 800132e:	1c2c      	adds	r4, r5, #0
 8001330:	429d      	cmp	r5, r3
 8001332:	d900      	bls.n	8001336 <u8g2_DrawHVLine+0x68>
 8001334:	1c1c      	adds	r4, r3, #0
  b -= a;
 8001336:	1a63      	subs	r3, r4, r1
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001338:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800133a:	9600      	str	r6, [sp, #0]
 800133c:	68a4      	ldr	r4, [r4, #8]
  b -= a;
 800133e:	b2db      	uxtb	r3, r3
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001340:	47a0      	blx	r4
 8001342:	e008      	b.n	8001356 <u8g2_DrawHVLine+0x88>
	else if ( dir == 3 )
 8001344:	2c03      	cmp	r4, #3
 8001346:	d1ce      	bne.n	80012e6 <u8g2_DrawHVLine+0x18>
	  y++;
 8001348:	3201      	adds	r2, #1
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	e7ca      	b.n	80012e6 <u8g2_DrawHVLine+0x18>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001350:	0021      	movs	r1, r4
  if ( a >= d )
 8001352:	428d      	cmp	r5, r1
 8001354:	d8e4      	bhi.n	8001320 <u8g2_DrawHVLine+0x52>
    }
}
 8001356:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if ( x < u8g2->user_x0 )
 8001358:	0004      	movs	r4, r0
 800135a:	3445      	adds	r4, #69	; 0x45
 800135c:	7824      	ldrb	r4, [r4, #0]
 800135e:	428c      	cmp	r4, r1
 8001360:	d8f9      	bhi.n	8001356 <u8g2_DrawHVLine+0x88>
	if ( x >= u8g2->user_x1 )
 8001362:	0004      	movs	r4, r0
 8001364:	3446      	adds	r4, #70	; 0x46
 8001366:	7824      	ldrb	r4, [r4, #0]
 8001368:	428c      	cmp	r4, r1
 800136a:	d9f4      	bls.n	8001356 <u8g2_DrawHVLine+0x88>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800136c:	0004      	movs	r4, r0
  b += *len;
 800136e:	18d3      	adds	r3, r2, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001370:	3447      	adds	r4, #71	; 0x47
 8001372:	7825      	ldrb	r5, [r4, #0]
  b += *len;
 8001374:	b2db      	uxtb	r3, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001376:	3401      	adds	r4, #1
 8001378:	7824      	ldrb	r4, [r4, #0]
  if ( a > b )
 800137a:	4293      	cmp	r3, r2
 800137c:	d211      	bcs.n	80013a2 <u8g2_DrawHVLine+0xd4>
    if ( a < d )
 800137e:	4294      	cmp	r4, r2
 8001380:	d90e      	bls.n	80013a0 <u8g2_DrawHVLine+0xd2>
      b--;
 8001382:	1e63      	subs	r3, r4, #1
 8001384:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8001386:	429d      	cmp	r5, r3
 8001388:	d2e5      	bcs.n	8001356 <u8g2_DrawHVLine+0x88>
  if ( a < c )		
 800138a:	1c2f      	adds	r7, r5, #0
 800138c:	4295      	cmp	r5, r2
 800138e:	d200      	bcs.n	8001392 <u8g2_DrawHVLine+0xc4>
 8001390:	1c17      	adds	r7, r2, #0
 8001392:	b2fa      	uxtb	r2, r7
  if ( b > d )
 8001394:	1c25      	adds	r5, r4, #0
 8001396:	429c      	cmp	r4, r3
 8001398:	d900      	bls.n	800139c <u8g2_DrawHVLine+0xce>
 800139a:	1c1d      	adds	r5, r3, #0
  b -= a;
 800139c:	1aab      	subs	r3, r5, r2
 800139e:	e7cb      	b.n	8001338 <u8g2_DrawHVLine+0x6a>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80013a0:	002a      	movs	r2, r5
  if ( a >= d )
 80013a2:	4294      	cmp	r4, r2
 80013a4:	d8ef      	bhi.n	8001386 <u8g2_DrawHVLine+0xb8>
 80013a6:	e7d6      	b.n	8001356 <u8g2_DrawHVLine+0x88>

080013a8 <u8g2_draw_pixel_vertical_top_lsb>:

/*
  x,y position within the buffer
*/
static void u8g2_draw_pixel_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80013a8:	b530      	push	{r4, r5, lr}
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80013aa:	2407      	movs	r4, #7
  mask = 1;
  mask <<= bit_pos;
 80013ac:	0015      	movs	r5, r2
 80013ae:	2301      	movs	r3, #1
 80013b0:	4025      	ands	r5, r4
 80013b2:	40ab      	lsls	r3, r5

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 80013b4:	43a2      	bics	r2, r4
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80013b6:	6804      	ldr	r4, [r0, #0]
  mask <<= bit_pos;
 80013b8:	b2db      	uxtb	r3, r3
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80013ba:	7c24      	ldrb	r4, [r4, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 80013bc:	4362      	muls	r2, r4
  ptr += x;
 80013be:	1851      	adds	r1, r2, r1
 80013c0:	6b82      	ldr	r2, [r0, #56]	; 0x38


  if ( u8g2->draw_color <= 1 )
 80013c2:	307f      	adds	r0, #127	; 0x7f
  ptr += x;
 80013c4:	1851      	adds	r1, r2, r1
  if ( u8g2->draw_color <= 1 )
 80013c6:	7802      	ldrb	r2, [r0, #0]
 80013c8:	2a01      	cmp	r2, #1
 80013ca:	d903      	bls.n	80013d4 <u8g2_draw_pixel_vertical_top_lsb+0x2c>
    *ptr |= mask;
  if ( u8g2->draw_color != 1 )
    *ptr ^= mask;
 80013cc:	780a      	ldrb	r2, [r1, #0]
 80013ce:	4053      	eors	r3, r2
 80013d0:	700b      	strb	r3, [r1, #0]

}
 80013d2:	bd30      	pop	{r4, r5, pc}
    *ptr |= mask;
 80013d4:	780a      	ldrb	r2, [r1, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	700a      	strb	r2, [r1, #0]
  if ( u8g2->draw_color != 1 )
 80013da:	7802      	ldrb	r2, [r0, #0]
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d0f8      	beq.n	80013d2 <u8g2_draw_pixel_vertical_top_lsb+0x2a>
 80013e0:	e7f4      	b.n	80013cc <u8g2_draw_pixel_vertical_top_lsb+0x24>

080013e2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80013e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e4:	0014      	movs	r4, r2
 80013e6:	aa06      	add	r2, sp, #24
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	0006      	movs	r6, r0
 80013ec:	000d      	movs	r5, r1
  if ( dir == 0 )
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d10b      	bne.n	800140a <u8g2_ll_hvline_vertical_top_lsb+0x28>
 80013f2:	18cb      	adds	r3, r1, r3
 80013f4:	b2df      	uxtb	r7, r3
  {
    do
    {
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 80013f6:	0029      	movs	r1, r5
      x++;
 80013f8:	3501      	adds	r5, #1
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 80013fa:	0022      	movs	r2, r4
 80013fc:	0030      	movs	r0, r6
      x++;
 80013fe:	b2ed      	uxtb	r5, r5
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 8001400:	f7ff ffd2 	bl	80013a8 <u8g2_draw_pixel_vertical_top_lsb>
      len--;
    } while( len != 0 );
 8001404:	42bd      	cmp	r5, r7
 8001406:	d1f6      	bne.n	80013f6 <u8g2_ll_hvline_vertical_top_lsb+0x14>
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
      y++;
      len--;
    } while( len != 0 );
  }
}
 8001408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140a:	191b      	adds	r3, r3, r4
 800140c:	b2df      	uxtb	r7, r3
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 800140e:	0022      	movs	r2, r4
      y++;
 8001410:	3401      	adds	r4, #1
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 8001412:	0029      	movs	r1, r5
 8001414:	0030      	movs	r0, r6
      y++;
 8001416:	b2e4      	uxtb	r4, r4
      u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 8001418:	f7ff ffc6 	bl	80013a8 <u8g2_draw_pixel_vertical_top_lsb>
    } while( len != 0 );
 800141c:	42a7      	cmp	r7, r4
 800141e:	d1f6      	bne.n	800140e <u8g2_ll_hvline_vertical_top_lsb+0x2c>
 8001420:	e7f2      	b.n	8001408 <u8g2_ll_hvline_vertical_top_lsb+0x26>

08001422 <u8g2_update_dimension_common>:
static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001422:	0003      	movs	r3, r0
{
 8001424:	b570      	push	{r4, r5, r6, lr}
  t = u8g2->tile_buf_height;
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	781a      	ldrb	r2, [r3, #0]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800142a:	6804      	ldr	r4, [r0, #0]
  t *= 8;
 800142c:	00d1      	lsls	r1, r2, #3
  u8g2->pixel_buf_height = t;
 800142e:	70d9      	strb	r1, [r3, #3]
  
  t = display_info->tile_width;
 8001430:	7c23      	ldrb	r3, [r4, #16]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8001432:	1c19      	adds	r1, r3, #0
 8001434:	2b1f      	cmp	r3, #31
 8001436:	d900      	bls.n	800143a <u8g2_update_dimension_common+0x18>
 8001438:	211f      	movs	r1, #31
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
 800143a:	0003      	movs	r3, r0
 800143c:	b2c9      	uxtb	r1, r1
  t *= 8;
 800143e:	00c9      	lsls	r1, r1, #3
  u8g2->pixel_buf_width = t;
 8001440:	333e      	adds	r3, #62	; 0x3e
 8001442:	7019      	strb	r1, [r3, #0]
  
  t = u8g2->tile_curr_row;
  t *= 8;
  u8g2->pixel_curr_row = t;
 8001444:	0001      	movs	r1, r0
  t = u8g2->tile_curr_row;
 8001446:	3b01      	subs	r3, #1
 8001448:	781d      	ldrb	r5, [r3, #0]
  u8g2->pixel_curr_row = t;
 800144a:	3140      	adds	r1, #64	; 0x40
  t *= 8;
 800144c:	00eb      	lsls	r3, r5, #3
 800144e:	b2db      	uxtb	r3, r3
  u8g2->pixel_curr_row = t;
 8001450:	700b      	strb	r3, [r1, #0]
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001452:	7c61      	ldrb	r1, [r4, #17]
 8001454:	1956      	adds	r6, r2, r5
 8001456:	428e      	cmp	r6, r1
 8001458:	dd01      	ble.n	800145e <u8g2_update_dimension_common+0x3c>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800145a:	1b4a      	subs	r2, r1, r5
 800145c:	b2d2      	uxtb	r2, r2
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800145e:	0001      	movs	r1, r0
  t *= 8;
 8001460:	00d2      	lsls	r2, r2, #3
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001462:	3141      	adds	r1, #65	; 0x41
 8001464:	700b      	strb	r3, [r1, #0]
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 8001466:	189b      	adds	r3, r3, r2
 8001468:	0002      	movs	r2, r0
 800146a:	3242      	adds	r2, #66	; 0x42
 800146c:	7013      	strb	r3, [r2, #0]
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800146e:	0003      	movs	r3, r0
 8001470:	22f0      	movs	r2, #240	; 0xf0
 8001472:	3343      	adds	r3, #67	; 0x43
 8001474:	701a      	strb	r2, [r3, #0]
  if ( display_info->pixel_width <= 240 )
 8001476:	8aa2      	ldrh	r2, [r4, #20]
 8001478:	2af0      	cmp	r2, #240	; 0xf0
 800147a:	d800      	bhi.n	800147e <u8g2_update_dimension_common+0x5c>
    u8g2->width = display_info->pixel_width;
 800147c:	701a      	strb	r2, [r3, #0]
  u8g2->height = display_info->pixel_height;
 800147e:	8ae3      	ldrh	r3, [r4, #22]
 8001480:	3044      	adds	r0, #68	; 0x44
 8001482:	7003      	strb	r3, [r0, #0]
#endif

}
 8001484:	bd70      	pop	{r4, r5, r6, pc}

08001486 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001486:	b510      	push	{r4, lr}
  u8g2_update_dimension_common(u8g2);  
 8001488:	f7ff ffcb 	bl	8001422 <u8g2_update_dimension_common>
}
 800148c:	bd10      	pop	{r4, pc}

0800148e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
  u8g2->user_x0 = 0;
 800148e:	0003      	movs	r3, r0
 8001490:	2200      	movs	r2, #0
 8001492:	3345      	adds	r3, #69	; 0x45
 8001494:	701a      	strb	r2, [r3, #0]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8001496:	0002      	movs	r2, r0
 8001498:	3243      	adds	r2, #67	; 0x43
 800149a:	7812      	ldrb	r2, [r2, #0]
  
  u8g2->user_y0 = u8g2->buf_y0;
  u8g2->user_y1 = u8g2->buf_y1;
 800149c:	3b03      	subs	r3, #3
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800149e:	711a      	strb	r2, [r3, #4]
  u8g2->user_y0 = u8g2->buf_y0;
 80014a0:	0002      	movs	r2, r0
 80014a2:	3241      	adds	r2, #65	; 0x41
 80014a4:	7812      	ldrb	r2, [r2, #0]
  u8g2->user_y1 = u8g2->buf_y1;
 80014a6:	3048      	adds	r0, #72	; 0x48
  u8g2->user_y0 = u8g2->buf_y0;
 80014a8:	715a      	strb	r2, [r3, #5]
  u8g2->user_y1 = u8g2->buf_y1;
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	7003      	strb	r3, [r0, #0]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80014ae:	4770      	bx	lr

080014b0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80014b0:	b513      	push	{r0, r1, r4, lr}
 80014b2:	ac04      	add	r4, sp, #16
 80014b4:	7824      	ldrb	r4, [r4, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80014b6:	9400      	str	r4, [sp, #0]
 80014b8:	f7ff fefd 	bl	80012b6 <u8g2_draw_hv_line_2dir>
}
 80014bc:	bd13      	pop	{r0, r1, r4, pc}

080014be <u8g2_SetupBuffer>:
{
 80014be:	b570      	push	{r4, r5, r6, lr}
 80014c0:	0004      	movs	r4, r0
  u8g2->ll_hvline = ll_hvline_cb;
 80014c2:	6323      	str	r3, [r4, #48]	; 0x30
  u8g2->tile_buf_height = tile_buf_height;
 80014c4:	0023      	movs	r3, r4
  u8g2->font = NULL;
 80014c6:	2000      	movs	r0, #0
  u8g2->tile_buf_height = tile_buf_height;
 80014c8:	333c      	adds	r3, #60	; 0x3c
  u8g2->tile_buf_ptr = buf;
 80014ca:	63a1      	str	r1, [r4, #56]	; 0x38
  u8g2->font = NULL;
 80014cc:	64e0      	str	r0, [r4, #76]	; 0x4c
  u8g2->tile_buf_height = tile_buf_height;
 80014ce:	701a      	strb	r2, [r3, #0]
  u8g2->bitmap_transparency = 0;
 80014d0:	2280      	movs	r2, #128	; 0x80
  u8g2->tile_curr_row = 0;
 80014d2:	7058      	strb	r0, [r3, #1]
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80014d4:	3323      	adds	r3, #35	; 0x23
 80014d6:	7018      	strb	r0, [r3, #0]
  u8g2->bitmap_transparency = 0;
 80014d8:	0052      	lsls	r2, r2, #1
 80014da:	331f      	adds	r3, #31
{
 80014dc:	9d04      	ldr	r5, [sp, #16]
  u8g2->bitmap_transparency = 0;
 80014de:	801a      	strh	r2, [r3, #0]
  u8g2->is_auto_page_clear = 1;
 80014e0:	3aff      	subs	r2, #255	; 0xff
 80014e2:	709a      	strb	r2, [r3, #2]
  u8g2->cb->update_dimension(u8g2);
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	0020      	movs	r0, r4
  u8g2->cb = u8g2_cb;
 80014e8:	6365      	str	r5, [r4, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80014ea:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80014ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ee:	0020      	movs	r0, r4
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4798      	blx	r3
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80014f4:	0020      	movs	r0, r4
 80014f6:	f7ff fecb 	bl	8001290 <u8g2_SetFontPosBaseline>
}
 80014fa:	bd70      	pop	{r4, r5, r6, pc}

080014fc <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80014fc:	2900      	cmp	r1, #0
 80014fe:	d002      	beq.n	8001506 <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8001500:	b288      	uxth	r0, r1
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001502:	290a      	cmp	r1, #10
 8001504:	d100      	bne.n	8001508 <u8x8_ascii_next+0xc>
    return 0x0ffff;	/* end of string detected*/
 8001506:	4801      	ldr	r0, [pc, #4]	; (800150c <u8x8_ascii_next+0x10>)
}
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	0000ffff 	.word	0x0000ffff

08001510 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001510:	2300      	movs	r3, #0
 8001512:	3008      	adds	r0, #8
 8001514:	77c3      	strb	r3, [r0, #31]
}
 8001516:	4770      	bx	lr

08001518 <u8x8_i2c_data_transfer.isra.0>:
/* u8x8_byte_SetDC is not used */
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
 8001518:	b597      	push	{r0, r1, r2, r4, r7, lr}
{
uint8_t buffer[arg_int+1];
 800151a:	0002      	movs	r2, r0
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
 800151c:	0003      	movs	r3, r0
uint8_t buffer[arg_int+1];
 800151e:	4668      	mov	r0, sp
 8001520:	3208      	adds	r2, #8
 8001522:	08d2      	lsrs	r2, r2, #3
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	1a82      	subs	r2, r0, r2
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
 8001528:	af02      	add	r7, sp, #8
uint8_t buffer[arg_int+1];
 800152a:	4695      	mov	sp, r2
uint8_t *ptr = arg_ptr;
buffer[0] = 0x40;
 800152c:	2040      	movs	r0, #64	; 0x40
uint8_t buffer[arg_int+1];
 800152e:	aa02      	add	r2, sp, #8
buffer[0] = 0x40;
 8001530:	7010      	strb	r0, [r2, #0]
for (int i = 1; i <= arg_int; i++) buffer[i] = *(ptr++);
 8001532:	3901      	subs	r1, #1
 8001534:	383f      	subs	r0, #63	; 0x3f
 8001536:	4283      	cmp	r3, r0
 8001538:	da09      	bge.n	800154e <u8x8_i2c_data_transfer.isra.0+0x36>
HAL_I2C_Master_Transmit(&hi2c1, 0x78, (uint8_t *)buffer, arg_int+1, HAL_MAX_DELAY);
 800153a:	2101      	movs	r1, #1
 800153c:	4249      	negs	r1, r1
 800153e:	9100      	str	r1, [sp, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	3179      	adds	r1, #121	; 0x79
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <u8x8_i2c_data_transfer.isra.0+0x40>)
 8001546:	f000 fedd 	bl	8002304 <HAL_I2C_Master_Transmit>
//HAL_I2C_Master_Transmit(&hi2c1, 0x78, (uint8_t *)arg_ptr, arg_int, HAL_MAX_DELAY);
// HAL_I2C_Master_Transmit_DMA(&hi2c1, 0x78, (uint8_t *)buffer, arg_int);
}
 800154a:	46bd      	mov	sp, r7
 800154c:	bd91      	pop	{r0, r4, r7, pc}
for (int i = 1; i <= arg_int; i++) buffer[i] = *(ptr++);
 800154e:	5c0c      	ldrb	r4, [r1, r0]
 8001550:	5414      	strb	r4, [r2, r0]
 8001552:	3001      	adds	r0, #1
 8001554:	e7ef      	b.n	8001536 <u8x8_i2c_data_transfer.isra.0+0x1e>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000234 	.word	0x20000234

0800155c <u8x8_cad_SendCmd>:
{
 800155c:	b510      	push	{r4, lr}
 800155e:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001560:	2300      	movs	r3, #0
 8001562:	2115      	movs	r1, #21
 8001564:	68c4      	ldr	r4, [r0, #12]
 8001566:	47a0      	blx	r4
}
 8001568:	bd10      	pop	{r4, pc}

0800156a <u8x8_cad_SendArg>:
{
 800156a:	b510      	push	{r4, lr}
 800156c:	000a      	movs	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800156e:	2300      	movs	r3, #0
 8001570:	2116      	movs	r1, #22
 8001572:	68c4      	ldr	r4, [r0, #12]
 8001574:	47a0      	blx	r4
}
 8001576:	bd10      	pop	{r4, pc}

08001578 <u8x8_cad_SendData>:
{
 8001578:	b510      	push	{r4, lr}
 800157a:	0013      	movs	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800157c:	68c4      	ldr	r4, [r0, #12]
 800157e:	000a      	movs	r2, r1
 8001580:	2117      	movs	r1, #23
 8001582:	47a0      	blx	r4
}
 8001584:	bd10      	pop	{r4, pc}

08001586 <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001586:	2300      	movs	r3, #0
{
 8001588:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800158a:	001a      	movs	r2, r3
 800158c:	2118      	movs	r1, #24
 800158e:	68c4      	ldr	r4, [r0, #12]
 8001590:	47a0      	blx	r4
}
 8001592:	bd10      	pop	{r4, pc}

08001594 <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001594:	2300      	movs	r3, #0
{
 8001596:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001598:	001a      	movs	r2, r3
 800159a:	2119      	movs	r1, #25
 800159c:	68c4      	ldr	r4, [r0, #12]
 800159e:	47a0      	blx	r4
}
 80015a0:	bd10      	pop	{r4, pc}

080015a2 <u8x8_cad_SendSequence>:
{
 80015a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015a4:	0005      	movs	r5, r0
 80015a6:	000c      	movs	r4, r1
    cmd = *data;
 80015a8:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 80015aa:	2919      	cmp	r1, #25
 80015ac:	d80d      	bhi.n	80015ca <u8x8_cad_SendSequence+0x28>
 80015ae:	2917      	cmp	r1, #23
 80015b0:	d817      	bhi.n	80015e2 <u8x8_cad_SendSequence+0x40>
 80015b2:	d00d      	beq.n	80015d0 <u8x8_cad_SendSequence+0x2e>
 80015b4:	2914      	cmp	r1, #20
 80015b6:	d90a      	bls.n	80015ce <u8x8_cad_SendSequence+0x2c>
	  v = *data;
 80015b8:	466b      	mov	r3, sp
 80015ba:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80015bc:	0028      	movs	r0, r5
	  v = *data;
 80015be:	71da      	strb	r2, [r3, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80015c0:	68ee      	ldr	r6, [r5, #12]
 80015c2:	2300      	movs	r3, #0
 80015c4:	47b0      	blx	r6
	  data++;
 80015c6:	3402      	adds	r4, #2
	  break;
 80015c8:	e7ee      	b.n	80015a8 <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 80015ca:	29fe      	cmp	r1, #254	; 0xfe
 80015cc:	d010      	beq.n	80015f0 <u8x8_cad_SendSequence+0x4e>
}
 80015ce:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	  v = *data;
 80015d0:	466b      	mov	r3, sp
 80015d2:	1dda      	adds	r2, r3, #7
 80015d4:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80015d6:	2101      	movs	r1, #1
 80015d8:	0028      	movs	r0, r5
	  v = *data;
 80015da:	7013      	strb	r3, [r2, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80015dc:	f7ff ffcc 	bl	8001578 <u8x8_cad_SendData>
	  data++;
 80015e0:	e7f1      	b.n	80015c6 <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80015e2:	2300      	movs	r3, #0
 80015e4:	0028      	movs	r0, r5
 80015e6:	001a      	movs	r2, r3
 80015e8:	68ee      	ldr	r6, [r5, #12]
    data++;
 80015ea:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80015ec:	47b0      	blx	r6
	  break;
 80015ee:	e7db      	b.n	80015a8 <u8x8_cad_SendSequence+0x6>
	  v = *data;
 80015f0:	466b      	mov	r3, sp
 80015f2:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80015f4:	2129      	movs	r1, #41	; 0x29
 80015f6:	0028      	movs	r0, r5
	  v = *data;
 80015f8:	71da      	strb	r2, [r3, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80015fa:	f000 f907 	bl	800180c <u8x8_gpio_call>
 80015fe:	e7e2      	b.n	80015c6 <u8x8_cad_SendSequence+0x24>

08001600 <u8x8_cad_ssd13xx_i2c>:

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001602:	000c      	movs	r4, r1
 8001604:	0010      	movs	r0, r2
 8001606:	0019      	movs	r1, r3
uint8_t* p;
uint8_t buffer[2];
switch(msg)
 8001608:	2c16      	cmp	r4, #22
 800160a:	d805      	bhi.n	8001618 <u8x8_cad_ssd13xx_i2c+0x18>
 800160c:	2300      	movs	r3, #0
 800160e:	2c14      	cmp	r4, #20
 8001610:	d807      	bhi.n	8001622 <u8x8_cad_ssd13xx_i2c+0x22>
 8001612:	2000      	movs	r0, #0
default:
  return 0;

}
return 1;
}
 8001614:	b004      	add	sp, #16
 8001616:	bd10      	pop	{r4, pc}
switch(msg)
 8001618:	2c17      	cmp	r4, #23
 800161a:	d1fa      	bne.n	8001612 <u8x8_cad_ssd13xx_i2c+0x12>
  u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800161c:	f7ff ff7c 	bl	8001518 <u8x8_i2c_data_transfer.isra.0>
 8001620:	e00b      	b.n	800163a <u8x8_cad_ssd13xx_i2c+0x3a>
buffer[0] = 0x00;
 8001622:	466a      	mov	r2, sp
 8001624:	7313      	strb	r3, [r2, #12]
HAL_I2C_Master_Transmit(&hi2c1, 0x78, buffer, 2, HAL_MAX_DELAY);
 8001626:	2301      	movs	r3, #1
 8001628:	425b      	negs	r3, r3
buffer[1] = arg_int;
 800162a:	7350      	strb	r0, [r2, #13]
HAL_I2C_Master_Transmit(&hi2c1, 0x78, buffer, 2, HAL_MAX_DELAY);
 800162c:	2178      	movs	r1, #120	; 0x78
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <u8x8_cad_ssd13xx_i2c+0x40>)
 8001632:	3303      	adds	r3, #3
 8001634:	aa03      	add	r2, sp, #12
 8001636:	f000 fe65 	bl	8002304 <HAL_I2C_Master_Transmit>
return 1;
 800163a:	2001      	movs	r0, #1
  break;
 800163c:	e7ea      	b.n	8001614 <u8x8_cad_ssd13xx_i2c+0x14>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	20000234 	.word	0x20000234

08001644 <u8x8_cad_ssd13xx_fast_i2c>:
 8001644:	b510      	push	{r4, lr}
 8001646:	f7ff ffdb 	bl	8001600 <u8x8_cad_ssd13xx_i2c>
 800164a:	bd10      	pop	{r4, pc}

0800164c <u8x8_d_ssd1306_128x32_generic>:

static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800164c:	390a      	subs	r1, #10
{
 800164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001650:	0004      	movs	r4, r0
 8001652:	0015      	movs	r5, r2
 8001654:	001f      	movs	r7, r3
 8001656:	0008      	movs	r0, r1
 8001658:	2905      	cmp	r1, #5
 800165a:	d859      	bhi.n	8001710 <u8x8_d_ssd1306_128x32_generic+0xc4>
 800165c:	f7fe fd5a 	bl	8000114 <__gnu_thumb1_case_uqi>
 8001660:	11580c03 	.word	0x11580c03
 8001664:	3223      	.short	0x3223
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001666:	0020      	movs	r0, r4
 8001668:	f000 f871 	bl	800174e <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 800166c:	4929      	ldr	r1, [pc, #164]	; (8001714 <u8x8_d_ssd1306_128x32_generic+0xc8>)
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 800166e:	0020      	movs	r0, r4
 8001670:	f7ff ff97 	bl	80015a2 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8001674:	2001      	movs	r0, #1
}
 8001676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8001678:	4927      	ldr	r1, [pc, #156]	; (8001718 <u8x8_d_ssd1306_128x32_generic+0xcc>)
      if ( arg_int == 0 )
 800167a:	2a00      	cmp	r2, #0
 800167c:	d0f7      	beq.n	800166e <u8x8_d_ssd1306_128x32_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <u8x8_d_ssd1306_128x32_generic+0xd0>)
 8001680:	e7f5      	b.n	800166e <u8x8_d_ssd1306_128x32_generic+0x22>
      if ( arg_int == 0 )
 8001682:	1ce6      	adds	r6, r4, #3
 8001684:	2a00      	cmp	r2, #0
 8001686:	d107      	bne.n	8001698 <u8x8_d_ssd1306_128x32_generic+0x4c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8001688:	0020      	movs	r0, r4
 800168a:	4925      	ldr	r1, [pc, #148]	; (8001720 <u8x8_d_ssd1306_128x32_generic+0xd4>)
 800168c:	f7ff ff89 	bl	80015a2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001694:	77f3      	strb	r3, [r6, #31]
 8001696:	e7ed      	b.n	8001674 <u8x8_d_ssd1306_128x32_generic+0x28>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8001698:	0020      	movs	r0, r4
 800169a:	4922      	ldr	r1, [pc, #136]	; (8001724 <u8x8_d_ssd1306_128x32_generic+0xd8>)
 800169c:	f7ff ff81 	bl	80015a2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	7cdb      	ldrb	r3, [r3, #19]
 80016a4:	e7f6      	b.n	8001694 <u8x8_d_ssd1306_128x32_generic+0x48>
      u8x8_cad_StartTransfer(u8x8);
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7ff ff6d 	bl	8001586 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80016ac:	2181      	movs	r1, #129	; 0x81
 80016ae:	0020      	movs	r0, r4
 80016b0:	f7ff ff54 	bl	800155c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80016b4:	0029      	movs	r1, r5
 80016b6:	0020      	movs	r0, r4
 80016b8:	f7ff ff57 	bl	800156a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80016bc:	0020      	movs	r0, r4
 80016be:	f7ff ff69 	bl	8001594 <u8x8_cad_EndTransfer>
 80016c2:	e7d7      	b.n	8001674 <u8x8_d_ssd1306_128x32_generic+0x28>
      u8x8_cad_StartTransfer(u8x8);
 80016c4:	0020      	movs	r0, r4
 80016c6:	f7ff ff5e 	bl	8001586 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80016ca:	797e      	ldrb	r6, [r7, #5]
      x += u8x8->x_offset;
 80016cc:	1ce3      	adds	r3, r4, #3
 80016ce:	7fd9      	ldrb	r1, [r3, #31]
      x *= 8;
 80016d0:	00f6      	lsls	r6, r6, #3
      x += u8x8->x_offset;
 80016d2:	1876      	adds	r6, r6, r1
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80016d4:	2110      	movs	r1, #16
      x += u8x8->x_offset;
 80016d6:	b2f6      	uxtb	r6, r6
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80016d8:	0933      	lsrs	r3, r6, #4
 80016da:	4319      	orrs	r1, r3
 80016dc:	0020      	movs	r0, r4
 80016de:	f7ff ff3d 	bl	800155c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80016e2:	210f      	movs	r1, #15
 80016e4:	0020      	movs	r0, r4
 80016e6:	4031      	ands	r1, r6
 80016e8:	f7ff ff38 	bl	800155c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80016ec:	23b0      	movs	r3, #176	; 0xb0
 80016ee:	79b9      	ldrb	r1, [r7, #6]
 80016f0:	0020      	movs	r0, r4
 80016f2:	4319      	orrs	r1, r3
 80016f4:	f7ff ff32 	bl	800155c <u8x8_cad_SendCmd>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80016f8:	7939      	ldrb	r1, [r7, #4]
	arg_int--;
 80016fa:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80016fc:	00c9      	lsls	r1, r1, #3
 80016fe:	0020      	movs	r0, r4
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2c9      	uxtb	r1, r1
	arg_int--;
 8001704:	b2ed      	uxtb	r5, r5
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001706:	f7ff ff37 	bl	8001578 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 800170a:	2d00      	cmp	r5, #0
 800170c:	d1f4      	bne.n	80016f8 <u8x8_d_ssd1306_128x32_generic+0xac>
 800170e:	e7d5      	b.n	80016bc <u8x8_d_ssd1306_128x32_generic+0x70>
  return 1;
 8001710:	2000      	movs	r0, #0
 8001712:	e7b0      	b.n	8001676 <u8x8_d_ssd1306_128x32_generic+0x2a>
 8001714:	08003876 	.word	0x08003876
 8001718:	080038ab 	.word	0x080038ab
 800171c:	080038b0 	.word	0x080038b0
 8001720:	08003868 	.word	0x08003868
 8001724:	0800386f 	.word	0x0800386f

08001728 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001728:	b510      	push	{r4, lr}
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 800172a:	2909      	cmp	r1, #9
 800172c:	d104      	bne.n	8001738 <u8x8_d_ssd1306_128x32_univision+0x10>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <u8x8_d_ssd1306_128x32_univision+0x18>)
 8001730:	f000 f808 	bl	8001744 <u8x8_d_helper_display_setup_memory>
      return 1;
 8001734:	2001      	movs	r0, #1
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
}
 8001736:	bd10      	pop	{r4, pc}
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8001738:	f7ff ff88 	bl	800164c <u8x8_d_ssd1306_128x32_generic>
 800173c:	e7fb      	b.n	8001736 <u8x8_d_ssd1306_128x32_univision+0xe>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	080038b8 	.word	0x080038b8

08001744 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001744:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001746:	7c8b      	ldrb	r3, [r1, #18]
 8001748:	3003      	adds	r0, #3
 800174a:	77c3      	strb	r3, [r0, #31]
}
 800174c:	4770      	bx	lr

0800174e <u8x8_d_helper_display_init>:
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800174e:	2300      	movs	r3, #0
{
 8001750:	b570      	push	{r4, r5, r6, lr}
      u8x8_gpio_Init(u8x8);
 8001752:	001a      	movs	r2, r3
 8001754:	2128      	movs	r1, #40	; 0x28
 8001756:	6945      	ldr	r5, [r0, #20]
{
 8001758:	0004      	movs	r4, r0
      u8x8_gpio_Init(u8x8);
 800175a:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 800175c:	2300      	movs	r3, #0
 800175e:	68e5      	ldr	r5, [r4, #12]
 8001760:	001a      	movs	r2, r3
 8001762:	2114      	movs	r1, #20
 8001764:	0020      	movs	r0, r4
 8001766:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001768:	0020      	movs	r0, r4
 800176a:	2201      	movs	r2, #1
 800176c:	214b      	movs	r1, #75	; 0x4b
 800176e:	f000 f84d 	bl	800180c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	0020      	movs	r0, r4
 8001776:	791a      	ldrb	r2, [r3, #4]
 8001778:	2129      	movs	r1, #41	; 0x29
 800177a:	f000 f847 	bl	800180c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800177e:	0020      	movs	r0, r4
 8001780:	2200      	movs	r2, #0
 8001782:	214b      	movs	r1, #75	; 0x4b
 8001784:	f000 f842 	bl	800180c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	0020      	movs	r0, r4
 800178c:	791a      	ldrb	r2, [r3, #4]
 800178e:	2129      	movs	r1, #41	; 0x29
 8001790:	f000 f83c 	bl	800180c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001794:	0020      	movs	r0, r4
 8001796:	2201      	movs	r2, #1
 8001798:	214b      	movs	r1, #75	; 0x4b
 800179a:	f000 f837 	bl	800180c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	2129      	movs	r1, #41	; 0x29
 80017a2:	0020      	movs	r0, r4
 80017a4:	795a      	ldrb	r2, [r3, #5]
 80017a6:	f000 f831 	bl	800180c <u8x8_gpio_call>
}    
 80017aa:	bd70      	pop	{r4, r5, r6, pc}

080017ac <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80017ac:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
 80017ae:	466c      	mov	r4, sp
  tile.y_pos = y;
  tile.cnt = cnt;
 80017b0:	7123      	strb	r3, [r4, #4]
  tile.tile_ptr = tile_ptr;
 80017b2:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 80017b4:	7161      	strb	r1, [r4, #5]
  tile.y_pos = y;
 80017b6:	71a2      	strb	r2, [r4, #6]
  tile.tile_ptr = tile_ptr;
 80017b8:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80017ba:	2201      	movs	r2, #1
 80017bc:	466b      	mov	r3, sp
 80017be:	210f      	movs	r1, #15
 80017c0:	6884      	ldr	r4, [r0, #8]
 80017c2:	47a0      	blx	r4
}
 80017c4:	bd16      	pop	{r1, r2, r4, pc}

080017c6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80017c6:	2300      	movs	r3, #0
{
 80017c8:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80017ca:	001a      	movs	r2, r3
 80017cc:	2109      	movs	r1, #9
 80017ce:	6884      	ldr	r4, [r0, #8]
 80017d0:	47a0      	blx	r4
}
 80017d2:	bd10      	pop	{r4, pc}

080017d4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80017d4:	2300      	movs	r3, #0
{
 80017d6:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80017d8:	001a      	movs	r2, r3
 80017da:	210a      	movs	r1, #10
 80017dc:	6884      	ldr	r4, [r0, #8]
 80017de:	47a0      	blx	r4
}
 80017e0:	bd10      	pop	{r4, pc}

080017e2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80017e2:	b510      	push	{r4, lr}
 80017e4:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80017e6:	2300      	movs	r3, #0
 80017e8:	210b      	movs	r1, #11
 80017ea:	6884      	ldr	r4, [r0, #8]
 80017ec:	47a0      	blx	r4
}
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	000a      	movs	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80017f4:	2300      	movs	r3, #0
 80017f6:	210e      	movs	r1, #14
 80017f8:	6884      	ldr	r4, [r0, #8]
 80017fa:	47a0      	blx	r4
}
 80017fc:	bd10      	pop	{r4, pc}

080017fe <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80017fe:	2300      	movs	r3, #0
{
 8001800:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8001802:	001a      	movs	r2, r3
 8001804:	2110      	movs	r1, #16
 8001806:	6884      	ldr	r4, [r0, #8]
 8001808:	47a0      	blx	r4
}
 800180a:	bd10      	pop	{r4, pc}

0800180c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800180c:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800180e:	2300      	movs	r3, #0
 8001810:	6944      	ldr	r4, [r0, #20]
 8001812:	47a0      	blx	r4
}
 8001814:	bd10      	pop	{r4, pc}

08001816 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8001816:	2000      	movs	r0, #0
 8001818:	4770      	bx	lr
	...

0800181c <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 800181c:	2300      	movs	r3, #0
    u8x8->display_cb = u8x8_dummy_cb;
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <u8x8_SetupDefaults+0x24>)
    u8x8->display_info = NULL;
 8001820:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8001822:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001824:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001826:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001828:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
 800182a:	1d02      	adds	r2, r0, #4
 800182c:	77d3      	strb	r3, [r2, #31]
    u8x8->device_address = 0;
 800182e:	84c3      	strh	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
 8001830:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8001832:	1d42      	adds	r2, r0, #5
 8001834:	33ff      	adds	r3, #255	; 0xff
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001836:	3029      	adds	r0, #41	; 0x29
    u8x8->i2c_address = 255;
 8001838:	77d3      	strb	r3, [r2, #31]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800183a:	7003      	strb	r3, [r0, #0]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800183c:	4770      	bx	lr
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	08001817 	.word	0x08001817

08001844 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	0004      	movs	r4, r0
 8001848:	000f      	movs	r7, r1
 800184a:	0016      	movs	r6, r2
 800184c:	001d      	movs	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800184e:	f7ff ffe5 	bl	800181c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8001852:	9b06      	ldr	r3, [sp, #24]
  u8x8->display_cb = display_cb;
 8001854:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
 8001856:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
 8001858:	6125      	str	r5, [r4, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800185a:	0020      	movs	r0, r4
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800185c:	6163      	str	r3, [r4, #20]
  u8x8_SetupMemory(u8x8);
 800185e:	f7ff ffb2 	bl	80017c6 <u8x8_SetupMemory>
}
 8001862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001866:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001868:	f7ff f9c7 	bl	8000bfa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	; (80018a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <LoopForever+0xe>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	; (80018b0 <LoopForever+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001892:	f001 fd83 	bl	800339c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001896:	f7ff f944 	bl	8000b22 <main>

0800189a <LoopForever>:

LoopForever:
  b LoopForever
 800189a:	e7fe      	b.n	800189a <LoopForever>
  ldr   r0, =_estack
 800189c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80018a8:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 80018ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80018b0:	20000360 	.word	0x20000360

080018b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_IRQHandler>
	...

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_InitTick+0x44>)
{
 80018bc:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80018be:	7819      	ldrb	r1, [r3, #0]
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018c8:	20fa      	movs	r0, #250	; 0xfa
 80018ca:	0080      	lsls	r0, r0, #2
 80018cc:	f7fe fc2c 	bl	8000128 <__udivsi3>
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_InitTick+0x48>)
 80018d2:	0001      	movs	r1, r0
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f7fe fc27 	bl	8000128 <__udivsi3>
 80018da:	f000 fac1 	bl	8001e60 <HAL_SYSTICK_Config>
 80018de:	1e04      	subs	r4, r0, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	2d03      	cmp	r5, #3
 80018e4:	d8ee      	bhi.n	80018c4 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e6:	0002      	movs	r2, r0
 80018e8:	2001      	movs	r0, #1
 80018ea:	0029      	movs	r1, r5
 80018ec:	4240      	negs	r0, r0
 80018ee:	f000 fa8d 	bl	8001e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_InitTick+0x4c>)
 80018f4:	0020      	movs	r0, r4
 80018f6:	601d      	str	r5, [r3, #0]
  return status;
 80018f8:	e7e5      	b.n	80018c6 <HAL_InitTick+0xe>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	20000014 	.word	0x20000014
 8001900:	20000010 	.word	0x20000010
 8001904:	20000018 	.word	0x20000018

08001908 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_Init+0x24>)
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	6811      	ldr	r1, [r2, #0]
{
 8001910:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001912:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001914:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001916:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001918:	f7ff ffce 	bl	80018b8 <HAL_InitTick>
 800191c:	1e04      	subs	r4, r0, #0
 800191e:	d103      	bne.n	8001928 <HAL_Init+0x20>
  HAL_MspInit();
 8001920:	f7ff f93e 	bl	8000ba0 <HAL_MspInit>
}
 8001924:	0020      	movs	r0, r4
 8001926:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001928:	2401      	movs	r4, #1
 800192a:	e7fb      	b.n	8001924 <HAL_Init+0x1c>
 800192c:	40022000 	.word	0x40022000

08001930 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_IncTick+0x10>)
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_IncTick+0x14>)
 8001934:	6811      	ldr	r1, [r2, #0]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	185b      	adds	r3, r3, r1
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	4770      	bx	lr
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	2000035c 	.word	0x2000035c
 8001944:	20000014 	.word	0x20000014

08001948 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <HAL_GetTick+0x8>)
 800194a:	6818      	ldr	r0, [r3, #0]
}
 800194c:	4770      	bx	lr
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	2000035c 	.word	0x2000035c

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff fff6 	bl	8001948 <HAL_GetTick>
 800195c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	1c63      	adds	r3, r4, #1
 8001960:	d002      	beq.n	8001968 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_Delay+0x20>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001968:	f7ff ffee 	bl	8001948 <HAL_GetTick>
 800196c:	1b40      	subs	r0, r0, r5
 800196e:	42a0      	cmp	r0, r4
 8001970:	d3fa      	bcc.n	8001968 <HAL_Delay+0x14>
  {
  }
}
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	20000014 	.word	0x20000014

08001978 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 800197a:	4904      	ldr	r1, [pc, #16]	; (800198c <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	400b      	ands	r3, r1
 8001980:	4303      	orrs	r3, r0
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	4770      	bx	lr
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40010000 	.word	0x40010000
 800198c:	fffff9ff 	.word	0xfffff9ff

08001990 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001990:	6880      	ldr	r0, [r0, #8]
 8001992:	0740      	lsls	r0, r0, #29
 8001994:	0fc0      	lsrs	r0, r0, #31
}
 8001996:	4770      	bx	lr

08001998 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001998:	2300      	movs	r3, #0
{
 800199a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199c:	b085      	sub	sp, #20
 800199e:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 80019a0:	2501      	movs	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 80019a2:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d100      	bne.n	80019aa <HAL_ADC_Init+0x12>
 80019a8:	e0b7      	b.n	8001b1a <HAL_ADC_Init+0x182>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019aa:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80019ac:	429d      	cmp	r5, r3
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b0:	f7fe ff52 	bl	8000858 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019b4:	0023      	movs	r3, r4
 80019b6:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019bc:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019be:	6826      	ldr	r6, [r4, #0]
 80019c0:	055b      	lsls	r3, r3, #21
 80019c2:	68b2      	ldr	r2, [r6, #8]
 80019c4:	421a      	tst	r2, r3
 80019c6:	d100      	bne.n	80019ca <HAL_ADC_Init+0x32>
 80019c8:	e0aa      	b.n	8001b20 <HAL_ADC_Init+0x188>
 80019ca:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2500      	movs	r5, #0
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	d407      	bmi.n	80019e2 <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80019d8:	4313      	orrs	r3, r2
 80019da:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019de:	432b      	orrs	r3, r5
 80019e0:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e2:	0030      	movs	r0, r6
 80019e4:	f7ff ffd4 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e8:	2210      	movs	r2, #16
 80019ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019ec:	4013      	ands	r3, r2
 80019ee:	4303      	orrs	r3, r0
 80019f0:	d000      	beq.n	80019f4 <HAL_ADC_Init+0x5c>
 80019f2:	e0d0      	b.n	8001b96 <HAL_ADC_Init+0x1fe>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019f6:	4a6a      	ldr	r2, [pc, #424]	; (8001ba0 <HAL_ADC_Init+0x208>)
 80019f8:	401a      	ands	r2, r3
 80019fa:	2302      	movs	r3, #2
 80019fc:	4313      	orrs	r3, r2
 80019fe:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a00:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	07d2      	lsls	r2, r2, #31
 8001a06:	d466      	bmi.n	8001ad6 <HAL_ADC_Init+0x13e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a08:	7e22      	ldrb	r2, [r4, #24]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a0a:	7ea0      	ldrb	r0, [r4, #26]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a0c:	0392      	lsls	r2, r2, #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a0e:	7e66      	ldrb	r6, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a10:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a12:	4694      	mov	ip, r2
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a14:	0342      	lsls	r2, r0, #13
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001a16:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a18:	03f6      	lsls	r6, r6, #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a1a:	9201      	str	r2, [sp, #4]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_ADC_Init+0x8c>
 8001a20:	2780      	movs	r7, #128	; 0x80
 8001a22:	017f      	lsls	r7, r7, #5
 8001a24:	68e2      	ldr	r2, [r4, #12]
 8001a26:	4311      	orrs	r1, r2
 8001a28:	4662      	mov	r2, ip
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	4331      	orrs	r1, r6
 8001a2e:	0342      	lsls	r2, r0, #13
 8001a30:	4311      	orrs	r1, r2
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a32:	6922      	ldr	r2, [r4, #16]
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	db00      	blt.n	8001a3a <HAL_ADC_Init+0xa2>
 8001a38:	e087      	b.n	8001b4a <HAL_ADC_Init+0x1b2>
 8001a3a:	0052      	lsls	r2, r2, #1
 8001a3c:	0856      	lsrs	r6, r2, #1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a3e:	0022      	movs	r2, r4
 8001a40:	322c      	adds	r2, #44	; 0x2c
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	0052      	lsls	r2, r2, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a46:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a48:	1c61      	adds	r1, r4, #1
 8001a4a:	7fc9      	ldrb	r1, [r1, #31]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a4c:	433a      	orrs	r2, r7
 8001a4e:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a50:	2901      	cmp	r1, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_Init+0xc8>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d000      	beq.n	8001a5a <HAL_ADC_Init+0xc2>
 8001a58:	e07a      	b.n	8001b50 <HAL_ADC_Init+0x1b8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0249      	lsls	r1, r1, #9
 8001a5e:	430a      	orrs	r2, r1
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a62:	2900      	cmp	r1, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_ADC_Init+0xda>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a66:	20e0      	movs	r0, #224	; 0xe0
 8001a68:	0040      	lsls	r0, r0, #1
 8001a6a:	4001      	ands	r1, r0
 8001a6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001a6e:	4301      	orrs	r1, r0
 8001a70:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a72:	68d9      	ldr	r1, [r3, #12]
 8001a74:	484b      	ldr	r0, [pc, #300]	; (8001ba4 <HAL_ADC_Init+0x20c>)
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a76:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a78:	4001      	ands	r1, r0
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a7e:	0022      	movs	r2, r4
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a80:	6861      	ldr	r1, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a82:	323c      	adds	r2, #60	; 0x3c
 8001a84:	7812      	ldrb	r2, [r2, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a86:	0f8e      	lsrs	r6, r1, #30
 8001a88:	07b6      	lsls	r6, r6, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a8a:	4694      	mov	ip, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a8c:	4337      	orrs	r7, r6
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a8e:	2a01      	cmp	r2, #1
 8001a90:	d109      	bne.n	8001aa6 <HAL_ADC_Init+0x10e>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001a92:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001a94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a96:	4302      	orrs	r2, r0
 8001a98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a9a:	433a      	orrs	r2, r7
 8001a9c:	4302      	orrs	r2, r0
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4332      	orrs	r2, r6
 8001aa2:	4310      	orrs	r0, r2
 8001aa4:	0007      	movs	r7, r0
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	483f      	ldr	r0, [pc, #252]	; (8001ba8 <HAL_ADC_Init+0x210>)
 8001aaa:	4002      	ands	r2, r0
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001aac:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8001aae:	433a      	orrs	r2, r7
 8001ab0:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ab2:	004a      	lsls	r2, r1, #1
 8001ab4:	0852      	lsrs	r2, r2, #1
 8001ab6:	05c0      	lsls	r0, r0, #23
 8001ab8:	4282      	cmp	r2, r0
 8001aba:	d00c      	beq.n	8001ad6 <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0612      	lsls	r2, r2, #24
 8001ac0:	4291      	cmp	r1, r2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ac4:	4839      	ldr	r0, [pc, #228]	; (8001bac <HAL_ADC_Init+0x214>)
 8001ac6:	4e3a      	ldr	r6, [pc, #232]	; (8001bb0 <HAL_ADC_Init+0x218>)
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	4032      	ands	r2, r6
 8001acc:	26f0      	movs	r6, #240	; 0xf0
 8001ace:	03b6      	lsls	r6, r6, #14
 8001ad0:	4031      	ands	r1, r6
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	6001      	str	r1, [r0, #0]
  MODIFY_REG(ADCx->SMPR,
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	2670      	movs	r6, #112	; 0x70
 8001ada:	695a      	ldr	r2, [r3, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ade:	4382      	bics	r2, r0
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	6958      	ldr	r0, [r3, #20]
 8001ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ae8:	43b0      	bics	r0, r6
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	4302      	orrs	r2, r0
 8001aee:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001af0:	6922      	ldr	r2, [r4, #16]
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d134      	bne.n	8001b60 <HAL_ADC_Init+0x1c8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001af6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001af8:	3a10      	subs	r2, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001afa:	4302      	orrs	r2, r0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001afe:	2207      	movs	r2, #7
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4013      	ands	r3, r2
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b04:	4299      	cmp	r1, r3
 8001b06:	d13a      	bne.n	8001b7e <HAL_ADC_Init+0x1e6>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b0e:	3a04      	subs	r2, #4
 8001b10:	4393      	bics	r3, r2
 8001b12:	001a      	movs	r2, r3
 8001b14:	2301      	movs	r3, #1
 8001b16:	4313      	orrs	r3, r2
 8001b18:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8001b1a:	0028      	movs	r0, r5
 8001b1c:	b005      	add	sp, #20
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8001b20:	68b2      	ldr	r2, [r6, #8]
 8001b22:	4924      	ldr	r1, [pc, #144]	; (8001bb4 <HAL_ADC_Init+0x21c>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_ADC_Init+0x220>)
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <HAL_ADC_Init+0x224>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	f7fe fafa 	bl	8000128 <__udivsi3>
 8001b34:	3001      	adds	r0, #1
 8001b36:	0040      	lsls	r0, r0, #1
 8001b38:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 8001b3a:	9b03      	ldr	r3, [sp, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d100      	bne.n	8001b42 <HAL_ADC_Init+0x1aa>
 8001b40:	e743      	b.n	80019ca <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8001b42:	9b03      	ldr	r3, [sp, #12]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	e7f7      	b.n	8001b3a <HAL_ADC_Init+0x1a2>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b4a:	2680      	movs	r6, #128	; 0x80
 8001b4c:	03b6      	lsls	r6, r6, #14
 8001b4e:	e776      	b.n	8001a3e <HAL_ADC_Init+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	2020      	movs	r0, #32
 8001b52:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8001b54:	4330      	orrs	r0, r6
 8001b56:	65a0      	str	r0, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001b5a:	4301      	orrs	r1, r0
 8001b5c:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001b5e:	e77f      	b.n	8001a60 <HAL_ADC_Init+0xc8>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b60:	2080      	movs	r0, #128	; 0x80
 8001b62:	0380      	lsls	r0, r0, #14
 8001b64:	4282      	cmp	r2, r0
 8001b66:	d1ca      	bne.n	8001afe <HAL_ADC_Init+0x166>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b68:	201c      	movs	r0, #28
 8001b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6c:	69e2      	ldr	r2, [r4, #28]
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4002      	ands	r2, r0
 8001b74:	382c      	subs	r0, #44	; 0x2c
 8001b76:	4090      	lsls	r0, r2
 8001b78:	0002      	movs	r2, r0
 8001b7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b7c:	e7bd      	b.n	8001afa <HAL_ADC_Init+0x162>
      ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	2212      	movs	r2, #18
 8001b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001b84:	4393      	bics	r3, r2
 8001b86:	001a      	movs	r2, r3
 8001b88:	2310      	movs	r3, #16
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b90:	432b      	orrs	r3, r5
 8001b92:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8001b94:	e7c1      	b.n	8001b1a <HAL_ADC_Init+0x182>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001b98:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001b9e:	e7bc      	b.n	8001b1a <HAL_ADC_Init+0x182>
 8001ba0:	fffffefd 	.word	0xfffffefd
 8001ba4:	fffe0201 	.word	0xfffe0201
 8001ba8:	1ffffc02 	.word	0x1ffffc02
 8001bac:	40012708 	.word	0x40012708
 8001bb0:	ffc3ffff 	.word	0xffc3ffff
 8001bb4:	6fffffe8 	.word	0x6fffffe8
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	00030d40 	.word	0x00030d40

08001bc0 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
{
 8001bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc4:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8001bc6:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bc8:	0003      	movs	r3, r0
 8001bca:	3354      	adds	r3, #84	; 0x54
 8001bcc:	781a      	ldrb	r2, [r3, #0]
{
 8001bce:	0005      	movs	r5, r0
 8001bd0:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	2a01      	cmp	r2, #1
 8001bd6:	d100      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x1a>
 8001bd8:	e0c3      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1a2>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	701c      	strb	r4, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bde:	6828      	ldr	r0, [r5, #0]
 8001be0:	f7ff fed6 	bl	8001990 <LL_ADC_REG_IsConversionOngoing>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d000      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x2a>
 8001be8:	e0f9      	b.n	8001dde <HAL_ADC_ConfigChannel+0x21e>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	6873      	ldr	r3, [r6, #4]
 8001bee:	0612      	lsls	r2, r2, #24
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	4694      	mov	ip, r2
 8001bf6:	692f      	ldr	r7, [r5, #16]
 8001bf8:	9a01      	ldr	r2, [sp, #4]
 8001bfa:	439f      	bics	r7, r3
 8001bfc:	6833      	ldr	r3, [r6, #0]
 8001bfe:	2a02      	cmp	r2, #2
 8001c00:	d100      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x44>
 8001c02:	e0c2      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x1ca>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c04:	0359      	lsls	r1, r3, #13
 8001c06:	0b49      	lsrs	r1, r1, #13
 8001c08:	682a      	ldr	r2, [r5, #0]
 8001c0a:	9102      	str	r1, [sp, #8]
 8001c0c:	4567      	cmp	r7, ip
 8001c0e:	d10f      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c10:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8001c12:	4301      	orrs	r1, r0
 8001c14:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8001c16:	68b1      	ldr	r1, [r6, #8]
 8001c18:	6954      	ldr	r4, [r2, #20]
 8001c1a:	0218      	lsls	r0, r3, #8
 8001c1c:	4e73      	ldr	r6, [pc, #460]	; (8001dec <HAL_ADC_ConfigChannel+0x22c>)
 8001c1e:	4001      	ands	r1, r0
 8001c20:	4031      	ands	r1, r6
 8001c22:	4384      	bics	r4, r0
 8001c24:	4321      	orrs	r1, r4
 8001c26:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db64      	blt.n	8001cf6 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2000      	movs	r0, #0
}
 8001c2e:	e095      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c30:	211f      	movs	r1, #31
 8001c32:	9f01      	ldr	r7, [sp, #4]
 8001c34:	400f      	ands	r7, r1
 8001c36:	46bc      	mov	ip, r7
 8001c38:	270f      	movs	r7, #15
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	408f      	lsls	r7, r1
 8001c3e:	43f9      	mvns	r1, r7
 8001c40:	9103      	str	r1, [sp, #12]
 8001c42:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001c44:	43b9      	bics	r1, r7
 8001c46:	000f      	movs	r7, r1
 8001c48:	9902      	ldr	r1, [sp, #8]
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d114      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0xb8>
 8001c4e:	0e98      	lsrs	r0, r3, #26
 8001c50:	311f      	adds	r1, #31
 8001c52:	4008      	ands	r0, r1
 8001c54:	4661      	mov	r1, ip
 8001c56:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c58:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c5a:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c5c:	0889      	lsrs	r1, r1, #2
 8001c5e:	69e8      	ldr	r0, [r5, #28]
 8001c60:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c62:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c64:	4281      	cmp	r1, r0
 8001c66:	d8d6      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001c68:	4664      	mov	r4, ip
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	0f09      	lsrs	r1, r1, #28
 8001c6e:	40a1      	lsls	r1, r4
 8001c70:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001c72:	9c03      	ldr	r4, [sp, #12]
 8001c74:	4020      	ands	r0, r4
 8001c76:	e7cc      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c78:	4223      	tst	r3, r4
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	0020      	movs	r0, r4
 8001c80:	420b      	tst	r3, r1
 8001c82:	d1e7      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c84:	0008      	movs	r0, r1
 8001c86:	1849      	adds	r1, r1, r1
 8001c88:	420b      	tst	r3, r1
 8001c8a:	d1e3      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	0719      	lsls	r1, r3, #28
 8001c90:	d4e0      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c92:	3001      	adds	r0, #1
 8001c94:	06d9      	lsls	r1, r3, #27
 8001c96:	d4dd      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c98:	3001      	adds	r0, #1
 8001c9a:	0699      	lsls	r1, r3, #26
 8001c9c:	d4da      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001c9e:	3001      	adds	r0, #1
 8001ca0:	0659      	lsls	r1, r3, #25
 8001ca2:	d4d7      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	0619      	lsls	r1, r3, #24
 8001ca8:	d4d4      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001caa:	3001      	adds	r0, #1
 8001cac:	05d9      	lsls	r1, r3, #23
 8001cae:	d4d1      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	0599      	lsls	r1, r3, #22
 8001cb4:	d4ce      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cb6:	3001      	adds	r0, #1
 8001cb8:	0559      	lsls	r1, r3, #21
 8001cba:	d4cb      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	0519      	lsls	r1, r3, #20
 8001cc0:	d4c8      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	04d9      	lsls	r1, r3, #19
 8001cc6:	d4c5      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cc8:	3001      	adds	r0, #1
 8001cca:	0499      	lsls	r1, r3, #18
 8001ccc:	d4c2      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cce:	3001      	adds	r0, #1
 8001cd0:	0459      	lsls	r1, r3, #17
 8001cd2:	d4bf      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	0419      	lsls	r1, r3, #16
 8001cd8:	d4bc      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cda:	3001      	adds	r0, #1
 8001cdc:	03d9      	lsls	r1, r3, #15
 8001cde:	d4b9      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001ce0:	3001      	adds	r0, #1
 8001ce2:	0399      	lsls	r1, r3, #14
 8001ce4:	d4b6      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0018      	movs	r0, r3
 8001cea:	02c9      	lsls	r1, r1, #11
 8001cec:	4008      	ands	r0, r1
 8001cee:	420b      	tst	r3, r1
 8001cf0:	d0b0      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
 8001cf2:	2012      	movs	r0, #18
 8001cf4:	e7ae      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cf6:	24e0      	movs	r4, #224	; 0xe0
 8001cf8:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <HAL_ADC_ConfigChannel+0x230>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cfa:	483e      	ldr	r0, [pc, #248]	; (8001df4 <HAL_ADC_ConfigChannel+0x234>)
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	0464      	lsls	r4, r4, #17
 8001d00:	400c      	ands	r4, r1
 8001d02:	4283      	cmp	r3, r0
 8001d04:	d11a      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d0a:	4219      	tst	r1, r3
 8001d0c:	d18e      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d0e:	6811      	ldr	r1, [r2, #0]
 8001d10:	4839      	ldr	r0, [pc, #228]	; (8001df8 <HAL_ADC_ConfigChannel+0x238>)
 8001d12:	4001      	ands	r1, r0
 8001d14:	4321      	orrs	r1, r4
 8001d16:	4319      	orrs	r1, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <HAL_ADC_ConfigChannel+0x23c>)
 8001d1a:	6011      	str	r1, [r2, #0]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	4938      	ldr	r1, [pc, #224]	; (8001e00 <HAL_ADC_ConfigChannel+0x240>)
 8001d20:	f7fe fa02 	bl	8000128 <__udivsi3>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	200c      	movs	r0, #12
 8001d28:	4358      	muls	r0, r3
 8001d2a:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8001d2c:	9b05      	ldr	r3, [sp, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d100      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x174>
 8001d32:	e77b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
          {
            wait_loop_index--;
 8001d34:	9b05      	ldr	r3, [sp, #20]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	9305      	str	r3, [sp, #20]
 8001d3a:	e7f7      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d3c:	4831      	ldr	r0, [pc, #196]	; (8001e04 <HAL_ADC_ConfigChannel+0x244>)
 8001d3e:	4283      	cmp	r3, r0
 8001d40:	d111      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x1a6>
 8001d42:	2680      	movs	r6, #128	; 0x80
 8001d44:	0008      	movs	r0, r1
 8001d46:	0476      	lsls	r6, r6, #17
 8001d48:	4030      	ands	r0, r6
 8001d4a:	4231      	tst	r1, r6
 8001d4c:	d000      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x190>
 8001d4e:	e76d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
 8001d50:	6811      	ldr	r1, [r2, #0]
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_ADC_ConfigChannel+0x238>)
 8001d54:	4019      	ands	r1, r3
 8001d56:	4321      	orrs	r1, r4
 8001d58:	430e      	orrs	r6, r1
 8001d5a:	6016      	str	r6, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	3554      	adds	r5, #84	; 0x54
 8001d60:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 8001d62:	b007      	add	sp, #28
 8001d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <HAL_ADC_ConfigChannel+0x248>)
 8001d68:	4283      	cmp	r3, r0
 8001d6a:	d000      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x1ae>
 8001d6c:	e75e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	0008      	movs	r0, r1
 8001d72:	03db      	lsls	r3, r3, #15
 8001d74:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d76:	4219      	tst	r1, r3
 8001d78:	d000      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0x1bc>
 8001d7a:	e757      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	4e1e      	ldr	r6, [pc, #120]	; (8001df8 <HAL_ADC_ConfigChannel+0x238>)
 8001d80:	4031      	ands	r1, r6
 8001d82:	4321      	orrs	r1, r4
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	e7e8      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d8a:	4567      	cmp	r7, ip
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d8e:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d90:	0359      	lsls	r1, r3, #13
 8001d92:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001d94:	0b49      	lsrs	r1, r1, #13
 8001d96:	438a      	bics	r2, r1
 8001d98:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db00      	blt.n	8001da0 <HAL_ADC_ConfigChannel+0x1e0>
 8001d9e:	e745      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da0:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <HAL_ADC_ConfigChannel+0x234>)
 8001da4:	6811      	ldr	r1, [r2, #0]
 8001da6:	4283      	cmp	r3, r0
 8001da8:	d108      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dac:	6810      	ldr	r0, [r2, #0]
 8001dae:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db0:	4019      	ands	r1, r3
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_ADC_ConfigChannel+0x238>)
 8001db4:	4003      	ands	r3, r0
 8001db6:	4319      	orrs	r1, r3
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	e737      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dbc:	4811      	ldr	r0, [pc, #68]	; (8001e04 <HAL_ADC_ConfigChannel+0x244>)
 8001dbe:	4283      	cmp	r3, r0
 8001dc0:	d103      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	6810      	ldr	r0, [r2, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	e7f2      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dca:	480f      	ldr	r0, [pc, #60]	; (8001e08 <HAL_ADC_ConfigChannel+0x248>)
 8001dcc:	4283      	cmp	r3, r0
 8001dce:	d000      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x212>
 8001dd0:	e72c      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd2:	20c0      	movs	r0, #192	; 0xc0
 8001dd4:	0440      	lsls	r0, r0, #17
 8001dd6:	4001      	ands	r1, r0
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <HAL_ADC_ConfigChannel+0x238>)
 8001ddc:	e7ea      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	2320      	movs	r3, #32
 8001de0:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001de2:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	4313      	orrs	r3, r2
 8001de6:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001de8:	e7b8      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x19c>
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	07ffff00 	.word	0x07ffff00
 8001df0:	40012708 	.word	0x40012708
 8001df4:	b0001000 	.word	0xb0001000
 8001df8:	fe3fffff 	.word	0xfe3fffff
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	00030d40 	.word	0x00030d40
 8001e04:	b8004000 	.word	0xb8004000
 8001e08:	b4002000 	.word	0xb4002000

08001e0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b530      	push	{r4, r5, lr}
 8001e0e:	25ff      	movs	r5, #255	; 0xff
 8001e10:	2403      	movs	r4, #3
 8001e12:	002a      	movs	r2, r5
 8001e14:	4004      	ands	r4, r0
 8001e16:	00e4      	lsls	r4, r4, #3
 8001e18:	40a2      	lsls	r2, r4
 8001e1a:	0189      	lsls	r1, r1, #6
 8001e1c:	4029      	ands	r1, r5
 8001e1e:	43d2      	mvns	r2, r2
 8001e20:	40a1      	lsls	r1, r4
 8001e22:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	db0a      	blt.n	8001e3e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	24c0      	movs	r4, #192	; 0xc0
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_NVIC_SetPriority+0x4c>)
 8001e2c:	0880      	lsrs	r0, r0, #2
 8001e2e:	0080      	lsls	r0, r0, #2
 8001e30:	18c0      	adds	r0, r0, r3
 8001e32:	00a4      	lsls	r4, r4, #2
 8001e34:	5903      	ldr	r3, [r0, r4]
 8001e36:	401a      	ands	r2, r3
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	5101      	str	r1, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001e3c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3e:	200f      	movs	r0, #15
 8001e40:	4003      	ands	r3, r0
 8001e42:	3b08      	subs	r3, #8
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_NVIC_SetPriority+0x50>)
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	181b      	adds	r3, r3, r0
 8001e4c:	69d8      	ldr	r0, [r3, #28]
 8001e4e:	4002      	ands	r2, r0
 8001e50:	4311      	orrs	r1, r2
 8001e52:	61d9      	str	r1, [r3, #28]
 8001e54:	e7f2      	b.n	8001e3c <HAL_NVIC_SetPriority+0x30>
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	1e43      	subs	r3, r0, #1
 8001e64:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d20d      	bcs.n	8001e88 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e74:	6a03      	ldr	r3, [r0, #32]
 8001e76:	0609      	lsls	r1, r1, #24
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001e88:	4770      	bx	lr
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	e000e010 	.word	0xe000e010
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001e94:	2300      	movs	r3, #0
{
 8001e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e98:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	680a      	ldr	r2, [r1, #0]
 8001e9c:	0014      	movs	r4, r2
 8001e9e:	40dc      	lsrs	r4, r3
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001ea2:	b005      	add	sp, #20
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	0014      	movs	r4, r2
 8001eaa:	409d      	lsls	r5, r3
 8001eac:	402c      	ands	r4, r5
 8001eae:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001eb0:	422a      	tst	r2, r5
 8001eb2:	d100      	bne.n	8001eb6 <HAL_GPIO_Init+0x22>
 8001eb4:	e08e      	b.n	8001fd4 <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb6:	684a      	ldr	r2, [r1, #4]
 8001eb8:	005e      	lsls	r6, r3, #1
 8001eba:	4694      	mov	ip, r2
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4664      	mov	r4, ip
 8001ec0:	4022      	ands	r2, r4
 8001ec2:	2403      	movs	r4, #3
 8001ec4:	40b4      	lsls	r4, r6
 8001ec6:	43e4      	mvns	r4, r4
 8001ec8:	9402      	str	r4, [sp, #8]
 8001eca:	1e54      	subs	r4, r2, #1
 8001ecc:	2c01      	cmp	r4, #1
 8001ece:	d82a      	bhi.n	8001f26 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001ed0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	9c02      	ldr	r4, [sp, #8]
 8001ed4:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed6:	68cc      	ldr	r4, [r1, #12]
 8001ed8:	40b4      	lsls	r4, r6
 8001eda:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001edc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ede:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee2:	43ac      	bics	r4, r5
 8001ee4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee6:	4664      	mov	r4, ip
 8001ee8:	0924      	lsrs	r4, r4, #4
 8001eea:	403c      	ands	r4, r7
 8001eec:	409c      	lsls	r4, r3
 8001eee:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001ef0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001ef2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ef4:	9c02      	ldr	r4, [sp, #8]
 8001ef6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef8:	688c      	ldr	r4, [r1, #8]
 8001efa:	40b4      	lsls	r4, r6
 8001efc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001efe:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	2a02      	cmp	r2, #2
 8001f02:	d112      	bne.n	8001f2a <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001f04:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f06:	2507      	movs	r5, #7
 8001f08:	00a4      	lsls	r4, r4, #2
 8001f0a:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001f0c:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0e:	9403      	str	r4, [sp, #12]
 8001f10:	240f      	movs	r4, #15
 8001f12:	401d      	ands	r5, r3
 8001f14:	00ad      	lsls	r5, r5, #2
 8001f16:	40ac      	lsls	r4, r5
 8001f18:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1a:	690c      	ldr	r4, [r1, #16]
 8001f1c:	40ac      	lsls	r4, r5
 8001f1e:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001f20:	9c03      	ldr	r4, [sp, #12]
 8001f22:	6227      	str	r7, [r4, #32]
 8001f24:	e001      	b.n	8001f2a <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	2a03      	cmp	r2, #3
 8001f28:	d1e3      	bne.n	8001ef2 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001f2a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f2c:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2e:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f30:	4025      	ands	r5, r4
 8001f32:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f34:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001f36:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f38:	24c0      	movs	r4, #192	; 0xc0
 8001f3a:	4662      	mov	r2, ip
 8001f3c:	02a4      	lsls	r4, r4, #10
 8001f3e:	4222      	tst	r2, r4
 8001f40:	d048      	beq.n	8001fd4 <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f44:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001f46:	089c      	lsrs	r4, r3, #2
 8001f48:	00a4      	lsls	r4, r4, #2
 8001f4a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	401d      	ands	r5, r3
 8001f50:	00ed      	lsls	r5, r5, #3
 8001f52:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f54:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001f56:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f58:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f5a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	42b8      	cmp	r0, r7
 8001f60:	d00c      	beq.n	8001f7c <HAL_GPIO_Init+0xe8>
 8001f62:	4f1e      	ldr	r7, [pc, #120]	; (8001fdc <HAL_GPIO_Init+0x148>)
 8001f64:	3201      	adds	r2, #1
 8001f66:	42b8      	cmp	r0, r7
 8001f68:	d008      	beq.n	8001f7c <HAL_GPIO_Init+0xe8>
 8001f6a:	4f1d      	ldr	r7, [pc, #116]	; (8001fe0 <HAL_GPIO_Init+0x14c>)
 8001f6c:	3201      	adds	r2, #1
 8001f6e:	42b8      	cmp	r0, r7
 8001f70:	d004      	beq.n	8001f7c <HAL_GPIO_Init+0xe8>
 8001f72:	4f1c      	ldr	r7, [pc, #112]	; (8001fe4 <HAL_GPIO_Init+0x150>)
 8001f74:	3201      	adds	r2, #1
 8001f76:	42b8      	cmp	r0, r7
 8001f78:	d000      	beq.n	8001f7c <HAL_GPIO_Init+0xe8>
 8001f7a:	3202      	adds	r2, #2
 8001f7c:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f7e:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f80:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001f82:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8001f84:	4c14      	ldr	r4, [pc, #80]	; (8001fd8 <HAL_GPIO_Init+0x144>)
        temp &= ~(iocurrent);
 8001f86:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR1;
 8001f88:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8001f8a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001f8c:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001f8e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f90:	02ff      	lsls	r7, r7, #11
 8001f92:	d401      	bmi.n	8001f98 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 8001f94:	0035      	movs	r5, r6
 8001f96:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f98:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001f9a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001f9c:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001f9e:	9d01      	ldr	r5, [sp, #4]
 8001fa0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa2:	02bf      	lsls	r7, r7, #10
 8001fa4:	d401      	bmi.n	8001faa <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001fa6:	0035      	movs	r5, r6
 8001fa8:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001faa:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8001fac:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8001fae:	4c0e      	ldr	r4, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x154>)
          temp |= iocurrent;
 8001fb0:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->EMR1;
 8001fb2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001fb4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb6:	03bf      	lsls	r7, r7, #14
 8001fb8:	d401      	bmi.n	8001fbe <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 8001fba:	0035      	movs	r5, r6
 8001fbc:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fbe:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001fc0:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8001fc2:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8001fc4:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->IMR1;
 8001fc6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001fc8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fca:	03ff      	lsls	r7, r7, #15
 8001fcc:	d401      	bmi.n	8001fd2 <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 8001fce:	4015      	ands	r5, r2
 8001fd0:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8001fd2:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	e760      	b.n	8001e9a <HAL_GPIO_Init+0x6>
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	50000400 	.word	0x50000400
 8001fe0:	50000800 	.word	0x50000800
 8001fe4:	50000c00 	.word	0x50000c00
 8001fe8:	40021808 	.word	0x40021808
 8001fec:	40021804 	.word	0x40021804

08001ff0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ff8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ffa:	e7fc      	b.n	8001ff6 <HAL_GPIO_WritePin+0x6>

08001ffc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ffc:	6803      	ldr	r3, [r0, #0]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	0792      	lsls	r2, r2, #30
 8002002:	d501      	bpl.n	8002008 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002008:	2201      	movs	r2, #1
 800200a:	6999      	ldr	r1, [r3, #24]
 800200c:	4211      	tst	r1, r2
 800200e:	d102      	bne.n	8002016 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002010:	6999      	ldr	r1, [r3, #24]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]
  }
}
 8002016:	4770      	bx	lr

08002018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002018:	b530      	push	{r4, r5, lr}
 800201a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800201c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800201e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002020:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002022:	0589      	lsls	r1, r1, #22
 8002024:	431a      	orrs	r2, r3
 8002026:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <I2C_TransferConfig+0x28>)
 800202a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800202c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800202e:	0d64      	lsrs	r4, r4, #21
 8002030:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002032:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002034:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002036:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002038:	432a      	orrs	r2, r5
 800203a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800203c:	bd30      	pop	{r4, r5, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	03ff63ff 	.word	0x03ff63ff

08002044 <I2C_IsErrorOccurred>:
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b085      	sub	sp, #20
 8002048:	9202      	str	r2, [sp, #8]
  uint32_t itflag   = hi2c->Instance->ISR;
 800204a:	6802      	ldr	r2, [r0, #0]
{
 800204c:	9101      	str	r1, [sp, #4]
  uint32_t itflag   = hi2c->Instance->ISR;
 800204e:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002050:	2310      	movs	r3, #16
 8002052:	000f      	movs	r7, r1
{
 8002054:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2500      	movs	r5, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002058:	401f      	ands	r7, r3
 800205a:	4219      	tst	r1, r3
 800205c:	d008      	beq.n	8002070 <I2C_IsErrorOccurred+0x2c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800205e:	2620      	movs	r6, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	61d3      	str	r3, [r2, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	4232      	tst	r2, r6
 8002068:	d16e      	bne.n	8002148 <I2C_IsErrorOccurred+0x104>
 800206a:	2d00      	cmp	r5, #0
 800206c:	d02f      	beq.n	80020ce <I2C_IsErrorOccurred+0x8a>
    error_code |= HAL_I2C_ERROR_AF;
 800206e:	2704      	movs	r7, #4
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002070:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8002072:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002074:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8002076:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002078:	420a      	tst	r2, r1
 800207a:	d002      	beq.n	8002082 <I2C_IsErrorOccurred+0x3e>
    error_code |= HAL_I2C_ERROR_BERR;
 800207c:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800207e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002080:	432f      	orrs	r7, r5
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	00c9      	lsls	r1, r1, #3
 8002086:	420a      	tst	r2, r1
 8002088:	d003      	beq.n	8002092 <I2C_IsErrorOccurred+0x4e>
    error_code |= HAL_I2C_ERROR_OVR;
 800208a:	2008      	movs	r0, #8
    status = HAL_ERROR;
 800208c:	2501      	movs	r5, #1
    error_code |= HAL_I2C_ERROR_OVR;
 800208e:	4307      	orrs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002090:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0089      	lsls	r1, r1, #2
 8002096:	420a      	tst	r2, r1
 8002098:	d05c      	beq.n	8002154 <I2C_IsErrorOccurred+0x110>
    error_code |= HAL_I2C_ERROR_ARLO;
 800209a:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800209c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 800209e:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80020a0:	0020      	movs	r0, r4
 80020a2:	f7ff ffab 	bl	8001ffc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	492d      	ldr	r1, [pc, #180]	; (8002160 <I2C_IsErrorOccurred+0x11c>)
 80020aa:	6853      	ldr	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 80020ac:	2501      	movs	r5, #1
    I2C_RESET_CR2(hi2c);
 80020ae:	400b      	ands	r3, r1
 80020b0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80020b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80020b6:	431f      	orrs	r7, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	0023      	movs	r3, r4
 80020ba:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80020bc:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020be:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	0022      	movs	r2, r4
 80020c2:	2300      	movs	r3, #0
 80020c4:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80020c6:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80020ca:	7023      	strb	r3, [r4, #0]
 80020cc:	e044      	b.n	8002158 <I2C_IsErrorOccurred+0x114>
      if (Timeout != HAL_MAX_DELAY)
 80020ce:	9a01      	ldr	r2, [sp, #4]
 80020d0:	3201      	adds	r2, #1
 80020d2:	d0c7      	beq.n	8002064 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7ff fc38 	bl	8001948 <HAL_GetTick>
 80020d8:	9b02      	ldr	r3, [sp, #8]
 80020da:	1ac0      	subs	r0, r0, r3
 80020dc:	9b01      	ldr	r3, [sp, #4]
 80020de:	4298      	cmp	r0, r3
 80020e0:	d801      	bhi.n	80020e6 <I2C_IsErrorOccurred+0xa2>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1bd      	bne.n	8002062 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 80020e6:	0022      	movs	r2, r4
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020e8:	2780      	movs	r7, #128	; 0x80
          tmp2 = hi2c->Mode;
 80020ea:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ec:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80020ee:	9203      	str	r2, [sp, #12]
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020f0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80020f2:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	023f      	lsls	r7, r7, #8
          tmp2 = hi2c->Mode;
 80020f8:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020fa:	423a      	tst	r2, r7
 80020fc:	d00b      	beq.n	8002116 <I2C_IsErrorOccurred+0xd2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002102:	4210      	tst	r0, r2
 8002104:	d107      	bne.n	8002116 <I2C_IsErrorOccurred+0xd2>
              (tmp1 != I2C_CR2_STOP) && \
 8002106:	2920      	cmp	r1, #32
 8002108:	d005      	beq.n	8002116 <I2C_IsErrorOccurred+0xd2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002110:	f7ff fc1a 	bl	8001948 <HAL_GetTick>
 8002114:	9002      	str	r0, [sp, #8]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	001f      	movs	r7, r3
 800211c:	4037      	ands	r7, r6
 800211e:	4233      	tst	r3, r6
 8002120:	d19f      	bne.n	8002062 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002122:	f7ff fc11 	bl	8001948 <HAL_GetTick>
 8002126:	9b02      	ldr	r3, [sp, #8]
 8002128:	1ac0      	subs	r0, r0, r3
 800212a:	2819      	cmp	r0, #25
 800212c:	d9f3      	bls.n	8002116 <I2C_IsErrorOccurred+0xd2>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8002130:	2501      	movs	r5, #1
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	4333      	orrs	r3, r6
 8002134:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002136:	0023      	movs	r3, r4
 8002138:	3341      	adds	r3, #65	; 0x41
 800213a:	701e      	strb	r6, [r3, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	701f      	strb	r7, [r3, #0]
              __HAL_UNLOCK(hi2c);
 8002140:	0023      	movs	r3, r4
 8002142:	3340      	adds	r3, #64	; 0x40
 8002144:	701f      	strb	r7, [r3, #0]
              status = HAL_ERROR;
 8002146:	e7e6      	b.n	8002116 <I2C_IsErrorOccurred+0xd2>
    error_code |= HAL_I2C_ERROR_AF;
 8002148:	2704      	movs	r7, #4
    if (status == HAL_OK)
 800214a:	2d00      	cmp	r5, #0
 800214c:	d190      	bne.n	8002070 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	61de      	str	r6, [r3, #28]
    status = HAL_ERROR;
 8002150:	3501      	adds	r5, #1
 8002152:	e78d      	b.n	8002070 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8002154:	2d00      	cmp	r5, #0
 8002156:	d1a3      	bne.n	80020a0 <I2C_IsErrorOccurred+0x5c>
}
 8002158:	0028      	movs	r0, r5
 800215a:	b005      	add	sp, #20
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	fe00e800 	.word	0xfe00e800

08002164 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	0004      	movs	r4, r0
 8002168:	000d      	movs	r5, r1
 800216a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800216c:	2702      	movs	r7, #2
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	423b      	tst	r3, r7
 8002174:	d001      	beq.n	800217a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800217a:	0032      	movs	r2, r6
 800217c:	0029      	movs	r1, r5
 800217e:	0020      	movs	r0, r4
 8002180:	f7ff ff60 	bl	8002044 <I2C_IsErrorOccurred>
 8002184:	2800      	cmp	r0, #0
 8002186:	d115      	bne.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002188:	1c6b      	adds	r3, r5, #1
 800218a:	d0f0      	beq.n	800216e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7ff fbdc 	bl	8001948 <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	42a8      	cmp	r0, r5
 8002194:	d801      	bhi.n	800219a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d1e9      	bne.n	800216e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800219a:	2220      	movs	r2, #32
 800219c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800219e:	4313      	orrs	r3, r2
 80021a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	0023      	movs	r3, r4
 80021a4:	3341      	adds	r3, #65	; 0x41
 80021a6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	0022      	movs	r2, r4
 80021aa:	2300      	movs	r3, #0
 80021ac:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80021ae:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80021b2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80021b4:	2001      	movs	r0, #1
 80021b6:	e7df      	b.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080021b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	0004      	movs	r4, r0
 80021bc:	000d      	movs	r5, r1
 80021be:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c0:	2720      	movs	r7, #32
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	423b      	tst	r3, r7
 80021c8:	d001      	beq.n	80021ce <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80021ca:	2000      	movs	r0, #0
}
 80021cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ce:	0032      	movs	r2, r6
 80021d0:	0029      	movs	r1, r5
 80021d2:	0020      	movs	r0, r4
 80021d4:	f7ff ff36 	bl	8002044 <I2C_IsErrorOccurred>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d113      	bne.n	8002204 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021dc:	f7ff fbb4 	bl	8001948 <HAL_GetTick>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	42a8      	cmp	r0, r5
 80021e4:	d801      	bhi.n	80021ea <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80021e6:	2d00      	cmp	r5, #0
 80021e8:	d1eb      	bne.n	80021c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	2220      	movs	r2, #32
 80021ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021ee:	4313      	orrs	r3, r2
 80021f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	0023      	movs	r3, r4
 80021f4:	3341      	adds	r3, #65	; 0x41
 80021f6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	0022      	movs	r2, r4
 80021fa:	2300      	movs	r3, #0
 80021fc:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80021fe:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002202:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
 8002206:	e7e1      	b.n	80021cc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002208 <I2C_WaitOnFlagUntilTimeout>:
{
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	0004      	movs	r4, r0
 800220c:	000e      	movs	r6, r1
 800220e:	0017      	movs	r7, r2
 8002210:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	6993      	ldr	r3, [r2, #24]
 8002216:	4033      	ands	r3, r6
 8002218:	1b9b      	subs	r3, r3, r6
 800221a:	4259      	negs	r1, r3
 800221c:	414b      	adcs	r3, r1
 800221e:	42bb      	cmp	r3, r7
 8002220:	d001      	beq.n	8002226 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002222:	2000      	movs	r0, #0
 8002224:	e017      	b.n	8002256 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002226:	1c6b      	adds	r3, r5, #1
 8002228:	d0f4      	beq.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7ff fb8d 	bl	8001948 <HAL_GetTick>
 800222e:	9b06      	ldr	r3, [sp, #24]
 8002230:	1ac0      	subs	r0, r0, r3
 8002232:	42a8      	cmp	r0, r5
 8002234:	d801      	bhi.n	800223a <I2C_WaitOnFlagUntilTimeout+0x32>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d1eb      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223a:	2220      	movs	r2, #32
 800223c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800223e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	4313      	orrs	r3, r2
 8002242:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002244:	0023      	movs	r3, r4
 8002246:	3341      	adds	r3, #65	; 0x41
 8002248:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	0022      	movs	r2, r4
 800224c:	2300      	movs	r3, #0
 800224e:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002250:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002254:	7023      	strb	r3, [r4, #0]
}
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002258 <HAL_I2C_Init>:
{
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800225e:	2c00      	cmp	r4, #0
 8002260:	d03f      	beq.n	80022e2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002262:	0025      	movs	r5, r4
 8002264:	3541      	adds	r5, #65	; 0x41
 8002266:	782b      	ldrb	r3, [r5, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800226e:	0023      	movs	r3, r4
 8002270:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002272:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002274:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002276:	f7fe fbe3 	bl	8000a40 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800227a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800227c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800227e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002280:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002282:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68a6      	ldr	r6, [r4, #8]
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800228c:	6861      	ldr	r1, [r4, #4]
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_I2C_Init+0xa0>)
 8002290:	400a      	ands	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_I2C_Init+0xa4>)
 8002298:	4011      	ands	r1, r2
 800229a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800229c:	2801      	cmp	r0, #1
 800229e:	d121      	bne.n	80022e4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0209      	lsls	r1, r1, #8
 80022a4:	4331      	orrs	r1, r6
 80022a6:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a8:	6858      	ldr	r0, [r3, #4]
 80022aa:	4915      	ldr	r1, [pc, #84]	; (8002300 <HAL_I2C_Init+0xa8>)
 80022ac:	4301      	orrs	r1, r0
 80022ae:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b0:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b4:	400a      	ands	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b8:	6961      	ldr	r1, [r4, #20]
 80022ba:	6922      	ldr	r2, [r4, #16]
 80022bc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022be:	69a1      	ldr	r1, [r4, #24]
 80022c0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c2:	430a      	orrs	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022c6:	6a21      	ldr	r1, [r4, #32]
 80022c8:	69e2      	ldr	r2, [r4, #28]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80022ce:	2201      	movs	r2, #1
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	3442      	adds	r4, #66	; 0x42
 80022e0:	7020      	strb	r0, [r4, #0]
}
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022e4:	2184      	movs	r1, #132	; 0x84
 80022e6:	0209      	lsls	r1, r1, #8
 80022e8:	4331      	orrs	r1, r6
 80022ea:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ec:	2802      	cmp	r0, #2
 80022ee:	d1db      	bne.n	80022a8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0109      	lsls	r1, r1, #4
 80022f4:	6059      	str	r1, [r3, #4]
 80022f6:	e7d7      	b.n	80022a8 <HAL_I2C_Init+0x50>
 80022f8:	f0ffffff 	.word	0xf0ffffff
 80022fc:	ffff7fff 	.word	0xffff7fff
 8002300:	02008000 	.word	0x02008000

08002304 <HAL_I2C_Master_Transmit>:
{
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002306:	b087      	sub	sp, #28
 8002308:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	0003      	movs	r3, r0
 800230c:	3341      	adds	r3, #65	; 0x41
{
 800230e:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	781b      	ldrb	r3, [r3, #0]
{
 8002314:	0004      	movs	r4, r0
 8002316:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002318:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	2b20      	cmp	r3, #32
 800231c:	d114      	bne.n	8002348 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 800231e:	0023      	movs	r3, r4
 8002320:	3340      	adds	r3, #64	; 0x40
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	2a01      	cmp	r2, #1
 8002326:	d00f      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x44>
 8002328:	2601      	movs	r6, #1
 800232a:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800232c:	f7ff fb0c 	bl	8001948 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002330:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002332:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002334:	9000      	str	r0, [sp, #0]
 8002336:	2319      	movs	r3, #25
 8002338:	0032      	movs	r2, r6
 800233a:	0020      	movs	r0, r4
 800233c:	0209      	lsls	r1, r1, #8
 800233e:	f7ff ff63 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 8002342:	2800      	cmp	r0, #0
 8002344:	d002      	beq.n	800234c <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
}
 8002348:	b007      	add	sp, #28
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800234c:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800234e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002350:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002352:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002354:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002356:	3b11      	subs	r3, #17
 8002358:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800235a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800235e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002360:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002362:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002364:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002366:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_I2C_Master_Transmit+0x11c>)
 800236a:	2aff      	cmp	r2, #255	; 0xff
 800236c:	d920      	bls.n	80023b0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002378:	0039      	movs	r1, r7
 800237a:	0020      	movs	r0, r4
 800237c:	f7ff fe4c 	bl	8002018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002380:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	002a      	movs	r2, r5
 8002384:	0020      	movs	r0, r4
 8002386:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002388:	2b00      	cmp	r3, #0
 800238a:	d119      	bne.n	80023c0 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	f7ff ff14 	bl	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002390:	2800      	cmp	r0, #0
 8002392:	d1d8      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	2120      	movs	r1, #32
 8002396:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002398:	4d22      	ldr	r5, [pc, #136]	; (8002424 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	402a      	ands	r2, r5
 80023a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80023a4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	3341      	adds	r3, #65	; 0x41
 80023a8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023aa:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80023ac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80023ae:	e7cb      	b.n	8002348 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80023b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023b2:	b292      	uxth	r2, r2
 80023b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	049b      	lsls	r3, r3, #18
 80023be:	e7db      	b.n	8002378 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	f7ff fed0 	bl	8002164 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d1be      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80023ce:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80023d2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80023d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023de:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023e2:	b292      	uxth	r2, r2
 80023e4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0ca      	beq.n	8002380 <HAL_I2C_Master_Transmit+0x7c>
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d1c8      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0020      	movs	r0, r4
 80023f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023f4:	9500      	str	r5, [sp, #0]
 80023f6:	f7ff ff07 	bl	8002208 <I2C_WaitOnFlagUntilTimeout>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d1a3      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	d906      	bls.n	8002412 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002404:	23ff      	movs	r3, #255	; 0xff
 8002406:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	9000      	str	r0, [sp, #0]
 800240e:	045b      	lsls	r3, r3, #17
 8002410:	e7b2      	b.n	8002378 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002412:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002414:	b292      	uxth	r2, r2
 8002416:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	9000      	str	r0, [sp, #0]
 800241c:	e7cd      	b.n	80023ba <HAL_I2C_Master_Transmit+0xb6>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	80002000 	.word	0x80002000
 8002424:	fe00e800 	.word	0xfe00e800

08002428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002428:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242a:	0004      	movs	r4, r0
 800242c:	3441      	adds	r4, #65	; 0x41
 800242e:	7822      	ldrb	r2, [r4, #0]
{
 8002430:	0003      	movs	r3, r0
 8002432:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002434:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002436:	b2d6      	uxtb	r6, r2
 8002438:	2a20      	cmp	r2, #32
 800243a:	d118      	bne.n	800246e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800243c:	001d      	movs	r5, r3
 800243e:	3540      	adds	r5, #64	; 0x40
 8002440:	782a      	ldrb	r2, [r5, #0]
 8002442:	2a01      	cmp	r2, #1
 8002444:	d013      	beq.n	800246e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002446:	2224      	movs	r2, #36	; 0x24
 8002448:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3a23      	subs	r2, #35	; 0x23
 800244e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002450:	4807      	ldr	r0, [pc, #28]	; (8002470 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002452:	4391      	bics	r1, r2
 8002454:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800245a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800245c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	4339      	orrs	r1, r7
 8002462:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800246a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800246c:	7028      	strb	r0, [r5, #0]
  }
}
 800246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002470:	ffffefff 	.word	0xffffefff

08002474 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	0002      	movs	r2, r0
{
 8002476:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002478:	3241      	adds	r2, #65	; 0x41
 800247a:	7814      	ldrb	r4, [r2, #0]
{
 800247c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002480:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	2c20      	cmp	r4, #32
 8002484:	d117      	bne.n	80024b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002486:	001c      	movs	r4, r3
 8002488:	3440      	adds	r4, #64	; 0x40
 800248a:	7826      	ldrb	r6, [r4, #0]
 800248c:	2e01      	cmp	r6, #1
 800248e:	d012      	beq.n	80024b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	3022      	adds	r0, #34	; 0x22
 8002492:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3823      	subs	r0, #35	; 0x23
 8002498:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800249a:	4f07      	ldr	r7, [pc, #28]	; (80024b8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800249c:	4386      	bics	r6, r0
 800249e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80024a0:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80024a2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80024a4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80024a6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80024a8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	4308      	orrs	r0, r1
 80024ae:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80024b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80024b4:	7020      	strb	r0, [r4, #0]
  }
}
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	fffff0ff 	.word	0xfffff0ff

080024bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024bc:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024be:	4c11      	ldr	r4, [pc, #68]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80024c0:	4911      	ldr	r1, [pc, #68]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80024c2:	6823      	ldr	r3, [r4, #0]
{
 80024c4:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024c6:	400b      	ands	r3, r1
 80024c8:	4303      	orrs	r3, r0
 80024ca:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024cc:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80024ce:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d10e      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x50>)
 80024d8:	490d      	ldr	r1, [pc, #52]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	2306      	movs	r3, #6
 80024de:	4358      	muls	r0, r3
 80024e0:	f7fd fe22 	bl	8000128 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e4:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024e6:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	6961      	ldr	r1, [r4, #20]
 80024ec:	0008      	movs	r0, r1
 80024ee:	4010      	ands	r0, r2
 80024f0:	4211      	tst	r1, r2
 80024f2:	d100      	bne.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80024f4:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80024fa:	3b01      	subs	r3, #1
 80024fc:	e7f5      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
 8002500:	e7f8      	b.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x38>
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40007000 	.word	0x40007000
 8002508:	fffff9ff 	.word	0xfffff9ff
 800250c:	20000010 	.word	0x20000010
 8002510:	000f4240 	.word	0x000f4240

08002514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	0004      	movs	r4, r0
 8002518:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251a:	2800      	cmp	r0, #0
 800251c:	d023      	beq.n	8002566 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	6803      	ldr	r3, [r0, #0]
 8002520:	07db      	lsls	r3, r3, #31
 8002522:	d410      	bmi.n	8002546 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	079b      	lsls	r3, r3, #30
 8002528:	d45e      	bmi.n	80025e8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	071b      	lsls	r3, r3, #28
 800252e:	d500      	bpl.n	8002532 <HAL_RCC_OscConfig+0x1e>
 8002530:	e0c3      	b.n	80026ba <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	075b      	lsls	r3, r3, #29
 8002536:	d500      	bpl.n	800253a <HAL_RCC_OscConfig+0x26>
 8002538:	e0f5      	b.n	8002726 <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800253a:	69e2      	ldr	r2, [r4, #28]
 800253c:	2a00      	cmp	r2, #0
 800253e:	d000      	beq.n	8002542 <HAL_RCC_OscConfig+0x2e>
 8002540:	e17c      	b.n	800283c <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002542:	2000      	movs	r0, #0
 8002544:	e029      	b.n	800259a <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4db0      	ldr	r5, [pc, #704]	; (800280c <HAL_RCC_OscConfig+0x2f8>)
 800254a:	68ab      	ldr	r3, [r5, #8]
 800254c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002550:	2b10      	cmp	r3, #16
 8002552:	d10a      	bne.n	800256a <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002554:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002556:	0793      	lsls	r3, r2, #30
 8002558:	d109      	bne.n	800256e <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	039b      	lsls	r3, r3, #14
 800255e:	d5e1      	bpl.n	8002524 <HAL_RCC_OscConfig+0x10>
 8002560:	6863      	ldr	r3, [r4, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1de      	bne.n	8002524 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002566:	2001      	movs	r0, #1
 8002568:	e017      	b.n	800259a <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800256a:	2b08      	cmp	r3, #8
 800256c:	d0f5      	beq.n	800255a <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	0252      	lsls	r2, r2, #9
 8002574:	4293      	cmp	r3, r2
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x8a>
 8002578:	682a      	ldr	r2, [r5, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800257e:	f7ff f9e3 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002582:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002584:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	02bf      	lsls	r7, r7, #10
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	423b      	tst	r3, r7
 800258c:	d1ca      	bne.n	8002524 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258e:	f7ff f9db 	bl	8001948 <HAL_GetTick>
 8002592:	1b80      	subs	r0, r0, r6
 8002594:	2864      	cmp	r0, #100	; 0x64
 8002596:	d9f7      	bls.n	8002588 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
}
 800259a:	b005      	add	sp, #20
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	21a0      	movs	r1, #160	; 0xa0
 80025a0:	02c9      	lsls	r1, r1, #11
 80025a2:	428b      	cmp	r3, r1
 80025a4:	d108      	bne.n	80025b8 <HAL_RCC_OscConfig+0xa4>
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	6829      	ldr	r1, [r5, #0]
 80025aa:	02db      	lsls	r3, r3, #11
 80025ac:	430b      	orrs	r3, r1
 80025ae:	602b      	str	r3, [r5, #0]
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b6:	e7e2      	b.n	800257e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	682a      	ldr	r2, [r5, #0]
 80025ba:	4995      	ldr	r1, [pc, #596]	; (8002810 <HAL_RCC_OscConfig+0x2fc>)
 80025bc:	400a      	ands	r2, r1
 80025be:	602a      	str	r2, [r5, #0]
 80025c0:	682a      	ldr	r2, [r5, #0]
 80025c2:	4994      	ldr	r1, [pc, #592]	; (8002814 <HAL_RCC_OscConfig+0x300>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1d8      	bne.n	800257e <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80025cc:	f7ff f9bc 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80025d2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d4:	02bf      	lsls	r7, r7, #10
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	423b      	tst	r3, r7
 80025da:	d0a3      	beq.n	8002524 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff f9b4 	bl	8001948 <HAL_GetTick>
 80025e0:	1b80      	subs	r0, r0, r6
 80025e2:	2864      	cmp	r0, #100	; 0x64
 80025e4:	d9f7      	bls.n	80025d6 <HAL_RCC_OscConfig+0xc2>
 80025e6:	e7d7      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	2338      	movs	r3, #56	; 0x38
 80025ea:	4d88      	ldr	r5, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x2f8>)
 80025ec:	68aa      	ldr	r2, [r5, #8]
 80025ee:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d128      	bne.n	8002648 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f6:	2103      	movs	r1, #3
 80025f8:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025fa:	2a02      	cmp	r2, #2
 80025fc:	d126      	bne.n	800264c <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fe:	682a      	ldr	r2, [r5, #0]
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	d502      	bpl.n	800260a <HAL_RCC_OscConfig+0xf6>
 8002604:	68e2      	ldr	r2, [r4, #12]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d0ad      	beq.n	8002566 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	6869      	ldr	r1, [r5, #4]
 800260c:	6962      	ldr	r2, [r4, #20]
 800260e:	4882      	ldr	r0, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x304>)
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	4001      	ands	r1, r0
 8002614:	430a      	orrs	r2, r1
 8002616:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	4a7f      	ldr	r2, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x308>)
 8002620:	4013      	ands	r3, r2
 8002622:	6922      	ldr	r2, [r4, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	4a7d      	ldr	r2, [pc, #500]	; (8002820 <HAL_RCC_OscConfig+0x30c>)
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	0f5b      	lsrs	r3, r3, #29
 8002630:	40da      	lsrs	r2, r3
 8002632:	0013      	movs	r3, r2
 8002634:	4a7b      	ldr	r2, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x310>)
 8002636:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002638:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <HAL_RCC_OscConfig+0x314>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	f7ff f93c 	bl	80018b8 <HAL_InitTick>
 8002640:	2800      	cmp	r0, #0
 8002642:	d100      	bne.n	8002646 <HAL_RCC_OscConfig+0x132>
 8002644:	e771      	b.n	800252a <HAL_RCC_OscConfig+0x16>
 8002646:	e78e      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0d8      	beq.n	80025fe <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264c:	68e3      	ldr	r3, [r4, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	4a71      	ldr	r2, [pc, #452]	; (800281c <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002656:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002658:	4013      	ands	r3, r2
 800265a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800265c:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800265e:	4313      	orrs	r3, r2
 8002660:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	682a      	ldr	r2, [r5, #0]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4313      	orrs	r3, r2
 800266a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800266c:	f7ff f96c 	bl	8001948 <HAL_GetTick>
 8002670:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	423b      	tst	r3, r7
 8002676:	d007      	beq.n	8002688 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	686a      	ldr	r2, [r5, #4]
 800267a:	6963      	ldr	r3, [r4, #20]
 800267c:	4966      	ldr	r1, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x304>)
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	400a      	ands	r2, r1
 8002682:	4313      	orrs	r3, r2
 8002684:	606b      	str	r3, [r5, #4]
 8002686:	e750      	b.n	800252a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7ff f95e 	bl	8001948 <HAL_GetTick>
 800268c:	1b80      	subs	r0, r0, r6
 800268e:	2802      	cmp	r0, #2
 8002690:	d9ef      	bls.n	8002672 <HAL_RCC_OscConfig+0x15e>
 8002692:	e781      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002698:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 800269a:	4013      	ands	r3, r2
 800269c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800269e:	f7ff f953 	bl	8001948 <HAL_GetTick>
 80026a2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a4:	00ff      	lsls	r7, r7, #3
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	423b      	tst	r3, r7
 80026aa:	d100      	bne.n	80026ae <HAL_RCC_OscConfig+0x19a>
 80026ac:	e73d      	b.n	800252a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff f94b 	bl	8001948 <HAL_GetTick>
 80026b2:	1b80      	subs	r0, r0, r6
 80026b4:	2802      	cmp	r0, #2
 80026b6:	d9f6      	bls.n	80026a6 <HAL_RCC_OscConfig+0x192>
 80026b8:	e76e      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026ba:	2138      	movs	r1, #56	; 0x38
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x2f8>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	001d      	movs	r5, r3
 80026c2:	400a      	ands	r2, r1
 80026c4:	2a18      	cmp	r2, #24
 80026c6:	d108      	bne.n	80026da <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	079b      	lsls	r3, r3, #30
 80026cc:	d400      	bmi.n	80026d0 <HAL_RCC_OscConfig+0x1bc>
 80026ce:	e730      	b.n	8002532 <HAL_RCC_OscConfig+0x1e>
 80026d0:	69a3      	ldr	r3, [r4, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d000      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1c4>
 80026d6:	e72c      	b.n	8002532 <HAL_RCC_OscConfig+0x1e>
 80026d8:	e745      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026da:	69a2      	ldr	r2, [r4, #24]
 80026dc:	2301      	movs	r3, #1
 80026de:	2a00      	cmp	r2, #0
 80026e0:	d010      	beq.n	8002704 <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 80026e2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80026e6:	4313      	orrs	r3, r2
 80026e8:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80026ea:	f7ff f92d 	bl	8001948 <HAL_GetTick>
 80026ee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80026f2:	423b      	tst	r3, r7
 80026f4:	d000      	beq.n	80026f8 <HAL_RCC_OscConfig+0x1e4>
 80026f6:	e71c      	b.n	8002532 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff f926 	bl	8001948 <HAL_GetTick>
 80026fc:	1b80      	subs	r0, r0, r6
 80026fe:	2802      	cmp	r0, #2
 8002700:	d9f6      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1dc>
 8002702:	e749      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 8002704:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002706:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002708:	439a      	bics	r2, r3
 800270a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800270c:	f7ff f91c 	bl	8001948 <HAL_GetTick>
 8002710:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002712:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002714:	423b      	tst	r3, r7
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x206>
 8002718:	e70b      	b.n	8002532 <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271a:	f7ff f915 	bl	8001948 <HAL_GetTick>
 800271e:	1b80      	subs	r0, r0, r6
 8002720:	2802      	cmp	r0, #2
 8002722:	d9f6      	bls.n	8002712 <HAL_RCC_OscConfig+0x1fe>
 8002724:	e738      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002726:	2138      	movs	r1, #56	; 0x38
 8002728:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_RCC_OscConfig+0x2f8>)
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	001d      	movs	r5, r3
 800272e:	400a      	ands	r2, r1
 8002730:	2a20      	cmp	r2, #32
 8002732:	d108      	bne.n	8002746 <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	079b      	lsls	r3, r3, #30
 8002738:	d400      	bmi.n	800273c <HAL_RCC_OscConfig+0x228>
 800273a:	e6fe      	b.n	800253a <HAL_RCC_OscConfig+0x26>
 800273c:	68a3      	ldr	r3, [r4, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d000      	beq.n	8002744 <HAL_RCC_OscConfig+0x230>
 8002742:	e6fa      	b.n	800253a <HAL_RCC_OscConfig+0x26>
 8002744:	e70f      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002746:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002748:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 800274e:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002750:	4213      	tst	r3, r2
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002756:	4313      	orrs	r3, r2
 8002758:	63eb      	str	r3, [r5, #60]	; 0x3c
 800275a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800275c:	4013      	ands	r3, r2
 800275e:	9303      	str	r3, [sp, #12]
 8002760:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002766:	2780      	movs	r7, #128	; 0x80
 8002768:	4e31      	ldr	r6, [pc, #196]	; (8002830 <HAL_RCC_OscConfig+0x31c>)
 800276a:	007f      	lsls	r7, r7, #1
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	423b      	tst	r3, r7
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	68a3      	ldr	r3, [r4, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d122      	bne.n	80027be <HAL_RCC_OscConfig+0x2aa>
 8002778:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800277a:	4313      	orrs	r3, r2
 800277c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 800277e:	f7ff f8e3 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002784:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002786:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002788:	423b      	tst	r3, r7
 800278a:	d038      	beq.n	80027fe <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 800278c:	9b00      	ldr	r3, [sp, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d000      	beq.n	8002794 <HAL_RCC_OscConfig+0x280>
 8002792:	e6d2      	b.n	800253a <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x320>)
 8002798:	4013      	ands	r3, r2
 800279a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800279c:	e6cd      	b.n	800253a <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279e:	6833      	ldr	r3, [r6, #0]
 80027a0:	433b      	orrs	r3, r7
 80027a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80027a4:	f7ff f8d0 	bl	8001948 <HAL_GetTick>
 80027a8:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	6833      	ldr	r3, [r6, #0]
 80027ac:	423b      	tst	r3, r7
 80027ae:	d1e0      	bne.n	8002772 <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7ff f8ca 	bl	8001948 <HAL_GetTick>
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	1ac0      	subs	r0, r0, r3
 80027b8:	2802      	cmp	r0, #2
 80027ba:	d9f6      	bls.n	80027aa <HAL_RCC_OscConfig+0x296>
 80027bc:	e6ec      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2bc>
 80027c4:	3b01      	subs	r3, #1
 80027c6:	4313      	orrs	r3, r2
 80027c8:	65eb      	str	r3, [r5, #92]	; 0x5c
 80027ca:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80027cc:	2301      	movs	r3, #1
 80027ce:	e7d4      	b.n	800277a <HAL_RCC_OscConfig+0x266>
 80027d0:	2101      	movs	r1, #1
 80027d2:	438a      	bics	r2, r1
 80027d4:	65ea      	str	r2, [r5, #92]	; 0x5c
 80027d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80027d8:	3103      	adds	r1, #3
 80027da:	438a      	bics	r2, r1
 80027dc:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1cd      	bne.n	800277e <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 80027e2:	f7ff f8b1 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80027e8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ea:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80027ec:	423b      	tst	r3, r7
 80027ee:	d0cd      	beq.n	800278c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7ff f8aa 	bl	8001948 <HAL_GetTick>
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x324>)
 80027f6:	1b80      	subs	r0, r0, r6
 80027f8:	4298      	cmp	r0, r3
 80027fa:	d9f6      	bls.n	80027ea <HAL_RCC_OscConfig+0x2d6>
 80027fc:	e6cc      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff f8a3 	bl	8001948 <HAL_GetTick>
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_RCC_OscConfig+0x324>)
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	4298      	cmp	r0, r3
 8002808:	d9bd      	bls.n	8002786 <HAL_RCC_OscConfig+0x272>
 800280a:	e6c5      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
 800280c:	40021000 	.word	0x40021000
 8002810:	fffeffff 	.word	0xfffeffff
 8002814:	fffbffff 	.word	0xfffbffff
 8002818:	ffff80ff 	.word	0xffff80ff
 800281c:	ffffc7ff 	.word	0xffffc7ff
 8002820:	00f42400 	.word	0x00f42400
 8002824:	20000010 	.word	0x20000010
 8002828:	20000018 	.word	0x20000018
 800282c:	fffffeff 	.word	0xfffffeff
 8002830:	40007000 	.word	0x40007000
 8002834:	efffffff 	.word	0xefffffff
 8002838:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283c:	2038      	movs	r0, #56	; 0x38
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x424>)
 8002840:	6899      	ldr	r1, [r3, #8]
 8002842:	001d      	movs	r5, r3
 8002844:	4001      	ands	r1, r0
 8002846:	2910      	cmp	r1, #16
 8002848:	d050      	beq.n	80028ec <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_DISABLE();
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	493b      	ldr	r1, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x428>)
 800284e:	400b      	ands	r3, r1
 8002850:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002852:	2a02      	cmp	r2, #2
 8002854:	d135      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3ae>
        tickstart = HAL_GetTick();
 8002856:	f7ff f877 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800285c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285e:	04bf      	lsls	r7, r7, #18
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	423b      	tst	r3, r7
 8002864:	d127      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002866:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002868:	6a23      	ldr	r3, [r4, #32]
 800286a:	68ea      	ldr	r2, [r5, #12]
 800286c:	430b      	orrs	r3, r1
 800286e:	4934      	ldr	r1, [pc, #208]	; (8002940 <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002872:	400a      	ands	r2, r1
 8002874:	4313      	orrs	r3, r2
 8002876:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002878:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800287a:	4313      	orrs	r3, r2
 800287c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800287e:	4313      	orrs	r3, r2
 8002880:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002882:	0212      	lsls	r2, r2, #8
 8002884:	4313      	orrs	r3, r2
 8002886:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	682a      	ldr	r2, [r5, #0]
 800288c:	045b      	lsls	r3, r3, #17
 800288e:	4313      	orrs	r3, r2
 8002890:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	68ea      	ldr	r2, [r5, #12]
 8002896:	055b      	lsls	r3, r3, #21
 8002898:	4313      	orrs	r3, r2
 800289a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800289c:	f7ff f854 	bl	8001948 <HAL_GetTick>
 80028a0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	682b      	ldr	r3, [r5, #0]
 80028a4:	4233      	tst	r3, r6
 80028a6:	d000      	beq.n	80028aa <HAL_RCC_OscConfig+0x396>
 80028a8:	e64b      	b.n	8002542 <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f84d 	bl	8001948 <HAL_GetTick>
 80028ae:	1b00      	subs	r0, r0, r4
 80028b0:	2802      	cmp	r0, #2
 80028b2:	d9f6      	bls.n	80028a2 <HAL_RCC_OscConfig+0x38e>
 80028b4:	e670      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7ff f847 	bl	8001948 <HAL_GetTick>
 80028ba:	1b80      	subs	r0, r0, r6
 80028bc:	2802      	cmp	r0, #2
 80028be:	d9cf      	bls.n	8002860 <HAL_RCC_OscConfig+0x34c>
 80028c0:	e66a      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80028c2:	f7ff f841 	bl	8001948 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80028c8:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ca:	04b6      	lsls	r6, r6, #18
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	4030      	ands	r0, r6
 80028d2:	4233      	tst	r3, r6
 80028d4:	d104      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80028d6:	68eb      	ldr	r3, [r5, #12]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_RCC_OscConfig+0x430>)
 80028da:	4013      	ands	r3, r2
 80028dc:	60eb      	str	r3, [r5, #12]
 80028de:	e65c      	b.n	800259a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f832 	bl	8001948 <HAL_GetTick>
 80028e4:	1b00      	subs	r0, r0, r4
 80028e6:	2802      	cmp	r0, #2
 80028e8:	d9f0      	bls.n	80028cc <HAL_RCC_OscConfig+0x3b8>
 80028ea:	e655      	b.n	8002598 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	2a01      	cmp	r2, #1
 80028ee:	d100      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3de>
 80028f0:	e639      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80028f4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	6a21      	ldr	r1, [r4, #32]
 80028f8:	401a      	ands	r2, r3
 80028fa:	428a      	cmp	r2, r1
 80028fc:	d000      	beq.n	8002900 <HAL_RCC_OscConfig+0x3ec>
 80028fe:	e632      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002900:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002904:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	428a      	cmp	r2, r1
 8002908:	d000      	beq.n	800290c <HAL_RCC_OscConfig+0x3f8>
 800290a:	e62c      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290c:	21fe      	movs	r1, #254	; 0xfe
 800290e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002910:	01c9      	lsls	r1, r1, #7
 8002912:	4019      	ands	r1, r3
 8002914:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002916:	4291      	cmp	r1, r2
 8002918:	d000      	beq.n	800291c <HAL_RCC_OscConfig+0x408>
 800291a:	e624      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800291c:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800291e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002920:	0392      	lsls	r2, r2, #14
 8002922:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002924:	428a      	cmp	r2, r1
 8002926:	d000      	beq.n	800292a <HAL_RCC_OscConfig+0x416>
 8002928:	e61d      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800292a:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800292c:	0f5b      	lsrs	r3, r3, #29
 800292e:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002930:	4293      	cmp	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x422>
 8002934:	e605      	b.n	8002542 <HAL_RCC_OscConfig+0x2e>
 8002936:	e616      	b.n	8002566 <HAL_RCC_OscConfig+0x52>
 8002938:	40021000 	.word	0x40021000
 800293c:	feffffff 	.word	0xfeffffff
 8002940:	1fc1808c 	.word	0x1fc1808c
 8002944:	effefffc 	.word	0xeffefffc

08002948 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002948:	2338      	movs	r3, #56	; 0x38
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800294c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	6891      	ldr	r1, [r2, #8]
 8002950:	0014      	movs	r4, r2
 8002952:	4219      	tst	r1, r3
 8002954:	d105      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002956:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002958:	481b      	ldr	r0, [pc, #108]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800295a:	049b      	lsls	r3, r3, #18
 800295c:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800295e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002960:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002962:	6891      	ldr	r1, [r2, #8]
 8002964:	4019      	ands	r1, r3
 8002966:	2908      	cmp	r1, #8
 8002968:	d027      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296a:	6891      	ldr	r1, [r2, #8]
 800296c:	4019      	ands	r1, r3
 800296e:	2910      	cmp	r1, #16
 8002970:	d117      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002972:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002974:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002976:	43db      	mvns	r3, r3
 8002978:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800297a:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297c:	0649      	lsls	r1, r1, #25
 800297e:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002980:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002982:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002984:	4015      	ands	r5, r2
    switch (pllsource)
 8002986:	079b      	lsls	r3, r3, #30
 8002988:	d109      	bne.n	800299e <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800298a:	4810      	ldr	r0, [pc, #64]	; (80029cc <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800298c:	f7fd fbcc 	bl	8000128 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002990:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002992:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002994:	0f49      	lsrs	r1, r1, #29
 8002996:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002998:	f7fd fbc6 	bl	8000128 <__udivsi3>
  return sysclockfreq;
 800299c:	e7e0      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x80>)
 80029a0:	e7f4      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029a2:	6891      	ldr	r1, [r2, #8]
 80029a4:	4019      	ands	r1, r3
 80029a6:	2920      	cmp	r1, #32
 80029a8:	d009      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029aa:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 80029ac:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b18      	cmp	r3, #24
 80029b2:	d1d5      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80029b4:	20fa      	movs	r0, #250	; 0xfa
 80029b6:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80029b8:	e7d2      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80029ba:	4804      	ldr	r0, [pc, #16]	; (80029cc <HAL_RCC_GetSysClockFreq+0x84>)
 80029bc:	e7d0      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80029be:	2080      	movs	r0, #128	; 0x80
 80029c0:	0200      	lsls	r0, r0, #8
 80029c2:	e7cd      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x18>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	02dc6c00 	.word	0x02dc6c00

080029d0 <HAL_RCC_ClockConfig>:
{
 80029d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029d2:	0005      	movs	r5, r0
 80029d4:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
}
 80029dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029de:	2707      	movs	r7, #7
 80029e0:	4c4a      	ldr	r4, [pc, #296]	; (8002b0c <HAL_RCC_ClockConfig+0x13c>)
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	403b      	ands	r3, r7
 80029e6:	428b      	cmp	r3, r1
 80029e8:	d32a      	bcc.n	8002a40 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ea:	6829      	ldr	r1, [r5, #0]
 80029ec:	078b      	lsls	r3, r1, #30
 80029ee:	d43b      	bmi.n	8002a68 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f0:	07cb      	lsls	r3, r1, #31
 80029f2:	d448      	bmi.n	8002a86 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	2707      	movs	r7, #7
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	403b      	ands	r3, r7
 80029fa:	42b3      	cmp	r3, r6
 80029fc:	d90a      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	43bb      	bics	r3, r7
 8002a02:	4333      	orrs	r3, r6
 8002a04:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002a06:	f7fe ff9f 	bl	8001948 <HAL_GetTick>
 8002a0a:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	403b      	ands	r3, r7
 8002a10:	42b3      	cmp	r3, r6
 8002a12:	d16b      	bne.n	8002aec <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	4c3e      	ldr	r4, [pc, #248]	; (8002b10 <HAL_RCC_ClockConfig+0x140>)
 8002a18:	075b      	lsls	r3, r3, #29
 8002a1a:	d46f      	bmi.n	8002afc <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a1c:	f7ff ff94 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	4a3c      	ldr	r2, [pc, #240]	; (8002b14 <HAL_RCC_ClockConfig+0x144>)
 8002a24:	051b      	lsls	r3, r3, #20
 8002a26:	0f1b      	lsrs	r3, r3, #28
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	589b      	ldr	r3, [r3, r2]
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	4013      	ands	r3, r2
 8002a30:	40d8      	lsrs	r0, r3
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_ClockConfig+0x148>)
 8002a34:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_ClockConfig+0x14c>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f7fe ff3d 	bl	80018b8 <HAL_InitTick>
 8002a3e:	e7cd      	b.n	80029dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	43bb      	bics	r3, r7
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002a48:	f7fe ff7e 	bl	8001948 <HAL_GetTick>
 8002a4c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	403b      	ands	r3, r7
 8002a52:	42b3      	cmp	r3, r6
 8002a54:	d0c9      	beq.n	80029ea <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a56:	f7fe ff77 	bl	8001948 <HAL_GetTick>
 8002a5a:	9b01      	ldr	r3, [sp, #4]
 8002a5c:	1ac0      	subs	r0, r0, r3
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_RCC_ClockConfig+0x150>)
 8002a60:	4298      	cmp	r0, r3
 8002a62:	d9f4      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
 8002a66:	e7b9      	b.n	80029dc <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_RCC_ClockConfig+0x140>)
 8002a6a:	074b      	lsls	r3, r1, #29
 8002a6c:	d504      	bpl.n	8002a78 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a6e:	23e0      	movs	r3, #224	; 0xe0
 8002a70:	6890      	ldr	r0, [r2, #8]
 8002a72:	01db      	lsls	r3, r3, #7
 8002a74:	4303      	orrs	r3, r0
 8002a76:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	6893      	ldr	r3, [r2, #8]
 8002a7a:	482a      	ldr	r0, [pc, #168]	; (8002b24 <HAL_RCC_ClockConfig+0x154>)
 8002a7c:	4003      	ands	r3, r0
 8002a7e:	68a8      	ldr	r0, [r5, #8]
 8002a80:	4303      	orrs	r3, r0
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	e7b4      	b.n	80029f0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	686a      	ldr	r2, [r5, #4]
 8002a88:	4f21      	ldr	r7, [pc, #132]	; (8002b10 <HAL_RCC_ClockConfig+0x140>)
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	039b      	lsls	r3, r3, #14
 8002a92:	d5a2      	bpl.n	80029da <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a94:	2107      	movs	r1, #7
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	438b      	bics	r3, r1
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002a9e:	f7fe ff53 	bl	8001948 <HAL_GetTick>
 8002aa2:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa4:	2338      	movs	r3, #56	; 0x38
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	686b      	ldr	r3, [r5, #4]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d0a0      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab2:	f7fe ff49 	bl	8001948 <HAL_GetTick>
 8002ab6:	9b01      	ldr	r3, [sp, #4]
 8002ab8:	1ac0      	subs	r0, r0, r3
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x150>)
 8002abc:	4298      	cmp	r0, r3
 8002abe:	d9f1      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0xd4>
 8002ac0:	e7d0      	b.n	8002a64 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	2a02      	cmp	r2, #2
 8002ac4:	d103      	bne.n	8002ace <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	d4e3      	bmi.n	8002a94 <HAL_RCC_ClockConfig+0xc4>
 8002acc:	e785      	b.n	80029da <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ace:	2a00      	cmp	r2, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	055b      	lsls	r3, r3, #21
 8002ad6:	d4dd      	bmi.n	8002a94 <HAL_RCC_ClockConfig+0xc4>
 8002ad8:	e77f      	b.n	80029da <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ada:	2302      	movs	r3, #2
 8002adc:	2a03      	cmp	r2, #3
 8002ade:	d103      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae2:	4219      	tst	r1, r3
 8002ae4:	d1d6      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xc4>
 8002ae6:	e778      	b.n	80029da <HAL_RCC_ClockConfig+0xa>
 8002ae8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002aea:	e7fa      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe ff2c 	bl	8001948 <HAL_GetTick>
 8002af0:	9b01      	ldr	r3, [sp, #4]
 8002af2:	1ac0      	subs	r0, r0, r3
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x150>)
 8002af6:	4298      	cmp	r0, r3
 8002af8:	d988      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
 8002afa:	e7b3      	b.n	8002a64 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	68a3      	ldr	r3, [r4, #8]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_RCC_ClockConfig+0x158>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	68ea      	ldr	r2, [r5, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60a3      	str	r3, [r4, #8]
 8002b08:	e788      	b.n	8002a1c <HAL_RCC_ClockConfig+0x4c>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08003430 	.word	0x08003430
 8002b18:	20000010 	.word	0x20000010
 8002b1c:	20000018 	.word	0x20000018
 8002b20:	00001388 	.word	0x00001388
 8002b24:	fffff0ff 	.word	0xfffff0ff
 8002b28:	ffff8fff 	.word	0xffff8fff

08002b2c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b2e:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	045b      	lsls	r3, r3, #17
 8002b34:	0f5b      	lsrs	r3, r3, #29
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	589b      	ldr	r3, [r3, r2]
 8002b3a:	221f      	movs	r2, #31
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	6810      	ldr	r0, [r2, #0]
 8002b42:	40d8      	lsrs	r0, r3
}
 8002b44:	4770      	bx	lr
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08003470 	.word	0x08003470
 8002b50:	20000010 	.word	0x20000010

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b58:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b5a:	2000      	movs	r0, #0
{
 8002b5c:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b5e:	039b      	lsls	r3, r3, #14
 8002b60:	d53b      	bpl.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	4c4d      	ldr	r4, [pc, #308]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002b66:	0552      	lsls	r2, r2, #21
 8002b68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6c:	4213      	tst	r3, r2
 8002b6e:	d108      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b72:	4313      	orrs	r3, r2
 8002b74:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b78:	4013      	ands	r3, r2
 8002b7a:	9303      	str	r3, [sp, #12]
 8002b7c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b82:	2780      	movs	r7, #128	; 0x80
 8002b84:	4e46      	ldr	r6, [pc, #280]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b86:	007f      	lsls	r7, r7, #1
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	433b      	orrs	r3, r7
 8002b8c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fedb 	bl	8001948 <HAL_GetTick>
 8002b92:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	6833      	ldr	r3, [r6, #0]
 8002b96:	423b      	tst	r3, r7
 8002b98:	d011      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b9c:	23c0      	movs	r3, #192	; 0xc0
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4e40      	ldr	r6, [pc, #256]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ba4:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba6:	421a      	tst	r2, r3
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002baa:	69ab      	ldr	r3, [r5, #24]
 8002bac:	4299      	cmp	r1, r3
 8002bae:	d156      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb2:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb4:	401e      	ands	r6, r3
 8002bb6:	69ab      	ldr	r3, [r5, #24]
 8002bb8:	431e      	orrs	r6, r3
 8002bba:	65e6      	str	r6, [r4, #92]	; 0x5c
 8002bbc:	e006      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe fec3 	bl	8001948 <HAL_GetTick>
 8002bc2:	9b01      	ldr	r3, [sp, #4]
 8002bc4:	1ac0      	subs	r0, r0, r3
 8002bc6:	2802      	cmp	r0, #2
 8002bc8:	d9e4      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002bca:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bcc:	9b00      	ldr	r3, [sp, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d103      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bd4:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bda:	682a      	ldr	r2, [r5, #0]
 8002bdc:	07d3      	lsls	r3, r2, #31
 8002bde:	d506      	bpl.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be0:	2403      	movs	r4, #3
 8002be2:	492e      	ldr	r1, [pc, #184]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002be4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002be6:	43a3      	bics	r3, r4
 8002be8:	686c      	ldr	r4, [r5, #4]
 8002bea:	4323      	orrs	r3, r4
 8002bec:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bee:	0793      	lsls	r3, r2, #30
 8002bf0:	d506      	bpl.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf2:	240c      	movs	r4, #12
 8002bf4:	4929      	ldr	r1, [pc, #164]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002bf6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002bf8:	43a3      	bics	r3, r4
 8002bfa:	68ac      	ldr	r4, [r5, #8]
 8002bfc:	4323      	orrs	r3, r4
 8002bfe:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	0693      	lsls	r3, r2, #26
 8002c02:	d506      	bpl.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c04:	4925      	ldr	r1, [pc, #148]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c06:	4c29      	ldr	r4, [pc, #164]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002c08:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002c0a:	4023      	ands	r3, r4
 8002c0c:	68ec      	ldr	r4, [r5, #12]
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c12:	0453      	lsls	r3, r2, #17
 8002c14:	d50f      	bpl.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c16:	4921      	ldr	r1, [pc, #132]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c18:	696c      	ldr	r4, [r5, #20]
 8002c1a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	4323      	orrs	r3, r4
 8002c22:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	d104      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	68cc      	ldr	r4, [r1, #12]
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	4323      	orrs	r3, r4
 8002c34:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c36:	0513      	lsls	r3, r2, #20
 8002c38:	d50f      	bpl.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002c3c:	4c1c      	ldr	r4, [pc, #112]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c3e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002c40:	6929      	ldr	r1, [r5, #16]
 8002c42:	4023      	ands	r3, r4
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	01db      	lsls	r3, r3, #7
 8002c4c:	4299      	cmp	r1, r3
 8002c4e:	d104      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	68d1      	ldr	r1, [r2, #12]
 8002c54:	025b      	lsls	r3, r3, #9
 8002c56:	430b      	orrs	r3, r1
 8002c58:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002c5a:	b005      	add	sp, #20
 8002c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c5e:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c62:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c64:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	4303      	orrs	r3, r0
 8002c6a:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c6e:	4811      	ldr	r0, [pc, #68]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c70:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4003      	ands	r3, r0
 8002c74:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8002c76:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c78:	07d3      	lsls	r3, r2, #31
 8002c7a:	d599      	bpl.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fe64 	bl	8001948 <HAL_GetTick>
 8002c80:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c82:	2202      	movs	r2, #2
 8002c84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c86:	4213      	tst	r3, r2
 8002c88:	d000      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002c8a:	e791      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe fe5c 	bl	8001948 <HAL_GetTick>
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c92:	1bc0      	subs	r0, r0, r7
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d9f4      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8002c98:	e797      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	fffffcff 	.word	0xfffffcff
 8002ca8:	efffffff 	.word	0xefffffff
 8002cac:	ffffcfff 	.word	0xffffcfff
 8002cb0:	ffff3fff 	.word	0xffff3fff
 8002cb4:	fffeffff 	.word	0xfffeffff
 8002cb8:	00001388 	.word	0x00001388

08002cbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <TIM_Base_SetConfig+0x74>)
{
 8002cbe:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002cc0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc2:	4290      	cmp	r0, r2
 8002cc4:	d002      	beq.n	8002ccc <TIM_Base_SetConfig+0x10>
 8002cc6:	4c1b      	ldr	r4, [pc, #108]	; (8002d34 <TIM_Base_SetConfig+0x78>)
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	2470      	movs	r4, #112	; 0x70
 8002cce:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	684c      	ldr	r4, [r1, #4]
 8002cd2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd4:	4290      	cmp	r0, r2
 8002cd6:	d00e      	beq.n	8002cf6 <TIM_Base_SetConfig+0x3a>
 8002cd8:	4c16      	ldr	r4, [pc, #88]	; (8002d34 <TIM_Base_SetConfig+0x78>)
 8002cda:	42a0      	cmp	r0, r4
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x3a>
 8002cde:	4c16      	ldr	r4, [pc, #88]	; (8002d38 <TIM_Base_SetConfig+0x7c>)
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d008      	beq.n	8002cf6 <TIM_Base_SetConfig+0x3a>
 8002ce4:	4c15      	ldr	r4, [pc, #84]	; (8002d3c <TIM_Base_SetConfig+0x80>)
 8002ce6:	42a0      	cmp	r0, r4
 8002ce8:	d005      	beq.n	8002cf6 <TIM_Base_SetConfig+0x3a>
 8002cea:	4c15      	ldr	r4, [pc, #84]	; (8002d40 <TIM_Base_SetConfig+0x84>)
 8002cec:	42a0      	cmp	r0, r4
 8002cee:	d002      	beq.n	8002cf6 <TIM_Base_SetConfig+0x3a>
 8002cf0:	4c14      	ldr	r4, [pc, #80]	; (8002d44 <TIM_Base_SetConfig+0x88>)
 8002cf2:	42a0      	cmp	r0, r4
 8002cf4:	d103      	bne.n	8002cfe <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	4c14      	ldr	r4, [pc, #80]	; (8002d48 <TIM_Base_SetConfig+0x8c>)
 8002cf8:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	68cc      	ldr	r4, [r1, #12]
 8002cfc:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cfe:	2480      	movs	r4, #128	; 0x80
 8002d00:	43a3      	bics	r3, r4
 8002d02:	694c      	ldr	r4, [r1, #20]
 8002d04:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002d06:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d08:	688b      	ldr	r3, [r1, #8]
 8002d0a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	680b      	ldr	r3, [r1, #0]
 8002d0e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d008      	beq.n	8002d26 <TIM_Base_SetConfig+0x6a>
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <TIM_Base_SetConfig+0x80>)
 8002d16:	4298      	cmp	r0, r3
 8002d18:	d005      	beq.n	8002d26 <TIM_Base_SetConfig+0x6a>
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <TIM_Base_SetConfig+0x84>)
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d002      	beq.n	8002d26 <TIM_Base_SetConfig+0x6a>
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <TIM_Base_SetConfig+0x88>)
 8002d22:	4298      	cmp	r0, r3
 8002d24:	d101      	bne.n	8002d2a <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d26:	690b      	ldr	r3, [r1, #16]
 8002d28:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	6143      	str	r3, [r0, #20]
}
 8002d2e:	bd10      	pop	{r4, pc}
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40002000 	.word	0x40002000
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40014800 	.word	0x40014800
 8002d48:	fffffcff 	.word	0xfffffcff

08002d4c <HAL_TIM_Encoder_Init>:
{
 8002d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d4e:	0004      	movs	r4, r0
 8002d50:	000e      	movs	r6, r1
    return HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
  if (htim == NULL)
 8002d54:	2c00      	cmp	r4, #0
 8002d56:	d048      	beq.n	8002dea <HAL_TIM_Encoder_Init+0x9e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d58:	0025      	movs	r5, r4
 8002d5a:	353d      	adds	r5, #61	; 0x3d
 8002d5c:	782b      	ldrb	r3, [r5, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_TIM_Encoder_Init+0x24>
    htim->Lock = HAL_UNLOCKED;
 8002d64:	0023      	movs	r3, r4
 8002d66:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002d68:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002d6a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Encoder_MspInit(htim);
 8002d6c:	f7fd ff7c 	bl	8000c68 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d72:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	702b      	strb	r3, [r5, #0]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d76:	c901      	ldmia	r1!, {r0}
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_TIM_Encoder_Init+0xa0>)
 8002d7a:	6883      	ldr	r3, [r0, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d80:	f7ff ff9c 	bl	8002cbc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	6822      	ldr	r2, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002d86:	6833      	ldr	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	6891      	ldr	r1, [r2, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002d8a:	6997      	ldr	r7, [r2, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8002d8c:	4319      	orrs	r1, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_TIM_Encoder_Init+0xa4>)
  tmpsmcr |= sConfig->EncoderMode;
 8002d90:	9101      	str	r1, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d92:	401f      	ands	r7, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d94:	69b3      	ldr	r3, [r6, #24]
 8002d96:	68b1      	ldr	r1, [r6, #8]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	433b      	orrs	r3, r7
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d9e:	4f15      	ldr	r7, [pc, #84]	; (8002df4 <HAL_TIM_Encoder_Init+0xa8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002da0:	6931      	ldr	r1, [r6, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002da2:	401f      	ands	r7, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002da4:	69f3      	ldr	r3, [r6, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002da6:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002da8:	021b      	lsls	r3, r3, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002daa:	430b      	orrs	r3, r1
 8002dac:	68f1      	ldr	r1, [r6, #12]
  tmpccer = htim->Instance->CCER;
 8002dae:	6a10      	ldr	r0, [r2, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6a31      	ldr	r1, [r6, #32]
 8002db4:	0309      	lsls	r1, r1, #12
 8002db6:	430b      	orrs	r3, r1
 8002db8:	433b      	orrs	r3, r7
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002dba:	27aa      	movs	r7, #170	; 0xaa
 8002dbc:	43b8      	bics	r0, r7
 8002dbe:	0007      	movs	r7, r0
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002dc0:	6971      	ldr	r1, [r6, #20]
 8002dc2:	6876      	ldr	r6, [r6, #4]
 8002dc4:	0108      	lsls	r0, r1, #4
 8002dc6:	4330      	orrs	r0, r6
  htim->Instance->SMCR = tmpsmcr;
 8002dc8:	9901      	ldr	r1, [sp, #4]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002dca:	4338      	orrs	r0, r7
  htim->Instance->SMCR = tmpsmcr;
 8002dcc:	6091      	str	r1, [r2, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002dce:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8002dd0:	6210      	str	r0, [r2, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd2:	0022      	movs	r2, r4
 8002dd4:	2301      	movs	r3, #1
  return HAL_OK;
 8002dd6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	3248      	adds	r2, #72	; 0x48
 8002dda:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	3a0a      	subs	r2, #10
 8002de0:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	7193      	strb	r3, [r2, #6]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	702b      	strb	r3, [r5, #0]
}
 8002dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dec:	fffebff8 	.word	0xfffebff8
 8002df0:	fffffcfc 	.word	0xfffffcfc
 8002df4:	ffff0303 	.word	0xffff0303

08002df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	0004      	movs	r4, r0
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	343c      	adds	r4, #60	; 0x3c
 8002e00:	7825      	ldrb	r5, [r4, #0]
{
 8002e02:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002e04:	0010      	movs	r0, r2
 8002e06:	2d01      	cmp	r5, #1
 8002e08:	d022      	beq.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0a:	001d      	movs	r5, r3
 8002e0c:	353d      	adds	r5, #61	; 0x3d
 8002e0e:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e10:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e12:	4e10      	ldr	r6, [pc, #64]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8002e14:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002e16:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e18:	42b2      	cmp	r2, r6
 8002e1a:	d103      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e1c:	4f0e      	ldr	r7, [pc, #56]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002e1e:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e20:	684f      	ldr	r7, [r1, #4]
 8002e22:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e24:	2770      	movs	r7, #112	; 0x70
 8002e26:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e28:	680f      	ldr	r7, [r1, #0]
 8002e2a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	42b2      	cmp	r2, r6
 8002e30:	d005      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d002      	beq.n	8002e3e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d104      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e42:	688b      	ldr	r3, [r1, #8]
 8002e44:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e46:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002e4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002e4e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	ff0fffff 	.word	0xff0fffff
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40014000 	.word	0x40014000

08002e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	6925      	ldr	r5, [r4, #16]
 8002e6a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e6e:	4329      	orrs	r1, r5
 8002e70:	6965      	ldr	r5, [r4, #20]
 8002e72:	69c3      	ldr	r3, [r0, #28]
 8002e74:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e76:	6810      	ldr	r0, [r2, #0]
 8002e78:	4d4e      	ldr	r5, [pc, #312]	; (8002fb4 <UART_SetConfig+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7c:	4028      	ands	r0, r5
 8002e7e:	4301      	orrs	r1, r0
 8002e80:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	6851      	ldr	r1, [r2, #4]
 8002e84:	484c      	ldr	r0, [pc, #304]	; (8002fb8 <UART_SetConfig+0x154>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e86:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e88:	4001      	ands	r1, r0
 8002e8a:	68e0      	ldr	r0, [r4, #12]
 8002e8c:	4301      	orrs	r1, r0
 8002e8e:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002e90:	69a1      	ldr	r1, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e92:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002e94:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e96:	4d49      	ldr	r5, [pc, #292]	; (8002fbc <UART_SetConfig+0x158>)
 8002e98:	4028      	ands	r0, r5
 8002e9a:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e9c:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9e:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ea0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ea2:	4381      	bics	r1, r0
 8002ea4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ea6:	4301      	orrs	r1, r0
 8002ea8:	62d1      	str	r1, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eaa:	4945      	ldr	r1, [pc, #276]	; (8002fc0 <UART_SetConfig+0x15c>)
 8002eac:	428a      	cmp	r2, r1
 8002eae:	d117      	bne.n	8002ee0 <UART_SetConfig+0x7c>
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	4a44      	ldr	r2, [pc, #272]	; (8002fc4 <UART_SetConfig+0x160>)
 8002eb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	3a01      	subs	r2, #1
 8002eba:	4943      	ldr	r1, [pc, #268]	; (8002fc8 <UART_SetConfig+0x164>)
 8002ebc:	2a02      	cmp	r2, #2
 8002ebe:	d917      	bls.n	8002ef0 <UART_SetConfig+0x8c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	0212      	lsls	r2, r2, #8
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d000      	beq.n	8002eca <UART_SetConfig+0x66>
 8002ec8:	e068      	b.n	8002f9c <UART_SetConfig+0x138>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eca:	f7ff fe2f 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ece:	1e03      	subs	r3, r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed0:	d128      	bne.n	8002f24 <UART_SetConfig+0xc0>
 8002ed2:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <UART_SetConfig+0x168>)
 8002ed6:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002edc:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee0:	493b      	ldr	r1, [pc, #236]	; (8002fd0 <UART_SetConfig+0x16c>)
 8002ee2:	428a      	cmp	r2, r1
 8002ee4:	d112      	bne.n	8002f0c <UART_SetConfig+0xa8>
 8002ee6:	210c      	movs	r1, #12
 8002ee8:	4a36      	ldr	r2, [pc, #216]	; (8002fc4 <UART_SetConfig+0x160>)
 8002eea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002eec:	400a      	ands	r2, r1
 8002eee:	4939      	ldr	r1, [pc, #228]	; (8002fd4 <UART_SetConfig+0x170>)
 8002ef0:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0212      	lsls	r2, r2, #8
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d131      	bne.n	8002f5e <UART_SetConfig+0xfa>
    switch (clocksource)
 8002efa:	2808      	cmp	r0, #8
 8002efc:	d80c      	bhi.n	8002f18 <UART_SetConfig+0xb4>
 8002efe:	f7fd f8ff 	bl	8000100 <__gnu_thumb1_case_sqi>
 8002f02:	0be4      	.short	0x0be4
 8002f04:	0b0d0b10 	.word	0x0b0d0b10
 8002f08:	0b0b      	.short	0x0b0b
 8002f0a:	11          	.byte	0x11
 8002f0b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0c:	4932      	ldr	r1, [pc, #200]	; (8002fd8 <UART_SetConfig+0x174>)
 8002f0e:	428a      	cmp	r2, r1
 8002f10:	d0d6      	beq.n	8002ec0 <UART_SetConfig+0x5c>
 8002f12:	4932      	ldr	r1, [pc, #200]	; (8002fdc <UART_SetConfig+0x178>)
 8002f14:	428a      	cmp	r2, r1
 8002f16:	d0d3      	beq.n	8002ec0 <UART_SetConfig+0x5c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e7db      	b.n	8002ed4 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1c:	f7ff fd14 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002f20:	e7d5      	b.n	8002ece <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f22:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <UART_SetConfig+0x17c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f26:	492f      	ldr	r1, [pc, #188]	; (8002fe4 <UART_SetConfig+0x180>)
 8002f28:	0052      	lsls	r2, r2, #1
 8002f2a:	5a51      	ldrh	r1, [r2, r1]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd f8fb 	bl	8000128 <__udivsi3>
 8002f32:	6865      	ldr	r5, [r4, #4]
 8002f34:	0040      	lsls	r0, r0, #1
 8002f36:	086b      	lsrs	r3, r5, #1
 8002f38:	18c0      	adds	r0, r0, r3
 8002f3a:	0029      	movs	r1, r5
 8002f3c:	f7fd f8f4 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f40:	0002      	movs	r2, r0
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <UART_SetConfig+0x184>)
 8002f44:	3a10      	subs	r2, #16
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d8e6      	bhi.n	8002f18 <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f4a:	230f      	movs	r3, #15
 8002f4c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f4e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f50:	439a      	bics	r2, r3
 8002f52:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f54:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	4318      	orrs	r0, r3
 8002f5a:	60d0      	str	r0, [r2, #12]
 8002f5c:	e7b9      	b.n	8002ed2 <UART_SetConfig+0x6e>
    switch (clocksource)
 8002f5e:	2808      	cmp	r0, #8
 8002f60:	d8da      	bhi.n	8002f18 <UART_SetConfig+0xb4>
 8002f62:	f7fd f8cd 	bl	8000100 <__gnu_thumb1_case_sqi>
 8002f66:	d91b      	.short	0xd91b
 8002f68:	d921d924 	.word	0xd921d924
 8002f6c:	d9d9      	.short	0xd9d9
 8002f6e:	05          	.byte	0x05
 8002f6f:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f70:	2080      	movs	r0, #128	; 0x80
 8002f72:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <UART_SetConfig+0x180>)
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	5a99      	ldrh	r1, [r3, r2]
 8002f7c:	f7fd f8d4 	bl	8000128 <__udivsi3>
 8002f80:	6865      	ldr	r5, [r4, #4]
 8002f82:	086b      	lsrs	r3, r5, #1
 8002f84:	18c0      	adds	r0, r0, r3
 8002f86:	0029      	movs	r1, r5
 8002f88:	f7fd f8ce 	bl	8000128 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <UART_SetConfig+0x184>)
 8002f90:	3a10      	subs	r2, #16
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d8c0      	bhi.n	8002f18 <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	60d8      	str	r0, [r3, #12]
 8002f9a:	e79a      	b.n	8002ed2 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f7ff fdc6 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d100      	bne.n	8002fa6 <UART_SetConfig+0x142>
 8002fa4:	e795      	b.n	8002ed2 <UART_SetConfig+0x6e>
 8002fa6:	e7e5      	b.n	8002f74 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa8:	f7ff fcce 	bl	8002948 <HAL_RCC_GetSysClockFreq>
        break;
 8002fac:	e7f8      	b.n	8002fa0 <UART_SetConfig+0x13c>
        pclk = (uint32_t) HSI_VALUE;
 8002fae:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <UART_SetConfig+0x17c>)
 8002fb0:	e7e0      	b.n	8002f74 <UART_SetConfig+0x110>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	cfff69f3 	.word	0xcfff69f3
 8002fb8:	ffffcfff 	.word	0xffffcfff
 8002fbc:	11fff4ff 	.word	0x11fff4ff
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	080038d0 	.word	0x080038d0
 8002fcc:	00010001 	.word	0x00010001
 8002fd0:	40004400 	.word	0x40004400
 8002fd4:	080038d3 	.word	0x080038d3
 8002fd8:	40004800 	.word	0x40004800
 8002fdc:	40004c00 	.word	0x40004c00
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	080038e0 	.word	0x080038e0
 8002fe8:	0000ffef 	.word	0x0000ffef

08002fec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fec:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002fee:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ff0:	07da      	lsls	r2, r3, #31
 8002ff2:	d506      	bpl.n	8003002 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff4:	6801      	ldr	r1, [r0, #0]
 8002ff6:	4c28      	ldr	r4, [pc, #160]	; (8003098 <UART_AdvFeatureConfig+0xac>)
 8002ff8:	684a      	ldr	r2, [r1, #4]
 8002ffa:	4022      	ands	r2, r4
 8002ffc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ffe:	4322      	orrs	r2, r4
 8003000:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003002:	079a      	lsls	r2, r3, #30
 8003004:	d506      	bpl.n	8003014 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003006:	6801      	ldr	r1, [r0, #0]
 8003008:	4c24      	ldr	r4, [pc, #144]	; (800309c <UART_AdvFeatureConfig+0xb0>)
 800300a:	684a      	ldr	r2, [r1, #4]
 800300c:	4022      	ands	r2, r4
 800300e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003010:	4322      	orrs	r2, r4
 8003012:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003014:	075a      	lsls	r2, r3, #29
 8003016:	d506      	bpl.n	8003026 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	4c21      	ldr	r4, [pc, #132]	; (80030a0 <UART_AdvFeatureConfig+0xb4>)
 800301c:	684a      	ldr	r2, [r1, #4]
 800301e:	4022      	ands	r2, r4
 8003020:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003022:	4322      	orrs	r2, r4
 8003024:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003026:	071a      	lsls	r2, r3, #28
 8003028:	d506      	bpl.n	8003038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800302a:	6801      	ldr	r1, [r0, #0]
 800302c:	4c1d      	ldr	r4, [pc, #116]	; (80030a4 <UART_AdvFeatureConfig+0xb8>)
 800302e:	684a      	ldr	r2, [r1, #4]
 8003030:	4022      	ands	r2, r4
 8003032:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003034:	4322      	orrs	r2, r4
 8003036:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003038:	06da      	lsls	r2, r3, #27
 800303a:	d506      	bpl.n	800304a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800303c:	6801      	ldr	r1, [r0, #0]
 800303e:	4c1a      	ldr	r4, [pc, #104]	; (80030a8 <UART_AdvFeatureConfig+0xbc>)
 8003040:	688a      	ldr	r2, [r1, #8]
 8003042:	4022      	ands	r2, r4
 8003044:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003046:	4322      	orrs	r2, r4
 8003048:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800304a:	069a      	lsls	r2, r3, #26
 800304c:	d506      	bpl.n	800305c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800304e:	6801      	ldr	r1, [r0, #0]
 8003050:	4c16      	ldr	r4, [pc, #88]	; (80030ac <UART_AdvFeatureConfig+0xc0>)
 8003052:	688a      	ldr	r2, [r1, #8]
 8003054:	4022      	ands	r2, r4
 8003056:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003058:	4322      	orrs	r2, r4
 800305a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800305c:	065a      	lsls	r2, r3, #25
 800305e:	d510      	bpl.n	8003082 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003060:	6801      	ldr	r1, [r0, #0]
 8003062:	4d13      	ldr	r5, [pc, #76]	; (80030b0 <UART_AdvFeatureConfig+0xc4>)
 8003064:	684a      	ldr	r2, [r1, #4]
 8003066:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003068:	402a      	ands	r2, r5
 800306a:	4322      	orrs	r2, r4
 800306c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	0352      	lsls	r2, r2, #13
 8003072:	4294      	cmp	r4, r2
 8003074:	d105      	bne.n	8003082 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003076:	684a      	ldr	r2, [r1, #4]
 8003078:	4c0e      	ldr	r4, [pc, #56]	; (80030b4 <UART_AdvFeatureConfig+0xc8>)
 800307a:	4022      	ands	r2, r4
 800307c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800307e:	4322      	orrs	r2, r4
 8003080:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	d506      	bpl.n	8003094 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003086:	6802      	ldr	r2, [r0, #0]
 8003088:	490b      	ldr	r1, [pc, #44]	; (80030b8 <UART_AdvFeatureConfig+0xcc>)
 800308a:	6853      	ldr	r3, [r2, #4]
 800308c:	400b      	ands	r3, r1
 800308e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003090:	430b      	orrs	r3, r1
 8003092:	6053      	str	r3, [r2, #4]
  }
}
 8003094:	bd30      	pop	{r4, r5, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	fffdffff 	.word	0xfffdffff
 800309c:	fffeffff 	.word	0xfffeffff
 80030a0:	fffbffff 	.word	0xfffbffff
 80030a4:	ffff7fff 	.word	0xffff7fff
 80030a8:	ffffefff 	.word	0xffffefff
 80030ac:	ffffdfff 	.word	0xffffdfff
 80030b0:	ffefffff 	.word	0xffefffff
 80030b4:	ff9fffff 	.word	0xff9fffff
 80030b8:	fff7ffff 	.word	0xfff7ffff

080030bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030be:	2780      	movs	r7, #128	; 0x80
{
 80030c0:	0004      	movs	r4, r0
 80030c2:	000d      	movs	r5, r1
 80030c4:	0016      	movs	r6, r2
 80030c6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	69d3      	ldr	r3, [r2, #28]
 80030ce:	402b      	ands	r3, r5
 80030d0:	1b5b      	subs	r3, r3, r5
 80030d2:	4259      	negs	r1, r3
 80030d4:	414b      	adcs	r3, r1
 80030d6:	42b3      	cmp	r3, r6
 80030d8:	d001      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2000      	movs	r0, #0
 80030dc:	e02b      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x7a>
    if (Timeout != HAL_MAX_DELAY)
 80030de:	9b08      	ldr	r3, [sp, #32]
 80030e0:	3301      	adds	r3, #1
 80030e2:	d0f3      	beq.n	80030cc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fc30 	bl	8001948 <HAL_GetTick>
 80030e8:	9b01      	ldr	r3, [sp, #4]
 80030ea:	1ac0      	subs	r0, r0, r3
 80030ec:	9b08      	ldr	r3, [sp, #32]
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d801      	bhi.n	80030f6 <UART_WaitOnFlagUntilTimeout+0x3a>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d120      	bne.n	8003138 <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f6:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	2201      	movs	r2, #1
 80030fc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	4d21      	ldr	r5, [pc, #132]	; (8003188 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8003104:	680b      	ldr	r3, [r1, #0]
 8003106:	402b      	ands	r3, r5
 8003108:	600b      	str	r3, [r1, #0]
 800310a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	6821      	ldr	r1, [r4, #0]
 8003118:	688b      	ldr	r3, [r1, #8]
 800311a:	4393      	bics	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
 800311e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003122:	0022      	movs	r2, r4
 8003124:	2320      	movs	r3, #32
 8003126:	3208      	adds	r2, #8
 8003128:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800312a:	3280      	adds	r2, #128	; 0x80
 800312c:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 800312e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003130:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003132:	3480      	adds	r4, #128	; 0x80
 8003134:	7023      	strb	r3, [r4, #0]
}
 8003136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003138:	2104      	movs	r1, #4
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	420a      	tst	r2, r1
 8003140:	d0c3      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	423a      	tst	r2, r7
 8003146:	d0c0      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003148:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314e:	2201      	movs	r2, #1
 8003150:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	4d0c      	ldr	r5, [pc, #48]	; (8003188 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8003158:	680b      	ldr	r3, [r1, #0]
 800315a:	402b      	ands	r3, r5
 800315c:	600b      	str	r3, [r1, #0]
 800315e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003166:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	6821      	ldr	r1, [r4, #0]
 800316c:	688b      	ldr	r3, [r1, #8]
 800316e:	4393      	bics	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
 8003172:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003176:	0022      	movs	r2, r4
 8003178:	2320      	movs	r3, #32
 800317a:	3208      	adds	r2, #8
 800317c:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800317e:	3280      	adds	r2, #128	; 0x80
 8003180:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003182:	6053      	str	r3, [r2, #4]
 8003184:	e7d3      	b.n	800312e <UART_WaitOnFlagUntilTimeout+0x72>
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	fffffe5f 	.word	0xfffffe5f

0800318c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	0003      	movs	r3, r0
{
 800318e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	2600      	movs	r6, #0
{
 8003192:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	338c      	adds	r3, #140	; 0x8c
 8003196:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003198:	f7fe fbd6 	bl	8001948 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800319c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800319e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	071b      	lsls	r3, r3, #28
 80031a4:	d419      	bmi.n	80031da <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	075b      	lsls	r3, r3, #29
 80031ac:	d50a      	bpl.n	80031c4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <UART_CheckIdleState+0x68>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	0020      	movs	r0, r4
 80031b8:	002b      	movs	r3, r5
 80031ba:	03c9      	lsls	r1, r1, #15
 80031bc:	f7ff ff7e 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d115      	bne.n	80031f0 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80031c4:	0022      	movs	r2, r4
 80031c6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80031ca:	3208      	adds	r2, #8
 80031cc:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	3280      	adds	r2, #128	; 0x80
 80031d0:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80031d4:	3480      	adds	r4, #128	; 0x80
 80031d6:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80031d8:	e00b      	b.n	80031f2 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <UART_CheckIdleState+0x68>)
 80031de:	0032      	movs	r2, r6
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	0389      	lsls	r1, r1, #14
 80031e4:	0003      	movs	r3, r0
 80031e6:	0020      	movs	r0, r4
 80031e8:	f7ff ff68 	bl	80030bc <UART_WaitOnFlagUntilTimeout>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d0da      	beq.n	80031a6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80031f0:	2003      	movs	r0, #3
}
 80031f2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80031f4:	01ffffff 	.word	0x01ffffff

080031f8 <HAL_UART_Init>:
{
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80031fe:	2001      	movs	r0, #1
}
 8003200:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003202:	0005      	movs	r5, r0
 8003204:	3508      	adds	r5, #8
 8003206:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 800320c:	0002      	movs	r2, r0
 800320e:	3280      	adds	r2, #128	; 0x80
 8003210:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003212:	f7fd fd91 	bl	8000d38 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003216:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003218:	2101      	movs	r1, #1
 800321a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800321c:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800321e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003220:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003222:	438b      	bics	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003226:	f7ff fe1d 	bl	8002e64 <UART_SetConfig>
 800322a:	2801      	cmp	r0, #1
 800322c:	d0e7      	beq.n	80031fe <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8003234:	0020      	movs	r0, r4
 8003236:	f7ff fed9 	bl	8002fec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	4907      	ldr	r1, [pc, #28]	; (800325c <HAL_UART_Init+0x64>)
 800323e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003240:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003244:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	438a      	bics	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800324e:	2201      	movs	r2, #1
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003256:	f7ff ff99 	bl	800318c <UART_CheckIdleState>
 800325a:	e7d1      	b.n	8003200 <HAL_UART_Init+0x8>
 800325c:	ffffb7ff 	.word	0xffffb7ff

08003260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003262:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003264:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <UARTEx_SetNbDataToProcess+0x40>)
 800326c:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003270:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003272:	4e0c      	ldr	r6, [pc, #48]	; (80032a4 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003274:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003276:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8003278:	4d0b      	ldr	r5, [pc, #44]	; (80032a8 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800327a:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800327c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800327e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003280:	00c0      	lsls	r0, r0, #3
 8003282:	f7fc ffdb 	bl	800023c <__divsi3>
 8003286:	0023      	movs	r3, r4
 8003288:	336a      	adds	r3, #106	; 0x6a
 800328a:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800328c:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800328e:	0f5b      	lsrs	r3, r3, #29
 8003290:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8003292:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003294:	00c0      	lsls	r0, r0, #3
 8003296:	f7fc ffd1 	bl	800023c <__divsi3>
 800329a:	3468      	adds	r4, #104	; 0x68
 800329c:	8020      	strh	r0, [r4, #0]
}
 800329e:	e7e6      	b.n	800326e <UARTEx_SetNbDataToProcess+0xe>
 80032a0:	00010001 	.word	0x00010001
 80032a4:	08003900 	.word	0x08003900
 80032a8:	080038f8 	.word	0x080038f8

080032ac <HAL_UARTEx_DisableFifoMode>:
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80032ae:	0004      	movs	r4, r0
 80032b0:	3480      	adds	r4, #128	; 0x80
 80032b2:	7822      	ldrb	r2, [r4, #0]
{
 80032b4:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80032b6:	2002      	movs	r0, #2
 80032b8:	2a01      	cmp	r2, #1
 80032ba:	d011      	beq.n	80032e0 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	001d      	movs	r5, r3
 80032be:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80032c0:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80032c2:	3508      	adds	r5, #8
 80032c4:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80032ca:	6810      	ldr	r0, [r2, #0]
 80032cc:	43b0      	bics	r0, r6
 80032ce:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_UARTEx_DisableFifoMode+0x38>)
 80032d2:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032d4:	2000      	movs	r0, #0
 80032d6:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 80032d8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032da:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80032de:	7020      	strb	r0, [r4, #0]
}
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	dfffffff 	.word	0xdfffffff

080032e8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80032ea:	0005      	movs	r5, r0
 80032ec:	3580      	adds	r5, #128	; 0x80
 80032ee:	782b      	ldrb	r3, [r5, #0]
{
 80032f0:	0004      	movs	r4, r0
 80032f2:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80032f4:	2002      	movs	r0, #2
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d018      	beq.n	800332c <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 80032fa:	0026      	movs	r6, r4
 80032fc:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80032fe:	3801      	subs	r0, #1
 8003300:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003302:	3608      	adds	r6, #8
 8003304:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	4381      	bics	r1, r0
 800330e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003310:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003312:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003314:	00c9      	lsls	r1, r1, #3
 8003316:	08c9      	lsrs	r1, r1, #3
 8003318:	4311      	orrs	r1, r2
 800331a:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800331c:	f7ff ffa0 	bl	8003260 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003320:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003322:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003324:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003326:	2320      	movs	r3, #32
 8003328:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800332a:	7028      	strb	r0, [r5, #0]
}
 800332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003330 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003332:	0005      	movs	r5, r0
 8003334:	3580      	adds	r5, #128	; 0x80
 8003336:	782b      	ldrb	r3, [r5, #0]
{
 8003338:	0004      	movs	r4, r0
 800333a:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800333c:	2002      	movs	r0, #2
 800333e:	2b01      	cmp	r3, #1
 8003340:	d018      	beq.n	8003374 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 8003342:	0026      	movs	r6, r4
 8003344:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8003346:	3801      	subs	r0, #1
 8003348:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800334a:	3608      	adds	r6, #8
 800334c:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	4381      	bics	r1, r0
 8003356:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	4807      	ldr	r0, [pc, #28]	; (8003378 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 800335c:	4001      	ands	r1, r0
 800335e:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 8003360:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003362:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003364:	f7ff ff7c 	bl	8003260 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003368:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800336a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800336c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800336e:	2320      	movs	r3, #32
 8003370:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003372:	7028      	strb	r0, [r5, #0]
}
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	f1ffffff 	.word	0xf1ffffff

0800337c <__cxa_guard_acquire>:
 800337c:	0003      	movs	r3, r0
 800337e:	2001      	movs	r0, #1
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4202      	tst	r2, r0
 8003384:	d105      	bne.n	8003392 <__cxa_guard_acquire+0x16>
 8003386:	785a      	ldrb	r2, [r3, #1]
 8003388:	2a00      	cmp	r2, #0
 800338a:	d000      	beq.n	800338e <__cxa_guard_acquire+0x12>
 800338c:	deff      	udf	#255	; 0xff
 800338e:	7058      	strb	r0, [r3, #1]
 8003390:	4770      	bx	lr
 8003392:	2000      	movs	r0, #0
 8003394:	e7fc      	b.n	8003390 <__cxa_guard_acquire+0x14>

08003396 <__cxa_guard_release>:
 8003396:	2301      	movs	r3, #1
 8003398:	6003      	str	r3, [r0, #0]
 800339a:	4770      	bx	lr

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	2600      	movs	r6, #0
 80033a0:	4d0c      	ldr	r5, [pc, #48]	; (80033d4 <__libc_init_array+0x38>)
 80033a2:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a4:	1b64      	subs	r4, r4, r5
 80033a6:	10a4      	asrs	r4, r4, #2
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	2600      	movs	r6, #0
 80033ae:	f000 f82b 	bl	8003408 <_init>
 80033b2:	4d0a      	ldr	r5, [pc, #40]	; (80033dc <__libc_init_array+0x40>)
 80033b4:	4c0a      	ldr	r4, [pc, #40]	; (80033e0 <__libc_init_array+0x44>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	00b3      	lsls	r3, r6, #2
 80033c2:	58eb      	ldr	r3, [r5, r3]
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	00b3      	lsls	r3, r6, #2
 80033cc:	58eb      	ldr	r3, [r5, r3]
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08003908 	.word	0x08003908
 80033d8:	08003908 	.word	0x08003908
 80033dc:	08003908 	.word	0x08003908
 80033e0:	0800390c 	.word	0x0800390c

080033e4 <memcpy>:
 80033e4:	2300      	movs	r3, #0
 80033e6:	b510      	push	{r4, lr}
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d100      	bne.n	80033ee <memcpy+0xa>
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	5ccc      	ldrb	r4, [r1, r3]
 80033f0:	54c4      	strb	r4, [r0, r3]
 80033f2:	3301      	adds	r3, #1
 80033f4:	e7f8      	b.n	80033e8 <memcpy+0x4>

080033f6 <memset>:
 80033f6:	0003      	movs	r3, r0
 80033f8:	1882      	adds	r2, r0, r2
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d100      	bne.n	8003400 <memset+0xa>
 80033fe:	4770      	bx	lr
 8003400:	7019      	strb	r1, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	e7f9      	b.n	80033fa <memset+0x4>
	...

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
