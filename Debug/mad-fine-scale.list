
mad-fine-scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002130  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080021e8  080021e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002280  08002280  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002280  08002280  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002280  08002280  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002280  08002280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08002294  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002294  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2cc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b6  00000000  00000000  0003e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000127c8  00000000  00000000  00041bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee0  00000000  00000000  00054380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001928  00000000  00000000  00055260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004235  00000000  00000000  00056b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e7e6  00000000  00000000  0005adbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000966cf  00000000  00000000  000795a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010fc72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f9c  00000000  00000000  0010fcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080021d0 	.word	0x080021d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080021d0 	.word	0x080021d0

08000100 <__gnu_thumb1_case_sqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5609      	ldrsb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000400:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	250c      	movs	r5, #12
{
 8000404:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	002a      	movs	r2, r5
 8000408:	2100      	movs	r1, #0
 800040a:	a801      	add	r0, sp, #4
 800040c:	f001 fed8 	bl	80021c0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000410:	4c1b      	ldr	r4, [pc, #108]	; (8000480 <MX_ADC1_Init+0x80>)
 8000412:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <MX_ADC1_Init+0x84>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 8000416:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000422:	3a03      	subs	r2, #3
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000424:	18a1      	adds	r1, r4, r2
 8000426:	77cb      	strb	r3, [r1, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000428:	0021      	movs	r1, r4
 800042a:	312c      	adds	r1, #44	; 0x2c
 800042c:	700b      	strb	r3, [r1, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = ENABLE;
 800042e:	0021      	movs	r1, r4
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000430:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = ENABLE;
 8000432:	313c      	adds	r1, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000434:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000436:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000438:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043a:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043c:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 800043e:	61e2      	str	r2, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000442:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000444:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000446:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000448:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 800044a:	700a      	strb	r2, [r1, #0]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800044c:	6425      	str	r5, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800044e:	6463      	str	r3, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000450:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000452:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000454:	f000 fb38 	bl	8000ac8 <HAL_ADC_Init>
 8000458:	2800      	cmp	r0, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800045c:	f000 f991 	bl	8000782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_ADC1_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000462:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000464:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800046c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046e:	f000 fc63 	bl	8000d38 <HAL_ADC_ConfigChannel>
 8000472:	2800      	cmp	r0, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000476:	f000 f984 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047a:	b005      	add	sp, #20
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000028 	.word	0x20000028
 8000484:	40012400 	.word	0x40012400
 8000488:	04000002 	.word	0x04000002

0800048c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800048c:	b510      	push	{r4, lr}
 800048e:	0004      	movs	r4, r0
 8000490:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	2214      	movs	r2, #20
 8000494:	2100      	movs	r1, #0
 8000496:	a802      	add	r0, sp, #8
 8000498:	f001 fe92 	bl	80021c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	221c      	movs	r2, #28
 800049e:	2100      	movs	r1, #0
 80004a0:	a807      	add	r0, sp, #28
 80004a2:	f001 fe8d 	bl	80021c0 <memset>
  if(adcHandle->Instance==ADC1)
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_ADC_MspInit+0x78>)
 80004a8:	6822      	ldr	r2, [r4, #0]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d128      	bne.n	8000500 <HAL_ADC_MspInit+0x74>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004ae:	2380      	movs	r3, #128	; 0x80
 80004b0:	01db      	lsls	r3, r3, #7
 80004b2:	9307      	str	r3, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004b4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b6:	a807      	add	r0, sp, #28
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004b8:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ba:	f001 fa49 	bl	8001950 <HAL_RCCEx_PeriphCLKConfig>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d001      	beq.n	80004c6 <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 80004c2:	f000 f95e 	bl	8000782 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004c6:	2080      	movs	r0, #128	; 0x80
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_ADC_MspInit+0x7c>)
 80004ca:	0340      	lsls	r0, r0, #13
 80004cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80004ce:	4301      	orrs	r1, r0
 80004d0:	6419      	str	r1, [r3, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80004d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d6:	4002      	ands	r2, r0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = INA_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80004de:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	430a      	orrs	r2, r1
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80004e6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	400b      	ands	r3, r1
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INA_OUT_Pin;
 80004ee:	2302      	movs	r3, #2
 80004f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f2:	185b      	adds	r3, r3, r1
 80004f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80004f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(INA_OUT_GPIO_Port, &GPIO_InitStruct);
 80004fc:	f000 fd86 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000500:	b00e      	add	sp, #56	; 0x38
 8000502:	bd10      	pop	{r4, pc}
 8000504:	40012400 	.word	0x40012400
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PF1-OSC_OUT (PF1)   ------> RCC_OSC_EN
*/
void MX_GPIO_Init(void)
{
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	2214      	movs	r2, #20
 8000512:	2100      	movs	r1, #0
 8000514:	a805      	add	r0, sp, #20
 8000516:	f001 fe53 	bl	80021c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2004      	movs	r0, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000524:	25a0      	movs	r5, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4301      	orrs	r1, r0
 8000528:	6359      	str	r1, [r3, #52]	; 0x34
 800052a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 800052c:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4002      	ands	r2, r0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000536:	301c      	adds	r0, #28
 8000538:	4301      	orrs	r1, r0
 800053a:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4002      	ands	r2, r0
 8000544:	9201      	str	r2, [sp, #4]
 8000546:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 800054a:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4332      	orrs	r2, r6
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
 8000550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000552:	4032      	ands	r2, r6
 8000554:	9202      	str	r2, [sp, #8]
 8000556:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	433a      	orrs	r2, r7
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
 800055e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000560:	403a      	ands	r2, r7
 8000562:	9203      	str	r2, [sp, #12]
 8000564:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
 800056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	400b      	ands	r3, r1
 8000572:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000574:	4921      	ldr	r1, [pc, #132]	; (80005fc <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin, GPIO_PIN_RESET);
 8000578:	f000 fdf6 	bl	8001168 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xf4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8000580:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000582:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	481f      	ldr	r0, [pc, #124]	; (8000604 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000586:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	f000 fd3f 	bl	800100c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800058e:	a905      	add	r1, sp, #20
 8000590:	481d      	ldr	r0, [pc, #116]	; (8000608 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000592:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 800059a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800059c:	f000 fd36 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005a0:	0028      	movs	r0, r5
 80005a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 80005a4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f000 fd2f 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin;
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	0028      	movs	r0, r5
 80005b2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DISPLAY_ENABLE_Pin|BRIDGE_ENABLE_Pin|DPOT_HVC_A0_Pin|INA_ENABLE_Pin;
 80005b4:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f000 fd26 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 80005c0:	2390      	movs	r3, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c2:	19f6      	adds	r6, r6, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 80005c6:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PA5_Pin|GPIO_PA8_Pin;
 80005ca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005cc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f000 fd1c 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB10
                           PB11 PB12 PB13 PB14
                           PB15 PBPin PBPin PBPin
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PB0_Pin|GPIO_PB1_Pin|GPIO_PB2_Pin|GPIO_PIN_10
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_GPIO_Init+0x100>)
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PB3_Pin|GPIO_PB4_Pin|GPIO_PB5_Pin
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	a905      	add	r1, sp, #20
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pin = GPIO_PB0_Pin|GPIO_PB1_Pin|GPIO_PB2_Pin|GPIO_PIN_10
 80005da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005dc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f000 fd14 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005e4:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <MX_GPIO_Init+0x108>)
 80005e8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ec:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f0:	f000 fd0c 	bl	800100c <HAL_GPIO_Init>

}
 80005f4:	b00b      	add	sp, #44	; 0x2c
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	0000801c 	.word	0x0000801c
 8000600:	0000e0c0 	.word	0x0000e0c0
 8000604:	50000800 	.word	0x50000800
 8000608:	50001400 	.word	0x50001400
 800060c:	0000ff3f 	.word	0x0000ff3f
 8000610:	50000400 	.word	0x50000400
 8000614:	50000c00 	.word	0x50000c00

08000618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_I2C1_Init+0x50>)
 800061c:	4c13      	ldr	r4, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x0010061A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000620:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000624:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x0010061A;
 8000626:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000628:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062a:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 800062c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000630:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000632:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	f000 fd9c 	bl	8001174 <HAL_I2C_Init>
 800063c:	2800      	cmp	r0, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000640:	f000 f89f 	bl	8000782 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000644:	2100      	movs	r1, #0
 8000646:	0020      	movs	r0, r4
 8000648:	f000 fdea 	bl	8001220 <HAL_I2CEx_ConfigAnalogFilter>
 800064c:	2800      	cmp	r0, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000650:	f000 f897 	bl	8000782 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	0020      	movs	r0, r4
 8000658:	f000 fe08 	bl	800126c <HAL_I2CEx_ConfigDigitalFilter>
 800065c:	2800      	cmp	r0, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f88f 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bd10      	pop	{r4, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40005400 	.word	0x40005400
 800066c:	2000008c 	.word	0x2000008c
 8000670:	0010061a 	.word	0x0010061a

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b510      	push	{r4, lr}
 8000676:	0004      	movs	r4, r0
 8000678:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	2214      	movs	r2, #20
 800067c:	2100      	movs	r1, #0
 800067e:	a802      	add	r0, sp, #8
 8000680:	f001 fd9e 	bl	80021c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	221c      	movs	r2, #28
 8000686:	2100      	movs	r1, #0
 8000688:	a807      	add	r0, sp, #28
 800068a:	f001 fd99 	bl	80021c0 <memset>
  if(i2cHandle->Instance==I2C1)
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_I2C_MspInit+0x80>)
 8000690:	6822      	ldr	r2, [r4, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d12c      	bne.n	80006f0 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000696:	2320      	movs	r3, #32
 8000698:	9307      	str	r3, [sp, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800069a:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069c:	a807      	add	r0, sp, #28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800069e:	019b      	lsls	r3, r3, #6
 80006a0:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	f001 f955 	bl	8001950 <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d001      	beq.n	80006ae <HAL_I2C_MspInit+0x3a>
    {
      Error_Handler();
 80006aa:	f000 f86a 	bl	8000782 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2301      	movs	r3, #1
 80006b0:	4c11      	ldr	r4, [pc, #68]	; (80006f8 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	431a      	orrs	r2, r3
 80006ba:	6362      	str	r2, [r4, #52]	; 0x34
 80006bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	401a      	ands	r2, r3
 80006c2:	9200      	str	r2, [sp, #0]
 80006c4:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c6:	22c0      	movs	r2, #192	; 0xc0
 80006c8:	00d2      	lsls	r2, r2, #3
 80006ca:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006cc:	2212      	movs	r2, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	18db      	adds	r3, r3, r3
 80006d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80006d4:	3304      	adds	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80006d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f000 fc97 	bl	800100c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80006e2:	0389      	lsls	r1, r1, #14
 80006e4:	430a      	orrs	r2, r1
 80006e6:	63e2      	str	r2, [r4, #60]	; 0x3c
 80006e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006ea:	400b      	ands	r3, r1
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f0:	b00e      	add	sp, #56	; 0x38
 80006f2:	bd10      	pop	{r4, pc}
 80006f4:	40005400 	.word	0x40005400
 80006f8:	40021000 	.word	0x40021000

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b500      	push	{lr}
 80006fe:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000700:	2234      	movs	r2, #52	; 0x34
 8000702:	2100      	movs	r1, #0
 8000704:	a805      	add	r0, sp, #20
 8000706:	f001 fd5b 	bl	80021c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	2210      	movs	r2, #16
 800070c:	2100      	movs	r1, #0
 800070e:	a801      	add	r0, sp, #4
 8000710:	f001 fd56 	bl	80021c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2080      	movs	r0, #128	; 0x80
 8000716:	0080      	lsls	r0, r0, #2
 8000718:	f000 fdcc 	bl	80012b4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800071c:	2303      	movs	r3, #3
 800071e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	02db      	lsls	r3, r3, #11
 8000724:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	005b      	lsls	r3, r3, #1
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800072e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000732:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000736:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f000 fde8 	bl	800130c <HAL_RCC_OscConfig>
 800073c:	2800      	cmp	r0, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000742:	e7fe      	b.n	8000742 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000746:	2101      	movs	r1, #1
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000750:	9102      	str	r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000752:	f001 f83b 	bl	80017cc <HAL_RCC_ClockConfig>
 8000756:	2800      	cmp	r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x62>
 800075a:	b672      	cpsid	i
  while (1)
 800075c:	e7fe      	b.n	800075c <SystemClock_Config+0x60>
}
 800075e:	b013      	add	sp, #76	; 0x4c
 8000760:	bd00      	pop	{pc}

08000762 <main>:
{
 8000762:	b510      	push	{r4, lr}
  HAL_Init();
 8000764:	f000 f97a 	bl	8000a5c <HAL_Init>
  SystemClock_Config();
 8000768:	f7ff ffc8 	bl	80006fc <SystemClock_Config>
  MX_GPIO_Init();
 800076c:	f7ff fece 	bl	800050c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000770:	f000 f82e 	bl	80007d0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000774:	f7ff ff50 	bl	8000618 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000778:	f7ff fe42 	bl	8000400 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800077c:	f000 f88e 	bl	800089c <MX_USART1_UART_Init>
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x1e>

08000782 <Error_Handler>:
 8000782:	b672      	cpsid	i
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x2>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2001      	movs	r0, #1
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_MspInit+0x30>)
 800078e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000790:	4301      	orrs	r1, r0
 8000792:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4002      	ands	r2, r0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007a2:	30bf      	adds	r0, #191	; 0xbf
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	430a      	orrs	r2, r1
 80007a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007aa:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	400b      	ands	r3, r1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007b2:	f000 f979 	bl	8000aa8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bd07      	pop	{r0, r1, r2, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler>

080007be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler>

080007c0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f95d 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bd10      	pop	{r4, pc}

080007cc <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	4770      	bx	lr
	...

080007d0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	2100      	movs	r1, #0
 80007d6:	220c      	movs	r2, #12
 80007d8:	4668      	mov	r0, sp
 80007da:	f001 fcf1 	bl	80021c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007de:	4d14      	ldr	r5, [pc, #80]	; (8000830 <MX_TIM3_Init+0x60>)
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 0;
 80007e2:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 80007e4:	602b      	str	r3, [r5, #0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_TIM3_Init+0x68>)
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007e8:	0028      	movs	r0, r5
  htim3.Init.Period = 65535;
 80007ea:	60eb      	str	r3, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007ec:	2301      	movs	r3, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007ee:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 80007f0:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007f8:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007fa:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007fc:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007fe:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8000800:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000802:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000804:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000806:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000808:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800080a:	f001 f99d 	bl	8001b48 <HAL_TIM_Encoder_Init>
 800080e:	42a0      	cmp	r0, r4
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8000812:	f7ff ffb6 	bl	8000782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000816:	4669      	mov	r1, sp
 8000818:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081e:	f001 f9e9 	bl	8001bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	2800      	cmp	r0, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000826:	f7ff ffac 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800082a:	b00d      	add	sp, #52	; 0x34
 800082c:	bd30      	pop	{r4, r5, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	200000d8 	.word	0x200000d8
 8000834:	40000400 	.word	0x40000400
 8000838:	0000ffff 	.word	0x0000ffff

0800083c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800083c:	b510      	push	{r4, lr}
 800083e:	0004      	movs	r4, r0
 8000840:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	2214      	movs	r2, #20
 8000844:	2100      	movs	r1, #0
 8000846:	a803      	add	r0, sp, #12
 8000848:	f001 fcba 	bl	80021c0 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_TIM_Encoder_MspInit+0x58>)
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d11c      	bne.n	800088e <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000854:	2102      	movs	r1, #2
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_TIM_Encoder_MspInit+0x5c>)
 8000858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085a:	430a      	orrs	r2, r1
 800085c:	63da      	str	r2, [r3, #60]	; 0x3c
 800085e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000860:	400a      	ands	r2, r1
 8000862:	9201      	str	r2, [sp, #4]
 8000864:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2201      	movs	r2, #1
 8000868:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800086a:	4310      	orrs	r0, r2
 800086c:	6358      	str	r0, [r3, #52]	; 0x34
 800086e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4013      	ands	r3, r2
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8000878:	23c0      	movs	r3, #192	; 0xc0
 800087a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000888:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f000 fbbf 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800088e:	b008      	add	sp, #32
 8000890:	bd10      	pop	{r4, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40000400 	.word	0x40000400
 8000898:	40021000 	.word	0x40021000

0800089c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800089c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_USART1_UART_Init+0x68>)
 80008a0:	4c19      	ldr	r4, [pc, #100]	; (8000908 <MX_USART1_UART_Init+0x6c>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a2:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 80008a4:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	23e1      	movs	r3, #225	; 0xe1
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	6162      	str	r2, [r4, #20]
  huart1.Init.BaudRate = 115200;
 80008aa:	025b      	lsls	r3, r3, #9
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008ac:	22c0      	movs	r2, #192	; 0xc0
  huart1.Init.BaudRate = 115200;
 80008ae:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b0:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008b2:	0092      	lsls	r2, r2, #2
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b4:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008bc:	61a2      	str	r2, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008be:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c0:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c2:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	f001 fb95 	bl	8001ff4 <HAL_UART_Init>
 80008ca:	2800      	cmp	r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x36>
  {
    Error_Handler();
 80008ce:	f7ff ff58 	bl	8000782 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	0020      	movs	r0, r4
 80008d6:	f001 fc05 	bl	80020e4 <HAL_UARTEx_SetTxFifoThreshold>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f7ff ff50 	bl	8000782 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0020      	movs	r0, r4
 80008e6:	f001 fc21 	bl	800212c <HAL_UARTEx_SetRxFifoThreshold>
 80008ea:	2800      	cmp	r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80008ee:	f7ff ff48 	bl	8000782 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f2:	0020      	movs	r0, r4
 80008f4:	f001 fbd8 	bl	80020a8 <HAL_UARTEx_DisableFifoMode>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 80008fc:	f7ff ff41 	bl	8000782 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000900:	bd10      	pop	{r4, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40013800 	.word	0x40013800
 8000908:	20000124 	.word	0x20000124

0800090c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800090c:	b530      	push	{r4, r5, lr}
 800090e:	0004      	movs	r4, r0
 8000910:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	2214      	movs	r2, #20
 8000914:	2100      	movs	r1, #0
 8000916:	a804      	add	r0, sp, #16
 8000918:	f001 fc52 	bl	80021c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	221c      	movs	r2, #28
 800091e:	2100      	movs	r1, #0
 8000920:	a809      	add	r0, sp, #36	; 0x24
 8000922:	f001 fc4d 	bl	80021c0 <memset>
  if(uartHandle->Instance==USART1)
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <HAL_UART_MspInit+0xa0>)
 8000928:	6822      	ldr	r2, [r4, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d13b      	bne.n	80009a6 <HAL_UART_MspInit+0x9a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800092e:	2301      	movs	r3, #1
 8000930:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000936:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f001 f80a 	bl	8001950 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	2800      	cmp	r0, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x38>
    {
      Error_Handler();
 8000940:	f7ff ff1f 	bl	8000782 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000944:	2080      	movs	r0, #128	; 0x80
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0xa4>)
 8000948:	01c0      	lsls	r0, r0, #7
 800094a:	6c19      	ldr	r1, [r3, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 800094e:	4301      	orrs	r1, r0
 8000950:	6419      	str	r1, [r3, #64]	; 0x40
 8000952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000956:	4002      	ands	r2, r0
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	2201      	movs	r2, #1
 800095e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4311      	orrs	r1, r2
 8000964:	6359      	str	r1, [r3, #52]	; 0x34
 8000966:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4011      	ands	r1, r2
 800096c:	9102      	str	r1, [sp, #8]
 800096e:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000972:	4329      	orrs	r1, r5
 8000974:	6359      	str	r1, [r3, #52]	; 0x34
 8000976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	402b      	ands	r3, r5
 800097c:	9303      	str	r3, [sp, #12]
 800097e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000980:	23c0      	movs	r3, #192	; 0xc0
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800098c:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f000 fb3d 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_UART_MspInit+0xa8>)
 8000996:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000998:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009a0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f000 fb33 	bl	800100c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009a6:	b011      	add	sp, #68	; 0x44
 80009a8:	bd30      	pop	{r4, r5, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000400 	.word	0x50000400

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f7ff ff06 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e6:	f001 fbc7 	bl	8002178 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ea:	f7ff feba 	bl	8000762 <main>

080009ee <LoopForever>:

LoopForever:
  b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08002288 	.word	0x08002288
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	200001b8 	.word	0x200001b8

08000a08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_InitTick+0x44>)
{
 8000a10:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000a12:	7819      	ldrb	r1, [r3, #0]
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d101      	bne.n	8000a1c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a1c:	20fa      	movs	r0, #250	; 0xfa
 8000a1e:	0080      	lsls	r0, r0, #2
 8000a20:	f7ff fb78 	bl	8000114 <__udivsi3>
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_InitTick+0x48>)
 8000a26:	0001      	movs	r1, r0
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f7ff fb73 	bl	8000114 <__udivsi3>
 8000a2e:	f000 fad3 	bl	8000fd8 <HAL_SYSTICK_Config>
 8000a32:	1e04      	subs	r4, r0, #0
 8000a34:	d1f0      	bne.n	8000a18 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	2d03      	cmp	r5, #3
 8000a38:	d8ee      	bhi.n	8000a18 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	0029      	movs	r1, r5
 8000a40:	4240      	negs	r0, r0
 8000a42:	f000 fa9f 	bl	8000f84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_InitTick+0x4c>)
 8000a48:	0020      	movs	r0, r4
 8000a4a:	601d      	str	r5, [r3, #0]
  return status;
 8000a4c:	e7e5      	b.n	8000a1a <HAL_InitTick+0xe>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000004 	.word	0x20000004
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_Init+0x24>)
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	6811      	ldr	r1, [r2, #0]
{
 8000a64:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a66:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a68:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6c:	f7ff ffce 	bl	8000a0c <HAL_InitTick>
 8000a70:	1e04      	subs	r4, r0, #0
 8000a72:	d103      	bne.n	8000a7c <HAL_Init+0x20>
  HAL_MspInit();
 8000a74:	f7ff fe88 	bl	8000788 <HAL_MspInit>
}
 8000a78:	0020      	movs	r0, r4
 8000a7a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000a7c:	2401      	movs	r4, #1
 8000a7e:	e7fb      	b.n	8000a78 <HAL_Init+0x1c>
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x10>)
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_IncTick+0x14>)
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	185b      	adds	r3, r3, r1
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	4770      	bx	lr
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200001b4 	.word	0x200001b4
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <HAL_GetTick+0x8>)
 8000a9e:	6818      	ldr	r0, [r3, #0]
}
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	200001b4 	.word	0x200001b4

08000aa8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8000aaa:	4904      	ldr	r1, [pc, #16]	; (8000abc <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000aac:	6813      	ldr	r3, [r2, #0]
 8000aae:	400b      	ands	r3, r1
 8000ab0:	4303      	orrs	r3, r0
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	4770      	bx	lr
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	fffff9ff 	.word	0xfffff9ff

08000ac0 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ac0:	6880      	ldr	r0, [r0, #8]
 8000ac2:	0740      	lsls	r0, r0, #29
 8000ac4:	0fc0      	lsrs	r0, r0, #31
}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ac8:	2300      	movs	r3, #0
{
 8000aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000acc:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000ace:	9305      	str	r3, [sp, #20]

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8000ad0:	3301      	adds	r3, #1
{
 8000ad2:	1e04      	subs	r4, r0, #0
    return HAL_ERROR;
 8000ad4:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000ad6:	d100      	bne.n	8000ada <HAL_ADC_Init+0x12>
 8000ad8:	e0c1      	b.n	8000c5e <HAL_ADC_Init+0x196>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ada:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d105      	bne.n	8000aec <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ae0:	f7ff fcd4 	bl	800048c <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ae4:	0023      	movs	r3, r4
 8000ae6:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000aea:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aec:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000aee:	6826      	ldr	r6, [r4, #0]
 8000af0:	055b      	lsls	r3, r3, #21
 8000af2:	68b2      	ldr	r2, [r6, #8]
 8000af4:	421a      	tst	r2, r3
 8000af6:	d100      	bne.n	8000afa <HAL_ADC_Init+0x32>
 8000af8:	e0b4      	b.n	8000c64 <HAL_ADC_Init+0x19c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afa:	2200      	movs	r2, #0
 8000afc:	68b3      	ldr	r3, [r6, #8]
 8000afe:	9201      	str	r2, [sp, #4]
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	d408      	bmi.n	8000b16 <HAL_ADC_Init+0x4e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b04:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b06:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b08:	6da2      	ldr	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000b0a:	9501      	str	r5, [sp, #4]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000b12:	432b      	orrs	r3, r5
 8000b14:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b16:	0030      	movs	r0, r6
 8000b18:	f7ff ffd2 	bl	8000ac0 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000b20:	401a      	ands	r2, r3
 8000b22:	4310      	orrs	r0, r2
 8000b24:	d000      	beq.n	8000b28 <HAL_ADC_Init+0x60>
 8000b26:	e0ec      	b.n	8000d02 <HAL_ADC_Init+0x23a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b2a:	4a79      	ldr	r2, [pc, #484]	; (8000d10 <HAL_ADC_Init+0x248>)
  uint32_t tmpCFGR2 = 0UL;
 8000b2c:	0001      	movs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	401a      	ands	r2, r3
 8000b30:	2302      	movs	r3, #2
 8000b32:	4313      	orrs	r3, r2
 8000b34:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b36:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	07d2      	lsls	r2, r2, #31
 8000b3c:	d431      	bmi.n	8000ba2 <HAL_ADC_Init+0xda>

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b3e:	0026      	movs	r6, r4
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	3118      	adds	r1, #24
 8000b44:	438a      	bics	r2, r1
 8000b46:	68a1      	ldr	r1, [r4, #8]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b48:	363c      	adds	r6, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	60da      	str	r2, [r3, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000b4e:	6862      	ldr	r2, [r4, #4]
 8000b50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b52:	7835      	ldrb	r5, [r6, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000b54:	0f97      	lsrs	r7, r2, #30
 8000b56:	07bf      	lsls	r7, r7, #30
 8000b58:	4339      	orrs	r1, r7
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b5a:	9502      	str	r5, [sp, #8]
 8000b5c:	2d01      	cmp	r5, #1
 8000b5e:	d108      	bne.n	8000b72 <HAL_ADC_Init+0xaa>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000b60:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8000b62:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000b64:	4335      	orrs	r5, r6
 8000b66:	4329      	orrs	r1, r5
 8000b68:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000b6a:	4329      	orrs	r1, r5
 8000b6c:	9d02      	ldr	r5, [sp, #8]
 8000b6e:	4339      	orrs	r1, r7
 8000b70:	4329      	orrs	r1, r5
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000b72:	691e      	ldr	r6, [r3, #16]
 8000b74:	4f67      	ldr	r7, [pc, #412]	; (8000d14 <HAL_ADC_Init+0x24c>)
 8000b76:	403e      	ands	r6, r7
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000b78:	2780      	movs	r7, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8000b7a:	430e      	orrs	r6, r1
 8000b7c:	611e      	str	r6, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000b7e:	0056      	lsls	r6, r2, #1
 8000b80:	0876      	lsrs	r6, r6, #1
 8000b82:	05ff      	lsls	r7, r7, #23
 8000b84:	42be      	cmp	r6, r7
 8000b86:	d00c      	beq.n	8000ba2 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000b88:	2680      	movs	r6, #128	; 0x80
 8000b8a:	0636      	lsls	r6, r6, #24
 8000b8c:	42b2      	cmp	r2, r6
 8000b8e:	d008      	beq.n	8000ba2 <HAL_ADC_Init+0xda>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000b90:	4e61      	ldr	r6, [pc, #388]	; (8000d18 <HAL_ADC_Init+0x250>)
 8000b92:	4f62      	ldr	r7, [pc, #392]	; (8000d1c <HAL_ADC_Init+0x254>)
 8000b94:	6835      	ldr	r5, [r6, #0]
 8000b96:	402f      	ands	r7, r5
 8000b98:	25f0      	movs	r5, #240	; 0xf0
 8000b9a:	03ad      	lsls	r5, r5, #14
 8000b9c:	402a      	ands	r2, r5
 8000b9e:	433a      	orrs	r2, r7
 8000ba0:	6032      	str	r2, [r6, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ba2:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ba4:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ba6:	03b6      	lsls	r6, r6, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ba8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000baa:	4316      	orrs	r6, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bac:	7ea2      	ldrb	r2, [r4, #26]
 8000bae:	4694      	mov	ip, r2
 8000bb0:	0357      	lsls	r7, r2, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_ADC_Init+0xf4>
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	0152      	lsls	r2, r2, #5
 8000bbc:	68e5      	ldr	r5, [r4, #12]
 8000bbe:	432e      	orrs	r6, r5
                 hadc->Init.DataAlign                                           |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bc0:	6925      	ldr	r5, [r4, #16]
 8000bc2:	433e      	orrs	r6, r7
 8000bc4:	9603      	str	r6, [sp, #12]
 8000bc6:	9502      	str	r5, [sp, #8]
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	da60      	bge.n	8000c8e <HAL_ADC_Init+0x1c6>
 8000bcc:	006f      	lsls	r7, r5, #1
 8000bce:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bd0:	0026      	movs	r6, r4
 8000bd2:	362c      	adds	r6, #44	; 0x2c
 8000bd4:	7836      	ldrb	r6, [r6, #0]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bd6:	9d03      	ldr	r5, [sp, #12]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bd8:	0076      	lsls	r6, r6, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000bda:	432e      	orrs	r6, r5
 8000bdc:	4332      	orrs	r2, r6

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bde:	1c66      	adds	r6, r4, #1
 8000be0:	7ff6      	ldrb	r6, [r6, #31]
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000be2:	433a      	orrs	r2, r7
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be4:	2e01      	cmp	r6, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_ADC_Init+0x12c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be8:	4665      	mov	r5, ip
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d152      	bne.n	8000c94 <HAL_ADC_Init+0x1cc>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bee:	2680      	movs	r6, #128	; 0x80
 8000bf0:	0276      	lsls	r6, r6, #9
 8000bf2:	4332      	orrs	r2, r6
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d005      	beq.n	8000c06 <HAL_ADC_Init+0x13e>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000bfa:	27e0      	movs	r7, #224	; 0xe0
 8000bfc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000bfe:	007f      	lsls	r7, r7, #1
 8000c00:	403e      	ands	r6, r7
 8000c02:	432e      	orrs	r6, r5
 8000c04:	4332      	orrs	r2, r6
                   hadc->Init.ExternalTrigConvEdge);
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000c06:	68de      	ldr	r6, [r3, #12]
 8000c08:	4f45      	ldr	r7, [pc, #276]	; (8000d20 <HAL_ADC_Init+0x258>)
  MODIFY_REG(ADCx->SMPR,
 8000c0a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000c0c:	403e      	ands	r6, r7
 8000c0e:	4316      	orrs	r6, r2
 8000c10:	60de      	str	r6, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000c12:	691e      	ldr	r6, [r3, #16]
 8000c14:	4f43      	ldr	r7, [pc, #268]	; (8000d24 <HAL_ADC_Init+0x25c>)
 8000c16:	403e      	ands	r6, r7
 8000c18:	4331      	orrs	r1, r6
 8000c1a:	2607      	movs	r6, #7
 8000c1c:	2770      	movs	r7, #112	; 0x70
 8000c1e:	6119      	str	r1, [r3, #16]
 8000c20:	6959      	ldr	r1, [r3, #20]
 8000c22:	43b1      	bics	r1, r6
 8000c24:	4329      	orrs	r1, r5
 8000c26:	6159      	str	r1, [r3, #20]
 8000c28:	695e      	ldr	r6, [r3, #20]
 8000c2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000c2c:	43be      	bics	r6, r7
 8000c2e:	0109      	lsls	r1, r1, #4
 8000c30:	4331      	orrs	r1, r6
 8000c32:	6159      	str	r1, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000c34:	9902      	ldr	r1, [sp, #8]
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d134      	bne.n	8000ca4 <HAL_ADC_Init+0x1dc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000c3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c3c:	3910      	subs	r1, #16
      if (ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000c3e:	4301      	orrs	r1, r0
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000c40:	6299      	str	r1, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4938      	ldr	r1, [pc, #224]	; (8000d28 <HAL_ADC_Init+0x260>)
 8000c46:	400b      	ands	r3, r1
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d14d      	bne.n	8000ce8 <HAL_ADC_Init+0x220>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	2300      	movs	r3, #0

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c4e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000c50:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000c52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c54:	4393      	bics	r3, r2
 8000c56:	001a      	movs	r2, r3
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8000c5e:	9801      	ldr	r0, [sp, #4]
 8000c60:	b007      	add	sp, #28
 8000c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8000c64:	68b2      	ldr	r2, [r6, #8]
 8000c66:	4931      	ldr	r1, [pc, #196]	; (8000d2c <HAL_ADC_Init+0x264>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_ADC_Init+0x268>)
 8000c70:	4930      	ldr	r1, [pc, #192]	; (8000d34 <HAL_ADC_Init+0x26c>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	f7ff fa4e 	bl	8000114 <__udivsi3>
 8000c78:	3001      	adds	r0, #1
 8000c7a:	0040      	lsls	r0, r0, #1
 8000c7c:	9005      	str	r0, [sp, #20]
    while (wait_loop_index != 0UL)
 8000c7e:	9b05      	ldr	r3, [sp, #20]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d100      	bne.n	8000c86 <HAL_ADC_Init+0x1be>
 8000c84:	e739      	b.n	8000afa <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8000c86:	9b05      	ldr	r3, [sp, #20]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	9305      	str	r3, [sp, #20]
 8000c8c:	e7f7      	b.n	8000c7e <HAL_ADC_Init+0x1b6>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c8e:	2780      	movs	r7, #128	; 0x80
 8000c90:	03bf      	lsls	r7, r7, #14
 8000c92:	e79d      	b.n	8000bd0 <HAL_ADC_Init+0x108>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c94:	2720      	movs	r7, #32
 8000c96:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8000c98:	432f      	orrs	r7, r5
 8000c9a:	65a7      	str	r7, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9c:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 8000c9e:	433e      	orrs	r6, r7
 8000ca0:	65e6      	str	r6, [r4, #92]	; 0x5c
 8000ca2:	e7a7      	b.n	8000bf4 <HAL_ADC_Init+0x12c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	9d02      	ldr	r5, [sp, #8]
 8000ca8:	0389      	lsls	r1, r1, #14
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d1c9      	bne.n	8000c42 <HAL_ADC_Init+0x17a>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000cae:	270f      	movs	r7, #15
 8000cb0:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000cb2:	0035      	movs	r5, r6
 8000cb4:	0081      	lsls	r1, r0, #2
 8000cb6:	40cd      	lsrs	r5, r1
 8000cb8:	0029      	movs	r1, r5
 8000cba:	4039      	ands	r1, r7
 8000cbc:	290f      	cmp	r1, #15
 8000cbe:	d00d      	beq.n	8000cdc <HAL_ADC_Init+0x214>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	2808      	cmp	r0, #8
 8000cc4:	d1f5      	bne.n	8000cb2 <HAL_ADC_Init+0x1ea>
        MODIFY_REG(hadc->Instance->CHSELR,
 8000cc6:	201c      	movs	r0, #28
 8000cc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cca:	69e1      	ldr	r1, [r4, #28]
 8000ccc:	3901      	subs	r1, #1
 8000cce:	0089      	lsls	r1, r1, #2
 8000cd0:	4001      	ands	r1, r0
 8000cd2:	382c      	subs	r0, #44	; 0x2c
 8000cd4:	4088      	lsls	r0, r1
 8000cd6:	0001      	movs	r1, r0
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	e7b1      	b.n	8000c40 <HAL_ADC_Init+0x178>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000cdc:	2801      	cmp	r0, #1
 8000cde:	d1f2      	bne.n	8000cc6 <HAL_ADC_Init+0x1fe>
        SET_BIT(hadc->Instance->CHSELR,
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ce4:	4249      	negs	r1, r1
 8000ce6:	e7aa      	b.n	8000c3e <HAL_ADC_Init+0x176>
      ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	2212      	movs	r2, #18
 8000cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cec:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000cee:	4393      	bics	r3, r2
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8000cfa:	9501      	str	r5, [sp, #4]
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	432b      	orrs	r3, r5
 8000cfe:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8000d00:	e7ad      	b.n	8000c5e <HAL_ADC_Init+0x196>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d02:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000d04:	4313      	orrs	r3, r2
 8000d06:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	e7a7      	b.n	8000c5e <HAL_ADC_Init+0x196>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	fffffefd 	.word	0xfffffefd
 8000d14:	1ffffc02 	.word	0x1ffffc02
 8000d18:	40012708 	.word	0x40012708
 8000d1c:	ffc3ffff 	.word	0xffc3ffff
 8000d20:	fffe0219 	.word	0xfffe0219
 8000d24:	dffffc02 	.word	0xdffffc02
 8000d28:	833fffe7 	.word	0x833fffe7
 8000d2c:	6fffffe8 	.word	0x6fffffe8
 8000d30:	20000000 	.word	0x20000000
 8000d34:	00030d40 	.word	0x00030d40

08000d38 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000d38:	2300      	movs	r3, #0
{
 8000d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3c:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8000d3e:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000d40:	0003      	movs	r3, r0
 8000d42:	3354      	adds	r3, #84	; 0x54
 8000d44:	781a      	ldrb	r2, [r3, #0]
{
 8000d46:	0005      	movs	r5, r0
 8000d48:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	2a01      	cmp	r2, #1
 8000d4e:	d100      	bne.n	8000d52 <HAL_ADC_ConfigChannel+0x1a>
 8000d50:	e0c3      	b.n	8000eda <HAL_ADC_ConfigChannel+0x1a2>
 8000d52:	2401      	movs	r4, #1
 8000d54:	701c      	strb	r4, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d56:	6828      	ldr	r0, [r5, #0]
 8000d58:	f7ff feb2 	bl	8000ac0 <LL_ADC_REG_IsConversionOngoing>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_ADC_ConfigChannel+0x2a>
 8000d60:	e0f9      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x21e>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	6873      	ldr	r3, [r6, #4]
 8000d66:	0612      	lsls	r2, r2, #24
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	4694      	mov	ip, r2
 8000d6e:	692f      	ldr	r7, [r5, #16]
 8000d70:	9a01      	ldr	r2, [sp, #4]
 8000d72:	439f      	bics	r7, r3
 8000d74:	6833      	ldr	r3, [r6, #0]
 8000d76:	2a02      	cmp	r2, #2
 8000d78:	d100      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x44>
 8000d7a:	e0c2      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x1ca>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000d7c:	0359      	lsls	r1, r3, #13
 8000d7e:	0b49      	lsrs	r1, r1, #13
 8000d80:	682a      	ldr	r2, [r5, #0]
 8000d82:	9102      	str	r1, [sp, #8]
 8000d84:	4567      	cmp	r7, ip
 8000d86:	d10f      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x70>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d88:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8000d8e:	68b1      	ldr	r1, [r6, #8]
 8000d90:	6954      	ldr	r4, [r2, #20]
 8000d92:	0218      	lsls	r0, r3, #8
 8000d94:	4e73      	ldr	r6, [pc, #460]	; (8000f64 <HAL_ADC_ConfigChannel+0x22c>)
 8000d96:	4001      	ands	r1, r0
 8000d98:	4031      	ands	r1, r6
 8000d9a:	4384      	bics	r4, r0
 8000d9c:	4321      	orrs	r1, r4
 8000d9e:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db64      	blt.n	8000e6e <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2000      	movs	r0, #0
}
 8000da6:	e095      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000da8:	211f      	movs	r1, #31
 8000daa:	9f01      	ldr	r7, [sp, #4]
 8000dac:	400f      	ands	r7, r1
 8000dae:	46bc      	mov	ip, r7
 8000db0:	270f      	movs	r7, #15
 8000db2:	4661      	mov	r1, ip
 8000db4:	408f      	lsls	r7, r1
 8000db6:	43f9      	mvns	r1, r7
 8000db8:	9103      	str	r1, [sp, #12]
 8000dba:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8000dbc:	43b9      	bics	r1, r7
 8000dbe:	000f      	movs	r7, r1
 8000dc0:	9902      	ldr	r1, [sp, #8]
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d114      	bne.n	8000df0 <HAL_ADC_ConfigChannel+0xb8>
 8000dc6:	0e98      	lsrs	r0, r3, #26
 8000dc8:	311f      	adds	r1, #31
 8000dca:	4008      	ands	r0, r1
 8000dcc:	4661      	mov	r1, ip
 8000dce:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000dd0:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000dd2:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000dd4:	0889      	lsrs	r1, r1, #2
 8000dd6:	69e8      	ldr	r0, [r5, #28]
 8000dd8:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000dda:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000ddc:	4281      	cmp	r1, r0
 8000dde:	d8d6      	bhi.n	8000d8e <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8000de0:	4664      	mov	r4, ip
 8000de2:	0099      	lsls	r1, r3, #2
 8000de4:	0f09      	lsrs	r1, r1, #28
 8000de6:	40a1      	lsls	r1, r4
 8000de8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000dea:	9c03      	ldr	r4, [sp, #12]
 8000dec:	4020      	ands	r0, r4
 8000dee:	e7cc      	b.n	8000d8a <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000df0:	4223      	tst	r3, r4
 8000df2:	d1eb      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000df4:	2102      	movs	r1, #2
 8000df6:	0020      	movs	r0, r4
 8000df8:	420b      	tst	r3, r1
 8000dfa:	d1e7      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000dfc:	0008      	movs	r0, r1
 8000dfe:	1849      	adds	r1, r1, r1
 8000e00:	420b      	tst	r3, r1
 8000e02:	d1e3      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e04:	3001      	adds	r0, #1
 8000e06:	0719      	lsls	r1, r3, #28
 8000e08:	d4e0      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	06d9      	lsls	r1, r3, #27
 8000e0e:	d4dd      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e10:	3001      	adds	r0, #1
 8000e12:	0699      	lsls	r1, r3, #26
 8000e14:	d4da      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e16:	3001      	adds	r0, #1
 8000e18:	0659      	lsls	r1, r3, #25
 8000e1a:	d4d7      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e1c:	3001      	adds	r0, #1
 8000e1e:	0619      	lsls	r1, r3, #24
 8000e20:	d4d4      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e22:	3001      	adds	r0, #1
 8000e24:	05d9      	lsls	r1, r3, #23
 8000e26:	d4d1      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e28:	3001      	adds	r0, #1
 8000e2a:	0599      	lsls	r1, r3, #22
 8000e2c:	d4ce      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e2e:	3001      	adds	r0, #1
 8000e30:	0559      	lsls	r1, r3, #21
 8000e32:	d4cb      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e34:	3001      	adds	r0, #1
 8000e36:	0519      	lsls	r1, r3, #20
 8000e38:	d4c8      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e3a:	3001      	adds	r0, #1
 8000e3c:	04d9      	lsls	r1, r3, #19
 8000e3e:	d4c5      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e40:	3001      	adds	r0, #1
 8000e42:	0499      	lsls	r1, r3, #18
 8000e44:	d4c2      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e46:	3001      	adds	r0, #1
 8000e48:	0459      	lsls	r1, r3, #17
 8000e4a:	d4bf      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	0419      	lsls	r1, r3, #16
 8000e50:	d4bc      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e52:	3001      	adds	r0, #1
 8000e54:	03d9      	lsls	r1, r3, #15
 8000e56:	d4b9      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	0399      	lsls	r1, r3, #14
 8000e5c:	d4b6      	bmi.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	0018      	movs	r0, r3
 8000e62:	02c9      	lsls	r1, r1, #11
 8000e64:	4008      	ands	r0, r1
 8000e66:	420b      	tst	r3, r1
 8000e68:	d0b0      	beq.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
 8000e6a:	2012      	movs	r0, #18
 8000e6c:	e7ae      	b.n	8000dcc <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e6e:	24e0      	movs	r4, #224	; 0xe0
 8000e70:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <HAL_ADC_ConfigChannel+0x230>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e72:	483e      	ldr	r0, [pc, #248]	; (8000f6c <HAL_ADC_ConfigChannel+0x234>)
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	0464      	lsls	r4, r4, #17
 8000e78:	400c      	ands	r4, r1
 8000e7a:	4283      	cmp	r3, r0
 8000e7c:	d11a      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e82:	4219      	tst	r1, r3
 8000e84:	d18e      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e86:	6811      	ldr	r1, [r2, #0]
 8000e88:	4839      	ldr	r0, [pc, #228]	; (8000f70 <HAL_ADC_ConfigChannel+0x238>)
 8000e8a:	4001      	ands	r1, r0
 8000e8c:	4321      	orrs	r1, r4
 8000e8e:	4319      	orrs	r1, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_ADC_ConfigChannel+0x23c>)
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	4938      	ldr	r1, [pc, #224]	; (8000f78 <HAL_ADC_ConfigChannel+0x240>)
 8000e98:	f7ff f93c 	bl	8000114 <__udivsi3>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	4358      	muls	r0, r3
 8000ea2:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 8000ea4:	9b05      	ldr	r3, [sp, #20]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_ADC_ConfigChannel+0x174>
 8000eaa:	e77b      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
          {
            wait_loop_index--;
 8000eac:	9b05      	ldr	r3, [sp, #20]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	9305      	str	r3, [sp, #20]
 8000eb2:	e7f7      	b.n	8000ea4 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000eb4:	4831      	ldr	r0, [pc, #196]	; (8000f7c <HAL_ADC_ConfigChannel+0x244>)
 8000eb6:	4283      	cmp	r3, r0
 8000eb8:	d111      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x1a6>
 8000eba:	2680      	movs	r6, #128	; 0x80
 8000ebc:	0008      	movs	r0, r1
 8000ebe:	0476      	lsls	r6, r6, #17
 8000ec0:	4030      	ands	r0, r6
 8000ec2:	4231      	tst	r1, r6
 8000ec4:	d000      	beq.n	8000ec8 <HAL_ADC_ConfigChannel+0x190>
 8000ec6:	e76d      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
 8000ec8:	6811      	ldr	r1, [r2, #0]
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_ADC_ConfigChannel+0x238>)
 8000ecc:	4019      	ands	r1, r3
 8000ece:	4321      	orrs	r1, r4
 8000ed0:	430e      	orrs	r6, r1
 8000ed2:	6016      	str	r6, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	3554      	adds	r5, #84	; 0x54
 8000ed8:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 8000eda:	b007      	add	sp, #28
 8000edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000ede:	4828      	ldr	r0, [pc, #160]	; (8000f80 <HAL_ADC_ConfigChannel+0x248>)
 8000ee0:	4283      	cmp	r3, r0
 8000ee2:	d000      	beq.n	8000ee6 <HAL_ADC_ConfigChannel+0x1ae>
 8000ee4:	e75e      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	0008      	movs	r0, r1
 8000eea:	03db      	lsls	r3, r3, #15
 8000eec:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000eee:	4219      	tst	r1, r3
 8000ef0:	d000      	beq.n	8000ef4 <HAL_ADC_ConfigChannel+0x1bc>
 8000ef2:	e757      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	4e1e      	ldr	r6, [pc, #120]	; (8000f70 <HAL_ADC_ConfigChannel+0x238>)
 8000ef8:	4031      	ands	r1, r6
 8000efa:	4321      	orrs	r1, r4
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	e7e8      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000f02:	4567      	cmp	r7, ip
 8000f04:	d105      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8000f06:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f08:	0359      	lsls	r1, r3, #13
 8000f0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000f0c:	0b49      	lsrs	r1, r1, #13
 8000f0e:	438a      	bics	r2, r1
 8000f10:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db00      	blt.n	8000f18 <HAL_ADC_ConfigChannel+0x1e0>
 8000f16:	e745      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <HAL_ADC_ConfigChannel+0x234>)
 8000f1c:	6811      	ldr	r1, [r2, #0]
 8000f1e:	4283      	cmp	r3, r0
 8000f20:	d108      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000f22:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f24:	6810      	ldr	r0, [r2, #0]
 8000f26:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000f28:	4019      	ands	r1, r3
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_ADC_ConfigChannel+0x238>)
 8000f2c:	4003      	ands	r3, r0
 8000f2e:	4319      	orrs	r1, r3
 8000f30:	6011      	str	r1, [r2, #0]
 8000f32:	e737      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <HAL_ADC_ConfigChannel+0x244>)
 8000f36:	4283      	cmp	r3, r0
 8000f38:	d103      	bne.n	8000f42 <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	6810      	ldr	r0, [r2, #0]
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	e7f2      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8000f42:	480f      	ldr	r0, [pc, #60]	; (8000f80 <HAL_ADC_ConfigChannel+0x248>)
 8000f44:	4283      	cmp	r3, r0
 8000f46:	d000      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x212>
 8000f48:	e72c      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000f4a:	20c0      	movs	r0, #192	; 0xc0
 8000f4c:	0440      	lsls	r0, r0, #17
 8000f4e:	4001      	ands	r1, r0
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HAL_ADC_ConfigChannel+0x238>)
 8000f54:	e7ea      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f56:	2320      	movs	r3, #32
 8000f58:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f5a:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000f60:	e7b8      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x19c>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	07ffff00 	.word	0x07ffff00
 8000f68:	40012708 	.word	0x40012708
 8000f6c:	b0001000 	.word	0xb0001000
 8000f70:	fe3fffff 	.word	0xfe3fffff
 8000f74:	20000000 	.word	0x20000000
 8000f78:	00030d40 	.word	0x00030d40
 8000f7c:	b8004000 	.word	0xb8004000
 8000f80:	b4002000 	.word	0xb4002000

08000f84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b530      	push	{r4, r5, lr}
 8000f86:	25ff      	movs	r5, #255	; 0xff
 8000f88:	2403      	movs	r4, #3
 8000f8a:	002a      	movs	r2, r5
 8000f8c:	4004      	ands	r4, r0
 8000f8e:	00e4      	lsls	r4, r4, #3
 8000f90:	40a2      	lsls	r2, r4
 8000f92:	0189      	lsls	r1, r1, #6
 8000f94:	4029      	ands	r1, r5
 8000f96:	43d2      	mvns	r2, r2
 8000f98:	40a1      	lsls	r1, r4
 8000f9a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	db0a      	blt.n	8000fb6 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	24c0      	movs	r4, #192	; 0xc0
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_NVIC_SetPriority+0x4c>)
 8000fa4:	0880      	lsrs	r0, r0, #2
 8000fa6:	0080      	lsls	r0, r0, #2
 8000fa8:	18c0      	adds	r0, r0, r3
 8000faa:	00a4      	lsls	r4, r4, #2
 8000fac:	5903      	ldr	r3, [r0, r4]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	4311      	orrs	r1, r2
 8000fb2:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000fb4:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	4003      	ands	r3, r0
 8000fba:	3b08      	subs	r3, #8
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_NVIC_SetPriority+0x50>)
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	181b      	adds	r3, r3, r0
 8000fc4:	69d8      	ldr	r0, [r3, #28]
 8000fc6:	4002      	ands	r2, r0
 8000fc8:	4311      	orrs	r1, r2
 8000fca:	61d9      	str	r1, [r3, #28]
 8000fcc:	e7f2      	b.n	8000fb4 <HAL_NVIC_SetPriority+0x30>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	1e43      	subs	r3, r0, #1
 8000fdc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d20d      	bcs.n	8001000 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	6a03      	ldr	r3, [r0, #32]
 8000fee:	0609      	lsls	r1, r1, #24
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001000:	4770      	bx	lr
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	e000e010 	.word	0xe000e010
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800100c:	2300      	movs	r3, #0
{
 800100e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001010:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	680a      	ldr	r2, [r1, #0]
 8001014:	0014      	movs	r4, r2
 8001016:	40dc      	lsrs	r4, r3
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 800101a:	b005      	add	sp, #20
 800101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101e:	2501      	movs	r5, #1
 8001020:	0014      	movs	r4, r2
 8001022:	409d      	lsls	r5, r3
 8001024:	402c      	ands	r4, r5
 8001026:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001028:	422a      	tst	r2, r5
 800102a:	d100      	bne.n	800102e <HAL_GPIO_Init+0x22>
 800102c:	e08e      	b.n	800114c <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102e:	684a      	ldr	r2, [r1, #4]
 8001030:	005e      	lsls	r6, r3, #1
 8001032:	4694      	mov	ip, r2
 8001034:	2203      	movs	r2, #3
 8001036:	4664      	mov	r4, ip
 8001038:	4022      	ands	r2, r4
 800103a:	2403      	movs	r4, #3
 800103c:	40b4      	lsls	r4, r6
 800103e:	43e4      	mvns	r4, r4
 8001040:	9402      	str	r4, [sp, #8]
 8001042:	1e54      	subs	r4, r2, #1
 8001044:	2c01      	cmp	r4, #1
 8001046:	d82a      	bhi.n	800109e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001048:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104a:	9c02      	ldr	r4, [sp, #8]
 800104c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104e:	68cc      	ldr	r4, [r1, #12]
 8001050:	40b4      	lsls	r4, r6
 8001052:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001054:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001056:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	43ac      	bics	r4, r5
 800105c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	4664      	mov	r4, ip
 8001060:	0924      	lsrs	r4, r4, #4
 8001062:	403c      	ands	r4, r7
 8001064:	409c      	lsls	r4, r3
 8001066:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001068:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800106a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800106c:	9c02      	ldr	r4, [sp, #8]
 800106e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001070:	688c      	ldr	r4, [r1, #8]
 8001072:	40b4      	lsls	r4, r6
 8001074:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001076:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	2a02      	cmp	r2, #2
 800107a:	d112      	bne.n	80010a2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 800107c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107e:	2507      	movs	r5, #7
 8001080:	00a4      	lsls	r4, r4, #2
 8001082:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001084:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001086:	9403      	str	r4, [sp, #12]
 8001088:	240f      	movs	r4, #15
 800108a:	401d      	ands	r5, r3
 800108c:	00ad      	lsls	r5, r5, #2
 800108e:	40ac      	lsls	r4, r5
 8001090:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001092:	690c      	ldr	r4, [r1, #16]
 8001094:	40ac      	lsls	r4, r5
 8001096:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001098:	9c03      	ldr	r4, [sp, #12]
 800109a:	6227      	str	r7, [r4, #32]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109e:	2a03      	cmp	r2, #3
 80010a0:	d1e3      	bne.n	800106a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 80010a2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a4:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a6:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	4025      	ands	r5, r4
 80010aa:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ac:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80010ae:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b0:	24c0      	movs	r4, #192	; 0xc0
 80010b2:	4662      	mov	r2, ip
 80010b4:	02a4      	lsls	r4, r4, #10
 80010b6:	4222      	tst	r2, r4
 80010b8:	d048      	beq.n	800114c <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 80010ba:	4a25      	ldr	r2, [pc, #148]	; (8001150 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010bc:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 80010be:	089c      	lsrs	r4, r3, #2
 80010c0:	00a4      	lsls	r4, r4, #2
 80010c2:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010c4:	220f      	movs	r2, #15
 80010c6:	401d      	ands	r5, r3
 80010c8:	00ed      	lsls	r5, r5, #3
 80010ca:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010cc:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 80010ce:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d0:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010d2:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d4:	2200      	movs	r2, #0
 80010d6:	42b8      	cmp	r0, r7
 80010d8:	d00c      	beq.n	80010f4 <HAL_GPIO_Init+0xe8>
 80010da:	4f1e      	ldr	r7, [pc, #120]	; (8001154 <HAL_GPIO_Init+0x148>)
 80010dc:	3201      	adds	r2, #1
 80010de:	42b8      	cmp	r0, r7
 80010e0:	d008      	beq.n	80010f4 <HAL_GPIO_Init+0xe8>
 80010e2:	4f1d      	ldr	r7, [pc, #116]	; (8001158 <HAL_GPIO_Init+0x14c>)
 80010e4:	3201      	adds	r2, #1
 80010e6:	42b8      	cmp	r0, r7
 80010e8:	d004      	beq.n	80010f4 <HAL_GPIO_Init+0xe8>
 80010ea:	4f1c      	ldr	r7, [pc, #112]	; (800115c <HAL_GPIO_Init+0x150>)
 80010ec:	3201      	adds	r2, #1
 80010ee:	42b8      	cmp	r0, r7
 80010f0:	d000      	beq.n	80010f4 <HAL_GPIO_Init+0xe8>
 80010f2:	3202      	adds	r2, #2
 80010f4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f6:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010f8:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 80010fa:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->IMR1;
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x154>)
        temp &= ~(iocurrent);
 80010fe:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR1;
 8001100:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
          temp |= iocurrent;
 8001102:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001104:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001106:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001108:	03ff      	lsls	r7, r7, #15
 800110a:	d401      	bmi.n	8001110 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 800110c:	0035      	movs	r5, r6
 800110e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001110:	4667      	mov	r7, ip
        EXTI->IMR1 = temp;
 8001112:	67d5      	str	r5, [r2, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001114:	4d13      	ldr	r5, [pc, #76]	; (8001164 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8001116:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->EMR1;
 8001118:	6fea      	ldr	r2, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800111a:	4316      	orrs	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111c:	03bf      	lsls	r7, r7, #14
 800111e:	d401      	bmi.n	8001124 <HAL_GPIO_Init+0x118>
        temp &= ~(iocurrent);
 8001120:	4022      	ands	r2, r4
 8001122:	0016      	movs	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001124:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_GPIO_Init+0x144>)
 8001128:	67ee      	str	r6, [r5, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800112a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800112c:	9d01      	ldr	r5, [sp, #4]
 800112e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001130:	02ff      	lsls	r7, r7, #11
 8001132:	d401      	bmi.n	8001138 <HAL_GPIO_Init+0x12c>
        temp &= ~(iocurrent);
 8001134:	0035      	movs	r5, r6
 8001136:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 800113a:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800113c:	6855      	ldr	r5, [r2, #4]
          temp |= iocurrent;
 800113e:	9e01      	ldr	r6, [sp, #4]
 8001140:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001142:	02bf      	lsls	r7, r7, #10
 8001144:	d401      	bmi.n	800114a <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 8001146:	4025      	ands	r5, r4
 8001148:	002e      	movs	r6, r5
        EXTI->FTSR1 = temp;
 800114a:	6056      	str	r6, [r2, #4]
    position++;
 800114c:	3301      	adds	r3, #1
 800114e:	e760      	b.n	8001012 <HAL_GPIO_Init+0x6>
 8001150:	40021800 	.word	0x40021800
 8001154:	50000400 	.word	0x50000400
 8001158:	50000800 	.word	0x50000800
 800115c:	50000c00 	.word	0x50000c00
 8001160:	40021804 	.word	0x40021804
 8001164:	40021808 	.word	0x40021808

08001168 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	2a00      	cmp	r2, #0
 800116a:	d001      	beq.n	8001170 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001170:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001172:	e7fc      	b.n	800116e <HAL_GPIO_WritePin+0x6>

08001174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800117a:	2c00      	cmp	r4, #0
 800117c:	d03f      	beq.n	80011fe <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117e:	0025      	movs	r5, r4
 8001180:	3541      	adds	r5, #65	; 0x41
 8001182:	782b      	ldrb	r3, [r5, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800118a:	0023      	movs	r3, r4
 800118c:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800118e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001190:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001192:	f7ff fa6f 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001196:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800119a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800119c:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800119e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68a6      	ldr	r6, [r4, #8]
 80011a4:	438a      	bics	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <HAL_I2C_Init+0xa0>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_I2C_Init+0xa4>)
 80011b4:	4011      	ands	r1, r2
 80011b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011b8:	2801      	cmp	r0, #1
 80011ba:	d121      	bne.n	8001200 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0209      	lsls	r1, r1, #8
 80011c0:	4331      	orrs	r1, r6
 80011c2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011c4:	6858      	ldr	r0, [r3, #4]
 80011c6:	4915      	ldr	r1, [pc, #84]	; (800121c <HAL_I2C_Init+0xa8>)
 80011c8:	4301      	orrs	r1, r0
 80011ca:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011cc:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ce:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011d0:	400a      	ands	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d4:	6961      	ldr	r1, [r4, #20]
 80011d6:	6922      	ldr	r2, [r4, #16]
 80011d8:	430a      	orrs	r2, r1
                             (hi2c->Init.OwnAddress2Masks << 8));
 80011da:	69a1      	ldr	r1, [r4, #24]
 80011dc:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011e2:	6a21      	ldr	r1, [r4, #32]
 80011e4:	69e2      	ldr	r2, [r4, #28]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80011ea:	2201      	movs	r2, #1
 80011ec:	6819      	ldr	r1, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011f6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011fa:	3442      	adds	r4, #66	; 0x42
 80011fc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001200:	2184      	movs	r1, #132	; 0x84
 8001202:	0209      	lsls	r1, r1, #8
 8001204:	4331      	orrs	r1, r6
 8001206:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001208:	2802      	cmp	r0, #2
 800120a:	d1db      	bne.n	80011c4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0109      	lsls	r1, r1, #4
 8001210:	6059      	str	r1, [r3, #4]
 8001212:	e7d7      	b.n	80011c4 <HAL_I2C_Init+0x50>
 8001214:	f0ffffff 	.word	0xf0ffffff
 8001218:	ffff7fff 	.word	0xffff7fff
 800121c:	02008000 	.word	0x02008000

08001220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001222:	0004      	movs	r4, r0
 8001224:	3441      	adds	r4, #65	; 0x41
 8001226:	7822      	ldrb	r2, [r4, #0]
{
 8001228:	0003      	movs	r3, r0
 800122a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800122c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800122e:	b2d6      	uxtb	r6, r2
 8001230:	2a20      	cmp	r2, #32
 8001232:	d118      	bne.n	8001266 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001234:	001d      	movs	r5, r3
 8001236:	3540      	adds	r5, #64	; 0x40
 8001238:	782a      	ldrb	r2, [r5, #0]
 800123a:	2a01      	cmp	r2, #1
 800123c:	d013      	beq.n	8001266 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3a23      	subs	r2, #35	; 0x23
 8001246:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800124a:	4391      	bics	r1, r2
 800124c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8001252:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001254:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	4339      	orrs	r1, r7
 800125a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001262:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001264:	7028      	strb	r0, [r5, #0]
  }
}
 8001266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001268:	ffffefff 	.word	0xffffefff

0800126c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126c:	0002      	movs	r2, r0
{
 800126e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001270:	3241      	adds	r2, #65	; 0x41
 8001272:	7814      	ldrb	r4, [r2, #0]
{
 8001274:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001276:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001278:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800127a:	2c20      	cmp	r4, #32
 800127c:	d117      	bne.n	80012ae <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800127e:	001c      	movs	r4, r3
 8001280:	3440      	adds	r4, #64	; 0x40
 8001282:	7826      	ldrb	r6, [r4, #0]
 8001284:	2e01      	cmp	r6, #1
 8001286:	d012      	beq.n	80012ae <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001288:	3022      	adds	r0, #34	; 0x22
 800128a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3823      	subs	r0, #35	; 0x23
 8001290:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001292:	4f07      	ldr	r7, [pc, #28]	; (80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001294:	4386      	bics	r6, r0
 8001296:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001298:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800129a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800129c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800129e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80012a0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	4308      	orrs	r0, r1
 80012a6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80012a8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80012ac:	7020      	strb	r0, [r4, #0]
  }
}
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b0:	fffff0ff 	.word	0xfffff0ff

080012b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012b6:	4c11      	ldr	r4, [pc, #68]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x48>)
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012ba:	6823      	ldr	r3, [r4, #0]
{
 80012bc:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012be:	400b      	ands	r3, r1
 80012c0:	4303      	orrs	r3, r0
 80012c2:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c4:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012c6:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d10e      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80012d0:	490d      	ldr	r1, [pc, #52]	; (8001308 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	2306      	movs	r3, #6
 80012d6:	4358      	muls	r0, r3
 80012d8:	f7fe ff1c 	bl	8000114 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012dc:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012de:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	6961      	ldr	r1, [r4, #20]
 80012e4:	0008      	movs	r0, r1
 80012e6:	4010      	ands	r0, r2
 80012e8:	4211      	tst	r1, r2
 80012ea:	d100      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80012ec:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80012f2:	3b01      	subs	r3, #1
 80012f4:	e7f5      	b.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80012f6:	2003      	movs	r0, #3
 80012f8:	e7f8      	b.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x38>
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	40007000 	.word	0x40007000
 8001300:	fffff9ff 	.word	0xfffff9ff
 8001304:	20000000 	.word	0x20000000
 8001308:	000f4240 	.word	0x000f4240

0800130c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	0004      	movs	r4, r0
 8001310:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001312:	2800      	cmp	r0, #0
 8001314:	d023      	beq.n	800135e <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	6803      	ldr	r3, [r0, #0]
 8001318:	07db      	lsls	r3, r3, #31
 800131a:	d410      	bmi.n	800133e <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	079b      	lsls	r3, r3, #30
 8001320:	d45e      	bmi.n	80013e0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	071b      	lsls	r3, r3, #28
 8001326:	d500      	bpl.n	800132a <HAL_RCC_OscConfig+0x1e>
 8001328:	e0c3      	b.n	80014b2 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	075b      	lsls	r3, r3, #29
 800132e:	d500      	bpl.n	8001332 <HAL_RCC_OscConfig+0x26>
 8001330:	e0f5      	b.n	800151e <HAL_RCC_OscConfig+0x212>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001332:	69e2      	ldr	r2, [r4, #28]
 8001334:	2a00      	cmp	r2, #0
 8001336:	d000      	beq.n	800133a <HAL_RCC_OscConfig+0x2e>
 8001338:	e17c      	b.n	8001634 <HAL_RCC_OscConfig+0x328>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800133a:	2000      	movs	r0, #0
 800133c:	e029      	b.n	8001392 <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133e:	2238      	movs	r2, #56	; 0x38
 8001340:	4db0      	ldr	r5, [pc, #704]	; (8001604 <HAL_RCC_OscConfig+0x2f8>)
 8001342:	68ab      	ldr	r3, [r5, #8]
 8001344:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001346:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001348:	2b10      	cmp	r3, #16
 800134a:	d10a      	bne.n	8001362 <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134c:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800134e:	0793      	lsls	r3, r2, #30
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	039b      	lsls	r3, r3, #14
 8001356:	d5e1      	bpl.n	800131c <HAL_RCC_OscConfig+0x10>
 8001358:	6863      	ldr	r3, [r4, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1de      	bne.n	800131c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e017      	b.n	8001392 <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001362:	2b08      	cmp	r3, #8
 8001364:	d0f5      	beq.n	8001352 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	0252      	lsls	r2, r2, #9
 800136c:	4293      	cmp	r3, r2
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x8a>
 8001370:	682a      	ldr	r2, [r5, #0]
 8001372:	4313      	orrs	r3, r2
 8001374:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001376:	f7ff fb91 	bl	8000a9c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800137c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137e:	02bf      	lsls	r7, r7, #10
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	423b      	tst	r3, r7
 8001384:	d1ca      	bne.n	800131c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001386:	f7ff fb89 	bl	8000a9c <HAL_GetTick>
 800138a:	1b80      	subs	r0, r0, r6
 800138c:	2864      	cmp	r0, #100	; 0x64
 800138e:	d9f7      	bls.n	8001380 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001390:	2003      	movs	r0, #3
}
 8001392:	b005      	add	sp, #20
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	21a0      	movs	r1, #160	; 0xa0
 8001398:	02c9      	lsls	r1, r1, #11
 800139a:	428b      	cmp	r3, r1
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_OscConfig+0xa4>
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	6829      	ldr	r1, [r5, #0]
 80013a2:	02db      	lsls	r3, r3, #11
 80013a4:	430b      	orrs	r3, r1
 80013a6:	602b      	str	r3, [r5, #0]
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ae:	e7e2      	b.n	8001376 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	682a      	ldr	r2, [r5, #0]
 80013b2:	4995      	ldr	r1, [pc, #596]	; (8001608 <HAL_RCC_OscConfig+0x2fc>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	602a      	str	r2, [r5, #0]
 80013b8:	682a      	ldr	r2, [r5, #0]
 80013ba:	4994      	ldr	r1, [pc, #592]	; (800160c <HAL_RCC_OscConfig+0x300>)
 80013bc:	400a      	ands	r2, r1
 80013be:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1d8      	bne.n	8001376 <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb6a 	bl	8000a9c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c8:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80013ca:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013cc:	02bf      	lsls	r7, r7, #10
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	423b      	tst	r3, r7
 80013d2:	d0a3      	beq.n	800131c <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb62 	bl	8000a9c <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2864      	cmp	r0, #100	; 0x64
 80013dc:	d9f7      	bls.n	80013ce <HAL_RCC_OscConfig+0xc2>
 80013de:	e7d7      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e0:	2338      	movs	r3, #56	; 0x38
 80013e2:	4d88      	ldr	r5, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x2f8>)
 80013e4:	68aa      	ldr	r2, [r5, #8]
 80013e6:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e8:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d128      	bne.n	8001440 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	2103      	movs	r1, #3
 80013f0:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013f2:	2a02      	cmp	r2, #2
 80013f4:	d126      	bne.n	8001444 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f6:	682a      	ldr	r2, [r5, #0]
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	d502      	bpl.n	8001402 <HAL_RCC_OscConfig+0xf6>
 80013fc:	68e2      	ldr	r2, [r4, #12]
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d0ad      	beq.n	800135e <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	6869      	ldr	r1, [r5, #4]
 8001404:	6962      	ldr	r2, [r4, #20]
 8001406:	4882      	ldr	r0, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x304>)
 8001408:	0212      	lsls	r2, r2, #8
 800140a:	4001      	ands	r1, r0
 800140c:	430a      	orrs	r2, r1
 800140e:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	4a7f      	ldr	r2, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x308>)
 8001418:	4013      	ands	r3, r2
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	4a7d      	ldr	r2, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x30c>)
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	0f5b      	lsrs	r3, r3, #29
 8001428:	40da      	lsrs	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	4a7b      	ldr	r2, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x310>)
 800142e:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001430:	4b7b      	ldr	r3, [pc, #492]	; (8001620 <HAL_RCC_OscConfig+0x314>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f7ff faea 	bl	8000a0c <HAL_InitTick>
 8001438:	2800      	cmp	r0, #0
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x132>
 800143c:	e771      	b.n	8001322 <HAL_RCC_OscConfig+0x16>
 800143e:	e78e      	b.n	800135e <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0d8      	beq.n	80013f6 <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001444:	68e3      	ldr	r3, [r4, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d020      	beq.n	800148c <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_RCC_OscConfig+0x308>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001450:	4013      	ands	r3, r2
 8001452:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001454:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001456:	4313      	orrs	r3, r2
 8001458:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	682a      	ldr	r2, [r5, #0]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4313      	orrs	r3, r2
 8001462:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001464:	f7ff fb1a 	bl	8000a9c <HAL_GetTick>
 8001468:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	423b      	tst	r3, r7
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	686a      	ldr	r2, [r5, #4]
 8001472:	6963      	ldr	r3, [r4, #20]
 8001474:	4966      	ldr	r1, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x304>)
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	400a      	ands	r2, r1
 800147a:	4313      	orrs	r3, r2
 800147c:	606b      	str	r3, [r5, #4]
 800147e:	e750      	b.n	8001322 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fb0c 	bl	8000a9c <HAL_GetTick>
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	2802      	cmp	r0, #2
 8001488:	d9ef      	bls.n	800146a <HAL_RCC_OscConfig+0x15e>
 800148a:	e781      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x318>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001490:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001492:	4013      	ands	r3, r2
 8001494:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001496:	f7ff fb01 	bl	8000a9c <HAL_GetTick>
 800149a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	00ff      	lsls	r7, r7, #3
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	423b      	tst	r3, r7
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x19a>
 80014a4:	e73d      	b.n	8001322 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff faf9 	bl	8000a9c <HAL_GetTick>
 80014aa:	1b80      	subs	r0, r0, r6
 80014ac:	2802      	cmp	r0, #2
 80014ae:	d9f6      	bls.n	800149e <HAL_RCC_OscConfig+0x192>
 80014b0:	e76e      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b2:	2138      	movs	r1, #56	; 0x38
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_RCC_OscConfig+0x2f8>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	001d      	movs	r5, r3
 80014ba:	400a      	ands	r2, r1
 80014bc:	2a18      	cmp	r2, #24
 80014be:	d108      	bne.n	80014d2 <HAL_RCC_OscConfig+0x1c6>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	079b      	lsls	r3, r3, #30
 80014c4:	d400      	bmi.n	80014c8 <HAL_RCC_OscConfig+0x1bc>
 80014c6:	e730      	b.n	800132a <HAL_RCC_OscConfig+0x1e>
 80014c8:	69a3      	ldr	r3, [r4, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d000      	beq.n	80014d0 <HAL_RCC_OscConfig+0x1c4>
 80014ce:	e72c      	b.n	800132a <HAL_RCC_OscConfig+0x1e>
 80014d0:	e745      	b.n	800135e <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	69a2      	ldr	r2, [r4, #24]
 80014d4:	2301      	movs	r3, #1
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	d010      	beq.n	80014fc <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_LSI_ENABLE();
 80014da:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014dc:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80014de:	4313      	orrs	r3, r2
 80014e0:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80014e2:	f7ff fadb 	bl	8000a9c <HAL_GetTick>
 80014e6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80014ea:	423b      	tst	r3, r7
 80014ec:	d000      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1e4>
 80014ee:	e71c      	b.n	800132a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fad4 	bl	8000a9c <HAL_GetTick>
 80014f4:	1b80      	subs	r0, r0, r6
 80014f6:	2802      	cmp	r0, #2
 80014f8:	d9f6      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1dc>
 80014fa:	e749      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 80014fc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fe:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001500:	439a      	bics	r2, r3
 8001502:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001504:	f7ff faca 	bl	8000a9c <HAL_GetTick>
 8001508:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800150c:	423b      	tst	r3, r7
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x206>
 8001510:	e70b      	b.n	800132a <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fac3 	bl	8000a9c <HAL_GetTick>
 8001516:	1b80      	subs	r0, r0, r6
 8001518:	2802      	cmp	r0, #2
 800151a:	d9f6      	bls.n	800150a <HAL_RCC_OscConfig+0x1fe>
 800151c:	e738      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800151e:	2138      	movs	r1, #56	; 0x38
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x2f8>)
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	001d      	movs	r5, r3
 8001526:	400a      	ands	r2, r1
 8001528:	2a20      	cmp	r2, #32
 800152a:	d108      	bne.n	800153e <HAL_RCC_OscConfig+0x232>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	079b      	lsls	r3, r3, #30
 8001530:	d400      	bmi.n	8001534 <HAL_RCC_OscConfig+0x228>
 8001532:	e6fe      	b.n	8001332 <HAL_RCC_OscConfig+0x26>
 8001534:	68a3      	ldr	r3, [r4, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d000      	beq.n	800153c <HAL_RCC_OscConfig+0x230>
 800153a:	e6fa      	b.n	8001332 <HAL_RCC_OscConfig+0x26>
 800153c:	e70f      	b.n	800135e <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001540:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001544:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001546:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001548:	4213      	tst	r3, r2
 800154a:	d108      	bne.n	800155e <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800154e:	4313      	orrs	r3, r2
 8001550:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001552:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001554:	4013      	ands	r3, r2
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155e:	2780      	movs	r7, #128	; 0x80
 8001560:	4e31      	ldr	r6, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x31c>)
 8001562:	007f      	lsls	r7, r7, #1
 8001564:	6833      	ldr	r3, [r6, #0]
 8001566:	423b      	tst	r3, r7
 8001568:	d015      	beq.n	8001596 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	68a3      	ldr	r3, [r4, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d122      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2aa>
 8001570:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001572:	4313      	orrs	r3, r2
 8001574:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001576:	f7ff fa91 	bl	8000a9c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800157c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001580:	423b      	tst	r3, r7
 8001582:	d038      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2ea>
      if (pwrclkchanged == SET)
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d000      	beq.n	800158c <HAL_RCC_OscConfig+0x280>
 800158a:	e6d2      	b.n	8001332 <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800158e:	4a27      	ldr	r2, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x320>)
 8001590:	4013      	ands	r3, r2
 8001592:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001594:	e6cd      	b.n	8001332 <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001596:	6833      	ldr	r3, [r6, #0]
 8001598:	433b      	orrs	r3, r7
 800159a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800159c:	f7ff fa7e 	bl	8000a9c <HAL_GetTick>
 80015a0:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	423b      	tst	r3, r7
 80015a6:	d1e0      	bne.n	800156a <HAL_RCC_OscConfig+0x25e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a8:	f7ff fa78 	bl	8000a9c <HAL_GetTick>
 80015ac:	9b01      	ldr	r3, [sp, #4]
 80015ae:	1ac0      	subs	r0, r0, r3
 80015b0:	2802      	cmp	r0, #2
 80015b2:	d9f6      	bls.n	80015a2 <HAL_RCC_OscConfig+0x296>
 80015b4:	e6ec      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2bc>
 80015bc:	3b01      	subs	r3, #1
 80015be:	4313      	orrs	r3, r2
 80015c0:	65eb      	str	r3, [r5, #92]	; 0x5c
 80015c2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015c4:	2301      	movs	r3, #1
 80015c6:	e7d4      	b.n	8001572 <HAL_RCC_OscConfig+0x266>
 80015c8:	2101      	movs	r1, #1
 80015ca:	438a      	bics	r2, r1
 80015cc:	65ea      	str	r2, [r5, #92]	; 0x5c
 80015ce:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015d0:	3103      	adds	r1, #3
 80015d2:	438a      	bics	r2, r1
 80015d4:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1cd      	bne.n	8001576 <HAL_RCC_OscConfig+0x26a>
        tickstart = HAL_GetTick();
 80015da:	f7ff fa5f 	bl	8000a9c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015de:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80015e0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80015e4:	423b      	tst	r3, r7
 80015e6:	d0cd      	beq.n	8001584 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fa58 	bl	8000a9c <HAL_GetTick>
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x324>)
 80015ee:	1b80      	subs	r0, r0, r6
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d9f6      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2d6>
 80015f4:	e6cc      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fa51 	bl	8000a9c <HAL_GetTick>
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_RCC_OscConfig+0x324>)
 80015fc:	1b80      	subs	r0, r0, r6
 80015fe:	4298      	cmp	r0, r3
 8001600:	d9bd      	bls.n	800157e <HAL_RCC_OscConfig+0x272>
 8001602:	e6c5      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
 8001604:	40021000 	.word	0x40021000
 8001608:	fffeffff 	.word	0xfffeffff
 800160c:	fffbffff 	.word	0xfffbffff
 8001610:	ffff80ff 	.word	0xffff80ff
 8001614:	ffffc7ff 	.word	0xffffc7ff
 8001618:	00f42400 	.word	0x00f42400
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	fffffeff 	.word	0xfffffeff
 8001628:	40007000 	.word	0x40007000
 800162c:	efffffff 	.word	0xefffffff
 8001630:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001634:	2038      	movs	r0, #56	; 0x38
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_OscConfig+0x428>)
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	001d      	movs	r5, r3
 800163c:	4001      	ands	r1, r0
 800163e:	2910      	cmp	r1, #16
 8001640:	d052      	beq.n	80016e8 <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_PLL_DISABLE();
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	493c      	ldr	r1, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x42c>)
 8001646:	400b      	ands	r3, r1
 8001648:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800164a:	2a02      	cmp	r2, #2
 800164c:	d135      	bne.n	80016ba <HAL_RCC_OscConfig+0x3ae>
        tickstart = HAL_GetTick();
 800164e:	f7ff fa25 	bl	8000a9c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001654:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001656:	04bf      	lsls	r7, r7, #18
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	423b      	tst	r3, r7
 800165c:	d127      	bne.n	80016ae <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001660:	6a23      	ldr	r3, [r4, #32]
 8001662:	68ea      	ldr	r2, [r5, #12]
 8001664:	430b      	orrs	r3, r1
 8001666:	4935      	ldr	r1, [pc, #212]	; (800173c <HAL_RCC_OscConfig+0x430>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001668:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166a:	400a      	ands	r2, r1
 800166c:	4313      	orrs	r3, r2
 800166e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001670:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001672:	4313      	orrs	r3, r2
 8001674:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001676:	4313      	orrs	r3, r2
 8001678:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800167a:	0212      	lsls	r2, r2, #8
 800167c:	4313      	orrs	r3, r2
 800167e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	682a      	ldr	r2, [r5, #0]
 8001684:	045b      	lsls	r3, r3, #17
 8001686:	4313      	orrs	r3, r2
 8001688:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	68ea      	ldr	r2, [r5, #12]
 800168e:	055b      	lsls	r3, r3, #21
 8001690:	4313      	orrs	r3, r2
 8001692:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001694:	f7ff fa02 	bl	8000a9c <HAL_GetTick>
 8001698:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	4233      	tst	r3, r6
 800169e:	d000      	beq.n	80016a2 <HAL_RCC_OscConfig+0x396>
 80016a0:	e64b      	b.n	800133a <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f9fb 	bl	8000a9c <HAL_GetTick>
 80016a6:	1b00      	subs	r0, r0, r4
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d9f6      	bls.n	800169a <HAL_RCC_OscConfig+0x38e>
 80016ac:	e670      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff f9f5 	bl	8000a9c <HAL_GetTick>
 80016b2:	1b80      	subs	r0, r0, r6
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d9cf      	bls.n	8001658 <HAL_RCC_OscConfig+0x34c>
 80016b8:	e66a      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80016ba:	2203      	movs	r2, #3
 80016bc:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016be:	2680      	movs	r6, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80016c0:	4393      	bics	r3, r2
 80016c2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016c4:	68eb      	ldr	r3, [r5, #12]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_RCC_OscConfig+0x434>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016ca:	4013      	ands	r3, r2
 80016cc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80016ce:	f7ff f9e5 	bl	8000a9c <HAL_GetTick>
 80016d2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	4233      	tst	r3, r6
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x3d0>
 80016da:	e62e      	b.n	800133a <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f9de 	bl	8000a9c <HAL_GetTick>
 80016e0:	1b00      	subs	r0, r0, r4
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f6      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3c8>
 80016e6:	e653      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x3e2>
 80016ec:	e637      	b.n	800135e <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80016f0:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	6a21      	ldr	r1, [r4, #32]
 80016f4:	401a      	ands	r2, r3
 80016f6:	428a      	cmp	r2, r1
 80016f8:	d000      	beq.n	80016fc <HAL_RCC_OscConfig+0x3f0>
 80016fa:	e630      	b.n	800135e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016fc:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001700:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	428a      	cmp	r2, r1
 8001704:	d000      	beq.n	8001708 <HAL_RCC_OscConfig+0x3fc>
 8001706:	e62a      	b.n	800135e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001708:	21fe      	movs	r1, #254	; 0xfe
 800170a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800170c:	01c9      	lsls	r1, r1, #7
 800170e:	4019      	ands	r1, r3
 8001710:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001712:	4291      	cmp	r1, r2
 8001714:	d000      	beq.n	8001718 <HAL_RCC_OscConfig+0x40c>
 8001716:	e622      	b.n	800135e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001718:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800171c:	0392      	lsls	r2, r2, #14
 800171e:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001720:	428a      	cmp	r2, r1
 8001722:	d000      	beq.n	8001726 <HAL_RCC_OscConfig+0x41a>
 8001724:	e61b      	b.n	800135e <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001726:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001728:	0f5b      	lsrs	r3, r3, #29
 800172a:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x426>
 8001730:	e603      	b.n	800133a <HAL_RCC_OscConfig+0x2e>
 8001732:	e614      	b.n	800135e <HAL_RCC_OscConfig+0x52>
 8001734:	40021000 	.word	0x40021000
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	1fc1808c 	.word	0x1fc1808c
 8001740:	effeffff 	.word	0xeffeffff

08001744 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001744:	2338      	movs	r3, #56	; 0x38
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	6891      	ldr	r1, [r2, #8]
 800174c:	0014      	movs	r4, r2
 800174e:	4219      	tst	r1, r3
 8001750:	d105      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001752:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001756:	049b      	lsls	r3, r3, #18
 8001758:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800175a:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800175c:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800175e:	6891      	ldr	r1, [r2, #8]
 8001760:	4019      	ands	r1, r3
 8001762:	2908      	cmp	r1, #8
 8001764:	d027      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x72>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001766:	6891      	ldr	r1, [r2, #8]
 8001768:	4019      	ands	r1, r3
 800176a:	2910      	cmp	r1, #16
 800176c:	d117      	bne.n	800179e <HAL_RCC_GetSysClockFreq+0x5a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800176e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001770:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001772:	43db      	mvns	r3, r3
 8001774:	227f      	movs	r2, #127	; 0x7f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001776:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001778:	0649      	lsls	r1, r1, #25
 800177a:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800177c:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800177e:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001780:	4015      	ands	r5, r2
    switch (pllsource)
 8001782:	079b      	lsls	r3, r3, #30
 8001784:	d109      	bne.n	800179a <HAL_RCC_GetSysClockFreq+0x56>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001788:	f7fe fcc4 	bl	8000114 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800178c:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800178e:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001790:	0f49      	lsrs	r1, r1, #29
 8001792:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001794:	f7fe fcbe 	bl	8000114 <__udivsi3>
  return sysclockfreq;
 8001798:	e7e0      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800179a:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x80>)
 800179c:	e7f4      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800179e:	6891      	ldr	r1, [r2, #8]
 80017a0:	4019      	ands	r1, r3
 80017a2:	2920      	cmp	r1, #32
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017a6:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 80017a8:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b18      	cmp	r3, #24
 80017ae:	d1d5      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80017b0:	20fa      	movs	r0, #250	; 0xfa
 80017b2:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80017b4:	e7d2      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80017b6:	4804      	ldr	r0, [pc, #16]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x84>)
 80017b8:	e7d0      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80017ba:	2080      	movs	r0, #128	; 0x80
 80017bc:	0200      	lsls	r0, r0, #8
 80017be:	e7cd      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x18>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	00f42400 	.word	0x00f42400
 80017c8:	02dc6c00 	.word	0x02dc6c00

080017cc <HAL_RCC_ClockConfig>:
{
 80017cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017ce:	0005      	movs	r5, r0
 80017d0:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
}
 80017d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017da:	2707      	movs	r7, #7
 80017dc:	4c4a      	ldr	r4, [pc, #296]	; (8001908 <HAL_RCC_ClockConfig+0x13c>)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	403b      	ands	r3, r7
 80017e2:	428b      	cmp	r3, r1
 80017e4:	d32a      	bcc.n	800183c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e6:	6829      	ldr	r1, [r5, #0]
 80017e8:	078b      	lsls	r3, r1, #30
 80017ea:	d43b      	bmi.n	8001864 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ec:	07cb      	lsls	r3, r1, #31
 80017ee:	d448      	bmi.n	8001882 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	2707      	movs	r7, #7
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	403b      	ands	r3, r7
 80017f6:	42b3      	cmp	r3, r6
 80017f8:	d90a      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	43bb      	bics	r3, r7
 80017fe:	4333      	orrs	r3, r6
 8001800:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001802:	f7ff f94b 	bl	8000a9c <HAL_GetTick>
 8001806:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	403b      	ands	r3, r7
 800180c:	42b3      	cmp	r3, r6
 800180e:	d16b      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	4c3e      	ldr	r4, [pc, #248]	; (800190c <HAL_RCC_ClockConfig+0x140>)
 8001814:	075b      	lsls	r3, r3, #29
 8001816:	d46f      	bmi.n	80018f8 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001818:	f7ff ff94 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 800181c:	68a3      	ldr	r3, [r4, #8]
 800181e:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_RCC_ClockConfig+0x144>)
 8001820:	051b      	lsls	r3, r3, #20
 8001822:	0f1b      	lsrs	r3, r3, #28
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	589b      	ldr	r3, [r3, r2]
 8001828:	221f      	movs	r2, #31
 800182a:	4013      	ands	r3, r2
 800182c:	40d8      	lsrs	r0, r3
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_ClockConfig+0x148>)
 8001830:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_ClockConfig+0x14c>)
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	f7ff f8e9 	bl	8000a0c <HAL_InitTick>
 800183a:	e7cd      	b.n	80017d8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	43bb      	bics	r3, r7
 8001840:	430b      	orrs	r3, r1
 8001842:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001844:	f7ff f92a 	bl	8000a9c <HAL_GetTick>
 8001848:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	403b      	ands	r3, r7
 800184e:	42b3      	cmp	r3, r6
 8001850:	d0c9      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff f923 	bl	8000a9c <HAL_GetTick>
 8001856:	9b01      	ldr	r3, [sp, #4]
 8001858:	1ac0      	subs	r0, r0, r3
 800185a:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_ClockConfig+0x150>)
 800185c:	4298      	cmp	r0, r3
 800185e:	d9f4      	bls.n	800184a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001860:	2003      	movs	r0, #3
 8001862:	e7b9      	b.n	80017d8 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_RCC_ClockConfig+0x140>)
 8001866:	074b      	lsls	r3, r1, #29
 8001868:	d504      	bpl.n	8001874 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800186a:	23e0      	movs	r3, #224	; 0xe0
 800186c:	6890      	ldr	r0, [r2, #8]
 800186e:	01db      	lsls	r3, r3, #7
 8001870:	4303      	orrs	r3, r0
 8001872:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	6893      	ldr	r3, [r2, #8]
 8001876:	482a      	ldr	r0, [pc, #168]	; (8001920 <HAL_RCC_ClockConfig+0x154>)
 8001878:	4003      	ands	r3, r0
 800187a:	68a8      	ldr	r0, [r5, #8]
 800187c:	4303      	orrs	r3, r0
 800187e:	6093      	str	r3, [r2, #8]
 8001880:	e7b4      	b.n	80017ec <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	686a      	ldr	r2, [r5, #4]
 8001884:	4f21      	ldr	r7, [pc, #132]	; (800190c <HAL_RCC_ClockConfig+0x140>)
 8001886:	2a01      	cmp	r2, #1
 8001888:	d119      	bne.n	80018be <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	039b      	lsls	r3, r3, #14
 800188e:	d5a2      	bpl.n	80017d6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001890:	2107      	movs	r1, #7
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	438b      	bics	r3, r1
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800189a:	f7ff f8ff 	bl	8000a9c <HAL_GetTick>
 800189e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a0:	2338      	movs	r3, #56	; 0x38
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	401a      	ands	r2, r3
 80018a6:	686b      	ldr	r3, [r5, #4]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d0a0      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7ff f8f5 	bl	8000a9c <HAL_GetTick>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	1ac0      	subs	r0, r0, r3
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_ClockConfig+0x150>)
 80018b8:	4298      	cmp	r0, r3
 80018ba:	d9f1      	bls.n	80018a0 <HAL_RCC_ClockConfig+0xd4>
 80018bc:	e7d0      	b.n	8001860 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018be:	2a02      	cmp	r2, #2
 80018c0:	d103      	bne.n	80018ca <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	019b      	lsls	r3, r3, #6
 80018c6:	d4e3      	bmi.n	8001890 <HAL_RCC_ClockConfig+0xc4>
 80018c8:	e785      	b.n	80017d6 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d103      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	055b      	lsls	r3, r3, #21
 80018d2:	d4dd      	bmi.n	8001890 <HAL_RCC_ClockConfig+0xc4>
 80018d4:	e77f      	b.n	80017d6 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018d6:	2302      	movs	r3, #2
 80018d8:	2a03      	cmp	r2, #3
 80018da:	d103      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018de:	4219      	tst	r1, r3
 80018e0:	d1d6      	bne.n	8001890 <HAL_RCC_ClockConfig+0xc4>
 80018e2:	e778      	b.n	80017d6 <HAL_RCC_ClockConfig+0xa>
 80018e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80018e6:	e7fa      	b.n	80018de <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f8d8 	bl	8000a9c <HAL_GetTick>
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	1ac0      	subs	r0, r0, r3
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x150>)
 80018f2:	4298      	cmp	r0, r3
 80018f4:	d988      	bls.n	8001808 <HAL_RCC_ClockConfig+0x3c>
 80018f6:	e7b3      	b.n	8001860 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	68a3      	ldr	r3, [r4, #8]
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x158>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ea      	ldr	r2, [r5, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	60a3      	str	r3, [r4, #8]
 8001904:	e788      	b.n	8001818 <HAL_RCC_ClockConfig+0x4c>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40022000 	.word	0x40022000
 800190c:	40021000 	.word	0x40021000
 8001910:	080021e8 	.word	0x080021e8
 8001914:	20000000 	.word	0x20000000
 8001918:	20000008 	.word	0x20000008
 800191c:	00001388 	.word	0x00001388
 8001920:	fffff0ff 	.word	0xfffff0ff
 8001924:	ffff8fff 	.word	0xffff8fff

08001928 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	045b      	lsls	r3, r3, #17
 8001930:	0f5b      	lsrs	r3, r3, #29
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	589b      	ldr	r3, [r3, r2]
 8001936:	221f      	movs	r2, #31
 8001938:	4013      	ands	r3, r2
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193c:	6810      	ldr	r0, [r2, #0]
 800193e:	40d8      	lsrs	r0, r3
}
 8001940:	4770      	bx	lr
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	08002228 	.word	0x08002228
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001954:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001956:	2000      	movs	r0, #0
{
 8001958:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800195a:	039b      	lsls	r3, r3, #14
 800195c:	d53b      	bpl.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	4c4d      	ldr	r4, [pc, #308]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001966:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001968:	4213      	tst	r3, r2
 800196a:	d108      	bne.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800196e:	4313      	orrs	r3, r2
 8001970:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001972:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001974:	4013      	ands	r3, r2
 8001976:	9303      	str	r3, [sp, #12]
 8001978:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197e:	2780      	movs	r7, #128	; 0x80
 8001980:	4e46      	ldr	r6, [pc, #280]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001982:	007f      	lsls	r7, r7, #1
 8001984:	6833      	ldr	r3, [r6, #0]
 8001986:	433b      	orrs	r3, r7
 8001988:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800198a:	f7ff f887 	bl	8000a9c <HAL_GetTick>
 800198e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001990:	6833      	ldr	r3, [r6, #0]
 8001992:	423b      	tst	r3, r7
 8001994:	d011      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001996:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	0011      	movs	r1, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4e40      	ldr	r6, [pc, #256]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80019a0:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019a2:	421a      	tst	r2, r3
 80019a4:	d002      	beq.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80019a6:	69ab      	ldr	r3, [r5, #24]
 80019a8:	4299      	cmp	r1, r3
 80019aa:	d156      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019ae:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019b0:	401e      	ands	r6, r3
 80019b2:	69ab      	ldr	r3, [r5, #24]
 80019b4:	431e      	orrs	r6, r3
 80019b6:	65e6      	str	r6, [r4, #92]	; 0x5c
 80019b8:	e006      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff f86f 	bl	8000a9c <HAL_GetTick>
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	1ac0      	subs	r0, r0, r3
 80019c2:	2802      	cmp	r0, #2
 80019c4:	d9e4      	bls.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c8:	9b00      	ldr	r3, [sp, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019d0:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019d6:	682a      	ldr	r2, [r5, #0]
 80019d8:	07d3      	lsls	r3, r2, #31
 80019da:	d506      	bpl.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019dc:	2403      	movs	r4, #3
 80019de:	492e      	ldr	r1, [pc, #184]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80019e0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80019e2:	43a3      	bics	r3, r4
 80019e4:	686c      	ldr	r4, [r5, #4]
 80019e6:	4323      	orrs	r3, r4
 80019e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019ea:	0793      	lsls	r3, r2, #30
 80019ec:	d506      	bpl.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019ee:	240c      	movs	r4, #12
 80019f0:	4929      	ldr	r1, [pc, #164]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80019f2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80019f4:	43a3      	bics	r3, r4
 80019f6:	68ac      	ldr	r4, [r5, #8]
 80019f8:	4323      	orrs	r3, r4
 80019fa:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019fc:	0693      	lsls	r3, r2, #26
 80019fe:	d506      	bpl.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a00:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001a02:	4c29      	ldr	r4, [pc, #164]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001a04:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001a06:	4023      	ands	r3, r4
 8001a08:	68ec      	ldr	r4, [r5, #12]
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a0e:	0453      	lsls	r3, r2, #17
 8001a10:	d50f      	bpl.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a12:	4921      	ldr	r1, [pc, #132]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001a14:	696c      	ldr	r4, [r5, #20]
 8001a16:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	05db      	lsls	r3, r3, #23
 8001a24:	429c      	cmp	r4, r3
 8001a26:	d104      	bne.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	68cc      	ldr	r4, [r1, #12]
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a32:	0513      	lsls	r3, r2, #20
 8001a34:	d50f      	bpl.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001a38:	4c1c      	ldr	r4, [pc, #112]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001a3c:	6929      	ldr	r1, [r5, #16]
 8001a3e:	4023      	ands	r3, r4
 8001a40:	430b      	orrs	r3, r1
 8001a42:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	01db      	lsls	r3, r3, #7
 8001a48:	4299      	cmp	r1, r3
 8001a4a:	d104      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	68d1      	ldr	r1, [r2, #12]
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	430b      	orrs	r3, r1
 8001a54:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001a56:	b005      	add	sp, #20
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a5a:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a5e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a60:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a62:	025b      	lsls	r3, r3, #9
 8001a64:	4303      	orrs	r3, r0
 8001a66:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a6a:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a6c:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6e:	4003      	ands	r3, r0
 8001a70:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8001a72:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a74:	07d3      	lsls	r3, r2, #31
 8001a76:	d599      	bpl.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8001a78:	f7ff f810 	bl	8000a9c <HAL_GetTick>
 8001a7c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a82:	4213      	tst	r3, r2
 8001a84:	d000      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8001a86:	e791      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff f808 	bl	8000a9c <HAL_GetTick>
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a8e:	1bc0      	subs	r0, r0, r7
 8001a90:	4298      	cmp	r0, r3
 8001a92:	d9f4      	bls.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001a94:	e797      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	fffffcff 	.word	0xfffffcff
 8001aa4:	efffffff 	.word	0xefffffff
 8001aa8:	ffffcfff 	.word	0xffffcfff
 8001aac:	ffff3fff 	.word	0xffff3fff
 8001ab0:	fffeffff 	.word	0xfffeffff
 8001ab4:	00001388 	.word	0x00001388

08001ab8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <TIM_Base_SetConfig+0x74>)
{
 8001aba:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001abc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001abe:	4290      	cmp	r0, r2
 8001ac0:	d002      	beq.n	8001ac8 <TIM_Base_SetConfig+0x10>
 8001ac2:	4c1b      	ldr	r4, [pc, #108]	; (8001b30 <TIM_Base_SetConfig+0x78>)
 8001ac4:	42a0      	cmp	r0, r4
 8001ac6:	d108      	bne.n	8001ada <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac8:	2470      	movs	r4, #112	; 0x70
 8001aca:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001acc:	684c      	ldr	r4, [r1, #4]
 8001ace:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad0:	4290      	cmp	r0, r2
 8001ad2:	d00e      	beq.n	8001af2 <TIM_Base_SetConfig+0x3a>
 8001ad4:	4c16      	ldr	r4, [pc, #88]	; (8001b30 <TIM_Base_SetConfig+0x78>)
 8001ad6:	42a0      	cmp	r0, r4
 8001ad8:	d00b      	beq.n	8001af2 <TIM_Base_SetConfig+0x3a>
 8001ada:	4c16      	ldr	r4, [pc, #88]	; (8001b34 <TIM_Base_SetConfig+0x7c>)
 8001adc:	42a0      	cmp	r0, r4
 8001ade:	d008      	beq.n	8001af2 <TIM_Base_SetConfig+0x3a>
 8001ae0:	4c15      	ldr	r4, [pc, #84]	; (8001b38 <TIM_Base_SetConfig+0x80>)
 8001ae2:	42a0      	cmp	r0, r4
 8001ae4:	d005      	beq.n	8001af2 <TIM_Base_SetConfig+0x3a>
 8001ae6:	4c15      	ldr	r4, [pc, #84]	; (8001b3c <TIM_Base_SetConfig+0x84>)
 8001ae8:	42a0      	cmp	r0, r4
 8001aea:	d002      	beq.n	8001af2 <TIM_Base_SetConfig+0x3a>
 8001aec:	4c14      	ldr	r4, [pc, #80]	; (8001b40 <TIM_Base_SetConfig+0x88>)
 8001aee:	42a0      	cmp	r0, r4
 8001af0:	d103      	bne.n	8001afa <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001af2:	4c14      	ldr	r4, [pc, #80]	; (8001b44 <TIM_Base_SetConfig+0x8c>)
 8001af4:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001af6:	68cc      	ldr	r4, [r1, #12]
 8001af8:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001afa:	2480      	movs	r4, #128	; 0x80
 8001afc:	43a3      	bics	r3, r4
 8001afe:	694c      	ldr	r4, [r1, #20]
 8001b00:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001b02:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b04:	688b      	ldr	r3, [r1, #8]
 8001b06:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b08:	680b      	ldr	r3, [r1, #0]
 8001b0a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b0c:	4290      	cmp	r0, r2
 8001b0e:	d008      	beq.n	8001b22 <TIM_Base_SetConfig+0x6a>
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <TIM_Base_SetConfig+0x80>)
 8001b12:	4298      	cmp	r0, r3
 8001b14:	d005      	beq.n	8001b22 <TIM_Base_SetConfig+0x6a>
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <TIM_Base_SetConfig+0x84>)
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	d002      	beq.n	8001b22 <TIM_Base_SetConfig+0x6a>
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <TIM_Base_SetConfig+0x88>)
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	d101      	bne.n	8001b26 <TIM_Base_SetConfig+0x6e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b22:	690b      	ldr	r3, [r1, #16]
 8001b24:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b26:	2301      	movs	r3, #1
 8001b28:	6143      	str	r3, [r0, #20]
}
 8001b2a:	bd10      	pop	{r4, pc}
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40002000 	.word	0x40002000
 8001b38:	40014000 	.word	0x40014000
 8001b3c:	40014400 	.word	0x40014400
 8001b40:	40014800 	.word	0x40014800
 8001b44:	fffffcff 	.word	0xfffffcff

08001b48 <HAL_TIM_Encoder_Init>:
{
 8001b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	000e      	movs	r6, r1
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
  if (htim == NULL)
 8001b50:	2c00      	cmp	r4, #0
 8001b52:	d048      	beq.n	8001be6 <HAL_TIM_Encoder_Init+0x9e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b54:	0025      	movs	r5, r4
 8001b56:	353d      	adds	r5, #61	; 0x3d
 8001b58:	782b      	ldrb	r3, [r5, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_TIM_Encoder_Init+0x24>
    htim->Lock = HAL_UNLOCKED;
 8001b60:	0023      	movs	r3, r4
 8001b62:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001b64:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8001b66:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Encoder_MspInit(htim);
 8001b68:	f7fe fe68 	bl	800083c <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001b6e:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	702b      	strb	r3, [r5, #0]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001b72:	c901      	ldmia	r1!, {r0}
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_TIM_Encoder_Init+0xa0>)
 8001b76:	6883      	ldr	r3, [r0, #8]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	f7ff ff9c 	bl	8001ab8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001b80:	6822      	ldr	r2, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001b82:	6833      	ldr	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001b84:	6891      	ldr	r1, [r2, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001b86:	6997      	ldr	r7, [r2, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8001b88:	4319      	orrs	r1, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_TIM_Encoder_Init+0xa4>)
  tmpsmcr |= sConfig->EncoderMode;
 8001b8c:	9101      	str	r1, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001b8e:	401f      	ands	r7, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001b90:	69b3      	ldr	r3, [r6, #24]
 8001b92:	68b1      	ldr	r1, [r6, #8]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	430b      	orrs	r3, r1
 8001b98:	433b      	orrs	r3, r7
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001b9a:	4f15      	ldr	r7, [pc, #84]	; (8001bf0 <HAL_TIM_Encoder_Init+0xa8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b9c:	6931      	ldr	r1, [r6, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001b9e:	401f      	ands	r7, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ba0:	69f3      	ldr	r3, [r6, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ba2:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ba4:	021b      	lsls	r3, r3, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	68f1      	ldr	r1, [r6, #12]
  tmpccer = htim->Instance->CCER;
 8001baa:	6a10      	ldr	r0, [r2, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6a31      	ldr	r1, [r6, #32]
 8001bb0:	0309      	lsls	r1, r1, #12
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	433b      	orrs	r3, r7
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001bb6:	27aa      	movs	r7, #170	; 0xaa
 8001bb8:	43b8      	bics	r0, r7
 8001bba:	0007      	movs	r7, r0
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bbc:	6971      	ldr	r1, [r6, #20]
 8001bbe:	6876      	ldr	r6, [r6, #4]
 8001bc0:	0108      	lsls	r0, r1, #4
 8001bc2:	4330      	orrs	r0, r6
  htim->Instance->SMCR = tmpsmcr;
 8001bc4:	9901      	ldr	r1, [sp, #4]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bc6:	4338      	orrs	r0, r7
  htim->Instance->SMCR = tmpsmcr;
 8001bc8:	6091      	str	r1, [r2, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001bca:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8001bcc:	6210      	str	r0, [r2, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bce:	0022      	movs	r2, r4
 8001bd0:	2301      	movs	r3, #1
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	3248      	adds	r2, #72	; 0x48
 8001bd6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	3a0a      	subs	r2, #10
 8001bdc:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bde:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	7193      	strb	r3, [r2, #6]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001be2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001be4:	702b      	strb	r3, [r5, #0]
}
 8001be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001be8:	fffebff8 	.word	0xfffebff8
 8001bec:	fffffcfc 	.word	0xfffffcfc
 8001bf0:	ffff0303 	.word	0xffff0303

08001bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bf6:	0004      	movs	r4, r0
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	343c      	adds	r4, #60	; 0x3c
 8001bfc:	7825      	ldrb	r5, [r4, #0]
{
 8001bfe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001c00:	0010      	movs	r0, r2
 8001c02:	2d01      	cmp	r5, #1
 8001c04:	d022      	beq.n	8001c4c <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c06:	001d      	movs	r5, r3
 8001c08:	353d      	adds	r5, #61	; 0x3d
 8001c0a:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c0c:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c0e:	4e10      	ldr	r6, [pc, #64]	; (8001c50 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8001c10:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c12:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c14:	42b2      	cmp	r2, r6
 8001c16:	d103      	bne.n	8001c20 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c18:	4f0e      	ldr	r7, [pc, #56]	; (8001c54 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001c1a:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c1c:	684f      	ldr	r7, [r1, #4]
 8001c1e:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c20:	2770      	movs	r7, #112	; 0x70
 8001c22:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c24:	680f      	ldr	r7, [r1, #0]
 8001c26:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c28:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2a:	42b2      	cmp	r2, r6
 8001c2c:	d005      	beq.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d002      	beq.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d104      	bne.n	8001c44 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c3e:	688b      	ldr	r3, [r1, #8]
 8001c40:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c42:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001c46:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001c4a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	ff0fffff 	.word	0xff0fffff
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40014000 	.word	0x40014000

08001c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c64:	6925      	ldr	r5, [r4, #16]
 8001c66:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c68:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c6a:	4329      	orrs	r1, r5
 8001c6c:	6965      	ldr	r5, [r4, #20]
 8001c6e:	69c3      	ldr	r3, [r0, #28]
 8001c70:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	4d4e      	ldr	r5, [pc, #312]	; (8001db0 <UART_SetConfig+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c76:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c78:	4028      	ands	r0, r5
 8001c7a:	4301      	orrs	r1, r0
 8001c7c:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7e:	6851      	ldr	r1, [r2, #4]
 8001c80:	484c      	ldr	r0, [pc, #304]	; (8001db4 <UART_SetConfig+0x154>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c82:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c84:	4001      	ands	r1, r0
 8001c86:	68e0      	ldr	r0, [r4, #12]
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8001c8c:	69a1      	ldr	r1, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c8e:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8001c90:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c92:	4d49      	ldr	r5, [pc, #292]	; (8001db8 <UART_SetConfig+0x158>)
 8001c94:	4028      	ands	r0, r5
 8001c96:	4301      	orrs	r1, r0

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001c98:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c9a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001c9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c9e:	4381      	bics	r1, r0
 8001ca0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ca2:	4301      	orrs	r1, r0
 8001ca4:	62d1      	str	r1, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ca6:	4945      	ldr	r1, [pc, #276]	; (8001dbc <UART_SetConfig+0x15c>)
 8001ca8:	428a      	cmp	r2, r1
 8001caa:	d117      	bne.n	8001cdc <UART_SetConfig+0x7c>
 8001cac:	2103      	movs	r1, #3
 8001cae:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <UART_SetConfig+0x160>)
 8001cb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	4943      	ldr	r1, [pc, #268]	; (8001dc4 <UART_SetConfig+0x164>)
 8001cb8:	2a02      	cmp	r2, #2
 8001cba:	d917      	bls.n	8001cec <UART_SetConfig+0x8c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	0212      	lsls	r2, r2, #8
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d000      	beq.n	8001cc6 <UART_SetConfig+0x66>
 8001cc4:	e069      	b.n	8001d9a <UART_SetConfig+0x13a>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cc6:	f7ff fe2f 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cca:	1e03      	subs	r3, r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ccc:	d128      	bne.n	8001d20 <UART_SetConfig+0xc0>
 8001cce:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <UART_SetConfig+0x168>)
 8001cd2:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8001cd8:	6763      	str	r3, [r4, #116]	; 0x74

  return ret;
}
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cdc:	493b      	ldr	r1, [pc, #236]	; (8001dcc <UART_SetConfig+0x16c>)
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d112      	bne.n	8001d08 <UART_SetConfig+0xa8>
 8001ce2:	210c      	movs	r1, #12
 8001ce4:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <UART_SetConfig+0x160>)
 8001ce6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ce8:	400a      	ands	r2, r1
 8001cea:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <UART_SetConfig+0x170>)
 8001cec:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d131      	bne.n	8001d5a <UART_SetConfig+0xfa>
    switch (clocksource)
 8001cf6:	2808      	cmp	r0, #8
 8001cf8:	d80c      	bhi.n	8001d14 <UART_SetConfig+0xb4>
 8001cfa:	f7fe fa01 	bl	8000100 <__gnu_thumb1_case_sqi>
 8001cfe:	0be4      	.short	0x0be4
 8001d00:	0b0d0b10 	.word	0x0b0d0b10
 8001d04:	0b0b      	.short	0x0b0b
 8001d06:	11          	.byte	0x11
 8001d07:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d08:	4932      	ldr	r1, [pc, #200]	; (8001dd4 <UART_SetConfig+0x174>)
 8001d0a:	428a      	cmp	r2, r1
 8001d0c:	d0d6      	beq.n	8001cbc <UART_SetConfig+0x5c>
 8001d0e:	4932      	ldr	r1, [pc, #200]	; (8001dd8 <UART_SetConfig+0x178>)
 8001d10:	428a      	cmp	r2, r1
 8001d12:	d0d3      	beq.n	8001cbc <UART_SetConfig+0x5c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d14:	2001      	movs	r0, #1
 8001d16:	e7db      	b.n	8001cd0 <UART_SetConfig+0x70>
        pclk = HAL_RCC_GetSysClockFreq();
 8001d18:	f7ff fd14 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001d1c:	e7d5      	b.n	8001cca <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <UART_SetConfig+0x17c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d22:	492f      	ldr	r1, [pc, #188]	; (8001de0 <UART_SetConfig+0x180>)
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	5a51      	ldrh	r1, [r2, r1]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe f9f3 	bl	8000114 <__udivsi3>
 8001d2e:	6865      	ldr	r5, [r4, #4]
 8001d30:	0040      	lsls	r0, r0, #1
 8001d32:	086b      	lsrs	r3, r5, #1
 8001d34:	0029      	movs	r1, r5
 8001d36:	18c0      	adds	r0, r0, r3
 8001d38:	f7fe f9ec 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d3c:	4929      	ldr	r1, [pc, #164]	; (8001de4 <UART_SetConfig+0x184>)
 8001d3e:	b282      	uxth	r2, r0
 8001d40:	3a10      	subs	r2, #16
 8001d42:	0403      	lsls	r3, r0, #16
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d8e5      	bhi.n	8001d14 <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d48:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d4a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d4c:	4390      	bics	r0, r2
 8001d4e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8001d50:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d52:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001d54:	4318      	orrs	r0, r3
 8001d56:	60d0      	str	r0, [r2, #12]
 8001d58:	e7b9      	b.n	8001cce <UART_SetConfig+0x6e>
    switch (clocksource)
 8001d5a:	2808      	cmp	r0, #8
 8001d5c:	d8da      	bhi.n	8001d14 <UART_SetConfig+0xb4>
 8001d5e:	f7fe f9cf 	bl	8000100 <__gnu_thumb1_case_sqi>
 8001d62:	d91c      	.short	0xd91c
 8001d64:	d922d925 	.word	0xd922d925
 8001d68:	d9d9      	.short	0xd9d9
 8001d6a:	05          	.byte	0x05
 8001d6b:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6c:	2080      	movs	r0, #128	; 0x80
 8001d6e:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <UART_SetConfig+0x180>)
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	5a99      	ldrh	r1, [r3, r2]
 8001d78:	f7fe f9cc 	bl	8000114 <__udivsi3>
 8001d7c:	6865      	ldr	r5, [r4, #4]
 8001d7e:	086b      	lsrs	r3, r5, #1
 8001d80:	18c0      	adds	r0, r0, r3
 8001d82:	0029      	movs	r1, r5
 8001d84:	f7fe f9c6 	bl	8000114 <__udivsi3>
 8001d88:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <UART_SetConfig+0x184>)
 8001d8e:	3a10      	subs	r2, #16
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8bf      	bhi.n	8001d14 <UART_SetConfig+0xb4>
        huart->Instance->BRR = usartdiv;
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	60d8      	str	r0, [r3, #12]
 8001d98:	e799      	b.n	8001cce <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d9a:	f7ff fdc5 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d100      	bne.n	8001da4 <UART_SetConfig+0x144>
 8001da2:	e794      	b.n	8001cce <UART_SetConfig+0x6e>
 8001da4:	e7e4      	b.n	8001d70 <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetSysClockFreq();
 8001da6:	f7ff fccd 	bl	8001744 <HAL_RCC_GetSysClockFreq>
        break;
 8001daa:	e7f8      	b.n	8001d9e <UART_SetConfig+0x13e>
        pclk = (uint32_t) HSI_VALUE;
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <UART_SetConfig+0x17c>)
 8001dae:	e7df      	b.n	8001d70 <UART_SetConfig+0x110>
 8001db0:	cfff69f3 	.word	0xcfff69f3
 8001db4:	ffffcfff 	.word	0xffffcfff
 8001db8:	11fff4ff 	.word	0x11fff4ff
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08002248 	.word	0x08002248
 8001dc8:	00010001 	.word	0x00010001
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	0800224b 	.word	0x0800224b
 8001dd4:	40004800 	.word	0x40004800
 8001dd8:	40004c00 	.word	0x40004c00
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	08002258 	.word	0x08002258
 8001de4:	0000ffef 	.word	0x0000ffef

08001de8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001de8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8001dea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dec:	07da      	lsls	r2, r3, #31
 8001dee:	d506      	bpl.n	8001dfe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001df0:	6801      	ldr	r1, [r0, #0]
 8001df2:	4c28      	ldr	r4, [pc, #160]	; (8001e94 <UART_AdvFeatureConfig+0xac>)
 8001df4:	684a      	ldr	r2, [r1, #4]
 8001df6:	4022      	ands	r2, r4
 8001df8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001dfa:	4322      	orrs	r2, r4
 8001dfc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dfe:	079a      	lsls	r2, r3, #30
 8001e00:	d506      	bpl.n	8001e10 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e02:	6801      	ldr	r1, [r0, #0]
 8001e04:	4c24      	ldr	r4, [pc, #144]	; (8001e98 <UART_AdvFeatureConfig+0xb0>)
 8001e06:	684a      	ldr	r2, [r1, #4]
 8001e08:	4022      	ands	r2, r4
 8001e0a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e0c:	4322      	orrs	r2, r4
 8001e0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e10:	075a      	lsls	r2, r3, #29
 8001e12:	d506      	bpl.n	8001e22 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e14:	6801      	ldr	r1, [r0, #0]
 8001e16:	4c21      	ldr	r4, [pc, #132]	; (8001e9c <UART_AdvFeatureConfig+0xb4>)
 8001e18:	684a      	ldr	r2, [r1, #4]
 8001e1a:	4022      	ands	r2, r4
 8001e1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e1e:	4322      	orrs	r2, r4
 8001e20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e22:	071a      	lsls	r2, r3, #28
 8001e24:	d506      	bpl.n	8001e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e26:	6801      	ldr	r1, [r0, #0]
 8001e28:	4c1d      	ldr	r4, [pc, #116]	; (8001ea0 <UART_AdvFeatureConfig+0xb8>)
 8001e2a:	684a      	ldr	r2, [r1, #4]
 8001e2c:	4022      	ands	r2, r4
 8001e2e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e30:	4322      	orrs	r2, r4
 8001e32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e34:	06da      	lsls	r2, r3, #27
 8001e36:	d506      	bpl.n	8001e46 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e38:	6801      	ldr	r1, [r0, #0]
 8001e3a:	4c1a      	ldr	r4, [pc, #104]	; (8001ea4 <UART_AdvFeatureConfig+0xbc>)
 8001e3c:	688a      	ldr	r2, [r1, #8]
 8001e3e:	4022      	ands	r2, r4
 8001e40:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001e42:	4322      	orrs	r2, r4
 8001e44:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e46:	069a      	lsls	r2, r3, #26
 8001e48:	d506      	bpl.n	8001e58 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e4a:	6801      	ldr	r1, [r0, #0]
 8001e4c:	4c16      	ldr	r4, [pc, #88]	; (8001ea8 <UART_AdvFeatureConfig+0xc0>)
 8001e4e:	688a      	ldr	r2, [r1, #8]
 8001e50:	4022      	ands	r2, r4
 8001e52:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e54:	4322      	orrs	r2, r4
 8001e56:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e58:	065a      	lsls	r2, r3, #25
 8001e5a:	d510      	bpl.n	8001e7e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e5c:	6801      	ldr	r1, [r0, #0]
 8001e5e:	4d13      	ldr	r5, [pc, #76]	; (8001eac <UART_AdvFeatureConfig+0xc4>)
 8001e60:	684a      	ldr	r2, [r1, #4]
 8001e62:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e64:	402a      	ands	r2, r5
 8001e66:	4322      	orrs	r2, r4
 8001e68:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	0352      	lsls	r2, r2, #13
 8001e6e:	4294      	cmp	r4, r2
 8001e70:	d105      	bne.n	8001e7e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e72:	684a      	ldr	r2, [r1, #4]
 8001e74:	4c0e      	ldr	r4, [pc, #56]	; (8001eb0 <UART_AdvFeatureConfig+0xc8>)
 8001e76:	4022      	ands	r2, r4
 8001e78:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001e7a:	4322      	orrs	r2, r4
 8001e7c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	d506      	bpl.n	8001e90 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	490b      	ldr	r1, [pc, #44]	; (8001eb4 <UART_AdvFeatureConfig+0xcc>)
 8001e86:	6853      	ldr	r3, [r2, #4]
 8001e88:	400b      	ands	r3, r1
 8001e8a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6053      	str	r3, [r2, #4]
  }
}
 8001e90:	bd30      	pop	{r4, r5, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	fffdffff 	.word	0xfffdffff
 8001e98:	fffeffff 	.word	0xfffeffff
 8001e9c:	fffbffff 	.word	0xfffbffff
 8001ea0:	ffff7fff 	.word	0xffff7fff
 8001ea4:	ffffefff 	.word	0xffffefff
 8001ea8:	ffffdfff 	.word	0xffffdfff
 8001eac:	ffefffff 	.word	0xffefffff
 8001eb0:	ff9fffff 	.word	0xff9fffff
 8001eb4:	fff7ffff 	.word	0xfff7ffff

08001eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001eba:	2780      	movs	r7, #128	; 0x80
{
 8001ebc:	0004      	movs	r4, r0
 8001ebe:	000d      	movs	r5, r1
 8001ec0:	0016      	movs	r6, r2
 8001ec2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001ec4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	69d3      	ldr	r3, [r2, #28]
 8001eca:	402b      	ands	r3, r5
 8001ecc:	1b5b      	subs	r3, r3, r5
 8001ece:	4259      	negs	r1, r3
 8001ed0:	414b      	adcs	r3, r1
 8001ed2:	42b3      	cmp	r3, r6
 8001ed4:	d001      	beq.n	8001eda <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e02b      	b.n	8001f32 <UART_WaitOnFlagUntilTimeout+0x7a>
    if (Timeout != HAL_MAX_DELAY)
 8001eda:	9b08      	ldr	r3, [sp, #32]
 8001edc:	3301      	adds	r3, #1
 8001ede:	d0f3      	beq.n	8001ec8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee0:	f7fe fddc 	bl	8000a9c <HAL_GetTick>
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	1ac0      	subs	r0, r0, r3
 8001ee8:	9b08      	ldr	r3, [sp, #32]
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d801      	bhi.n	8001ef2 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d120      	bne.n	8001f34 <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef2:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001efc:	6821      	ldr	r1, [r4, #0]
 8001efe:	4d21      	ldr	r5, [pc, #132]	; (8001f84 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8001f00:	680b      	ldr	r3, [r1, #0]
 8001f02:	402b      	ands	r3, r5
 8001f04:	600b      	str	r3, [r1, #0]
 8001f06:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f0a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f12:	6821      	ldr	r1, [r4, #0]
 8001f14:	688b      	ldr	r3, [r1, #8]
 8001f16:	4393      	bics	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
 8001f1a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001f1e:	0022      	movs	r2, r4
 8001f20:	2320      	movs	r3, #32
 8001f22:	3208      	adds	r2, #8
 8001f24:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8001f26:	3280      	adds	r2, #128	; 0x80
 8001f28:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(huart);
 8001f2a:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001f2e:	3480      	adds	r4, #128	; 0x80
 8001f30:	7023      	strb	r3, [r4, #0]
}
 8001f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f34:	2104      	movs	r1, #4
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	420a      	tst	r2, r1
 8001f3c:	d0c3      	beq.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	423a      	tst	r2, r7
 8001f42:	d0c0      	beq.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f44:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f46:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8001f50:	6821      	ldr	r1, [r4, #0]
 8001f52:	4d0c      	ldr	r5, [pc, #48]	; (8001f84 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8001f54:	680b      	ldr	r3, [r1, #0]
 8001f56:	402b      	ands	r3, r5
 8001f58:	600b      	str	r3, [r1, #0]
 8001f5a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f62:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f66:	6821      	ldr	r1, [r4, #0]
 8001f68:	688b      	ldr	r3, [r1, #8]
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
 8001f6e:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001f72:	0022      	movs	r2, r4
 8001f74:	2320      	movs	r3, #32
 8001f76:	3208      	adds	r2, #8
 8001f78:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8001f7a:	3280      	adds	r2, #128	; 0x80
 8001f7c:	6013      	str	r3, [r2, #0]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f7e:	6053      	str	r3, [r2, #4]
 8001f80:	e7d3      	b.n	8001f2a <UART_WaitOnFlagUntilTimeout+0x72>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	fffffe5f 	.word	0xfffffe5f

08001f88 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	0003      	movs	r3, r0
{
 8001f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8c:	2600      	movs	r6, #0
{
 8001f8e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f90:	338c      	adds	r3, #140	; 0x8c
 8001f92:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8001f94:	f7fe fd82 	bl	8000a9c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f98:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001f9a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	071b      	lsls	r3, r3, #28
 8001fa0:	d419      	bmi.n	8001fd6 <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	075b      	lsls	r3, r3, #29
 8001fa8:	d50a      	bpl.n	8001fc0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <UART_CheckIdleState+0x68>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	0020      	movs	r0, r4
 8001fb4:	002b      	movs	r3, r5
 8001fb6:	03c9      	lsls	r1, r1, #15
 8001fb8:	f7ff ff7e 	bl	8001eb8 <UART_WaitOnFlagUntilTimeout>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d115      	bne.n	8001fec <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8001fc0:	0022      	movs	r2, r4
 8001fc2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	67d3      	str	r3, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001fca:	3280      	adds	r2, #128	; 0x80
 8001fcc:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fce:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8001fd0:	3480      	adds	r4, #128	; 0x80
 8001fd2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001fd4:	e00b      	b.n	8001fee <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <UART_CheckIdleState+0x68>)
 8001fda:	0032      	movs	r2, r6
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	0389      	lsls	r1, r1, #14
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	f7ff ff68 	bl	8001eb8 <UART_WaitOnFlagUntilTimeout>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d0da      	beq.n	8001fa2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001fec:	2003      	movs	r0, #3
}
 8001fee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001ff0:	01ffffff 	.word	0x01ffffff

08001ff4 <HAL_UART_Init>:
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
}
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	0005      	movs	r5, r0
 8002000:	3508      	adds	r5, #8
 8002002:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8002008:	0002      	movs	r2, r0
 800200a:	3280      	adds	r2, #128	; 0x80
 800200c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800200e:	f7fe fc7d 	bl	800090c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002012:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002014:	2101      	movs	r1, #1
 8002016:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002018:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800201a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800201c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800201e:	438b      	bics	r3, r1
 8002020:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002022:	f7ff fe1d 	bl	8001c60 <UART_SetConfig>
 8002026:	2801      	cmp	r0, #1
 8002028:	d0e7      	beq.n	8001ffa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800202a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 8002030:	0020      	movs	r0, r4
 8002032:	f7ff fed9 	bl	8001de8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <HAL_UART_Init+0x64>)
 800203a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800203c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002040:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	438a      	bics	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800204a:	2201      	movs	r2, #1
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002052:	f7ff ff99 	bl	8001f88 <UART_CheckIdleState>
 8002056:	e7d1      	b.n	8001ffc <HAL_UART_Init+0x8>
 8002058:	ffffb7ff 	.word	0xffffb7ff

0800205c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800205e:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8002060:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <UARTEx_SetNbDataToProcess+0x40>)
 8002068:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800206c:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800206e:	4e0c      	ldr	r6, [pc, #48]	; (80020a0 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002070:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002072:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002074:	4d0b      	ldr	r5, [pc, #44]	; (80020a4 <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002076:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002078:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800207a:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800207c:	00c0      	lsls	r0, r0, #3
 800207e:	f7fe f8d3 	bl	8000228 <__divsi3>
 8002082:	0023      	movs	r3, r4
 8002084:	336a      	adds	r3, #106	; 0x6a
 8002086:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002088:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800208a:	0f5b      	lsrs	r3, r3, #29
 800208c:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800208e:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002090:	00c0      	lsls	r0, r0, #3
 8002092:	f7fe f8c9 	bl	8000228 <__divsi3>
 8002096:	3468      	adds	r4, #104	; 0x68
 8002098:	8020      	strh	r0, [r4, #0]
}
 800209a:	e7e6      	b.n	800206a <UARTEx_SetNbDataToProcess+0xe>
 800209c:	00010001 	.word	0x00010001
 80020a0:	08002278 	.word	0x08002278
 80020a4:	08002270 	.word	0x08002270

080020a8 <HAL_UARTEx_DisableFifoMode>:
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80020aa:	0004      	movs	r4, r0
 80020ac:	3480      	adds	r4, #128	; 0x80
 80020ae:	7822      	ldrb	r2, [r4, #0]
{
 80020b0:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80020b2:	2002      	movs	r0, #2
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d011      	beq.n	80020dc <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80020b8:	001d      	movs	r5, r3
 80020ba:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80020bc:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80020be:	3508      	adds	r5, #8
 80020c0:	67ea      	str	r2, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80020c6:	6810      	ldr	r0, [r2, #0]
 80020c8:	43b0      	bics	r0, r6
 80020ca:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <HAL_UARTEx_DisableFifoMode+0x38>)
 80020ce:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80020d0:	2000      	movs	r0, #0
 80020d2:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80020d6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80020d8:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80020da:	7020      	strb	r0, [r4, #0]
}
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	dfffffff 	.word	0xdfffffff

080020e4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80020e6:	0005      	movs	r5, r0
 80020e8:	3580      	adds	r5, #128	; 0x80
 80020ea:	782b      	ldrb	r3, [r5, #0]
{
 80020ec:	0004      	movs	r4, r0
 80020ee:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80020f0:	2002      	movs	r0, #2
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d018      	beq.n	8002128 <HAL_UARTEx_SetTxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 80020f6:	0026      	movs	r6, r4
 80020f8:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80020fa:	3801      	subs	r0, #1
 80020fc:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020fe:	3608      	adds	r6, #8
 8002100:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	4381      	bics	r1, r0
 800210a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800210c:	6899      	ldr	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800210e:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002110:	00c9      	lsls	r1, r1, #3
 8002112:	08c9      	lsrs	r1, r1, #3
 8002114:	4311      	orrs	r1, r2
 8002116:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002118:	f7ff ffa0 	bl	800205c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800211c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800211e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002120:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002122:	2320      	movs	r3, #32
 8002124:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002126:	7028      	strb	r0, [r5, #0]
}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800212c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800212e:	0005      	movs	r5, r0
 8002130:	3580      	adds	r5, #128	; 0x80
 8002132:	782b      	ldrb	r3, [r5, #0]
{
 8002134:	0004      	movs	r4, r0
 8002136:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8002138:	2002      	movs	r0, #2
 800213a:	2b01      	cmp	r3, #1
 800213c:	d018      	beq.n	8002170 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 800213e:	0026      	movs	r6, r4
 8002140:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002142:	3801      	subs	r0, #1
 8002144:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002146:	3608      	adds	r6, #8
 8002148:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	4381      	bics	r1, r0
 8002152:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8002158:	4001      	ands	r1, r0
 800215a:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 800215c:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800215e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002160:	f7ff ff7c 	bl	800205c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002164:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8002166:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002168:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800216a:	2320      	movs	r3, #32
 800216c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800216e:	7028      	strb	r0, [r5, #0]
}
 8002170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	f1ffffff 	.word	0xf1ffffff

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2600      	movs	r6, #0
 800217c:	4d0c      	ldr	r5, [pc, #48]	; (80021b0 <__libc_init_array+0x38>)
 800217e:	4c0d      	ldr	r4, [pc, #52]	; (80021b4 <__libc_init_array+0x3c>)
 8002180:	1b64      	subs	r4, r4, r5
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	42a6      	cmp	r6, r4
 8002186:	d109      	bne.n	800219c <__libc_init_array+0x24>
 8002188:	2600      	movs	r6, #0
 800218a:	f000 f821 	bl	80021d0 <_init>
 800218e:	4d0a      	ldr	r5, [pc, #40]	; (80021b8 <__libc_init_array+0x40>)
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <__libc_init_array+0x44>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	42a6      	cmp	r6, r4
 8002198:	d105      	bne.n	80021a6 <__libc_init_array+0x2e>
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	00b3      	lsls	r3, r6, #2
 800219e:	58eb      	ldr	r3, [r5, r3]
 80021a0:	4798      	blx	r3
 80021a2:	3601      	adds	r6, #1
 80021a4:	e7ee      	b.n	8002184 <__libc_init_array+0xc>
 80021a6:	00b3      	lsls	r3, r6, #2
 80021a8:	58eb      	ldr	r3, [r5, r3]
 80021aa:	4798      	blx	r3
 80021ac:	3601      	adds	r6, #1
 80021ae:	e7f2      	b.n	8002196 <__libc_init_array+0x1e>
 80021b0:	08002280 	.word	0x08002280
 80021b4:	08002280 	.word	0x08002280
 80021b8:	08002280 	.word	0x08002280
 80021bc:	08002284 	.word	0x08002284

080021c0 <memset>:
 80021c0:	0003      	movs	r3, r0
 80021c2:	1882      	adds	r2, r0, r2
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d100      	bne.n	80021ca <memset+0xa>
 80021c8:	4770      	bx	lr
 80021ca:	7019      	strb	r1, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	e7f9      	b.n	80021c4 <memset+0x4>

080021d0 <_init>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr

080021dc <_fini>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e2:	bc08      	pop	{r3}
 80021e4:	469e      	mov	lr, r3
 80021e6:	4770      	bx	lr
